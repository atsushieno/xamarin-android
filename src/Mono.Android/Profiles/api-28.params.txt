
package android.provider
;---------------------------------------
  class BlockedNumberContract
    canCurrentUserBlockNumbers(android.content.Context context)
    isBlocked(android.content.Context context, java.lang.String phoneNumber)
    unblock(android.content.Context context, java.lang.String phoneNumber)
  class Browser
    sendString(android.content.Context context, java.lang.String string)
  class CalendarContract.Attendees
    query(android.content.ContentResolver cr, long eventId, java.lang.String[] projection)
  class CalendarContract.CalendarEntity
    newEntityIterator(android.database.Cursor cursor)
  class CalendarContract.EventDays
    query(android.content.ContentResolver cr, int startDay, int numDays, java.lang.String[] projection)
  class CalendarContract.EventsEntity
    newEntityIterator(android.database.Cursor cursor, android.content.ContentProviderClient provider)
    newEntityIterator(android.database.Cursor cursor, android.content.ContentResolver resolver)
  class CalendarContract.Instances
    query(android.content.ContentResolver cr, java.lang.String[] projection, long begin, long end)
    query(android.content.ContentResolver cr, java.lang.String[] projection, long begin, long end, java.lang.String searchQuery)
  class CalendarContract.Reminders
    query(android.content.ContentResolver cr, long eventId, java.lang.String[] projection)
  class CallLog.Calls
    getLastOutgoingCall(android.content.Context context)
  class Contacts.ContactMethods
    addPostalLocation(android.content.Context context, long postalId, double latitude, double longitude)
    decodeImProtocol(java.lang.String encodedString)
    encodeCustomImProtocol(java.lang.String protocolString)
    encodePredefinedImProtocol(int protocol)
    getDisplayLabel(android.content.Context context, int kind, int type, java.lang.CharSequence label)
  class Contacts.Organizations
    getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label)
  class Contacts.People
    addToGroup(android.content.ContentResolver resolver, long personId, java.lang.String groupName)
    addToGroup(android.content.ContentResolver resolver, long personId, long groupId)
    addToMyContactsGroup(android.content.ContentResolver resolver, long personId)
    createPersonInMyContactsGroup(android.content.ContentResolver resolver, android.content.ContentValues values)
    loadContactPhoto(android.content.Context context, android.net.Uri person, int placeholderImageResource, android.graphics.BitmapFactory.Options options)
    markAsContacted(android.content.ContentResolver resolver, long personId)
    openContactPhotoInputStream(android.content.ContentResolver cr, android.net.Uri person)
    queryGroups(android.content.ContentResolver resolver, long person)
    setPhotoData(android.content.ContentResolver cr, android.net.Uri person, byte[] data)
  class Contacts.Phones
    getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label)
    getDisplayLabel(android.content.Context context, int type, java.lang.CharSequence label, java.lang.CharSequence[] labelArray)
  class Contacts.Settings
    getSetting(android.content.ContentResolver cr, java.lang.String account, java.lang.String key)
    setSetting(android.content.ContentResolver cr, java.lang.String account, java.lang.String key, java.lang.String value)
  class ContactsContract
    isProfileId(long id)
  class ContactsContract.CommonDataKinds.Email
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.Event
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeResource(java.lang.Integer type)
  class ContactsContract.CommonDataKinds.Im
    getProtocolLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getProtocolLabelResource(int type)
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.Organization
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.Phone
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.Relation
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.SipAddress
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.CommonDataKinds.StructuredPostal
    getTypeLabel(android.content.res.Resources res, int type, java.lang.CharSequence label)
    getTypeLabelResource(int type)
  class ContactsContract.Contacts
    getLookupUri(android.content.ContentResolver resolver, android.net.Uri contactUri)
    getLookupUri(long contactId, java.lang.String lookupKey)
    isEnterpriseContactId(long contactId)
    lookupContact(android.content.ContentResolver resolver, android.net.Uri lookupUri)
    markAsContacted(android.content.ContentResolver resolver, long contactId)
    openContactPhotoInputStream(android.content.ContentResolver cr, android.net.Uri contactUri)
    openContactPhotoInputStream(android.content.ContentResolver cr, android.net.Uri contactUri, boolean preferHighres)
  class ContactsContract.Contacts.AggregationSuggestions.Builder
    addNameParameter(java.lang.String name)
    setContactId(long contactId)
    setLimit(int limit)
  class ContactsContract.Data
    getContactLookupUri(android.content.ContentResolver resolver, android.net.Uri dataUri)
  class ContactsContract.Directory
    isEnterpriseDirectoryId(long directoryId)
    isRemoteDirectoryId(long directoryId)
    notifyDirectoryChange(android.content.ContentResolver resolver)
  class ContactsContract.Groups
    newEntityIterator(android.database.Cursor cursor)
  class ContactsContract.PinnedPositions
    pin(android.content.ContentResolver contentResolver, long contactId, int pinnedPosition)
    undemote(android.content.ContentResolver contentResolver, long contactId)
  class ContactsContract.ProfileSyncState
    get(android.content.ContentProviderClient provider, android.accounts.Account account)
    getWithUri(android.content.ContentProviderClient provider, android.accounts.Account account)
    newSetOperation(android.accounts.Account account, byte[] data)
    set(android.content.ContentProviderClient provider, android.accounts.Account account, byte[] data)
  class ContactsContract.QuickContact
    showQuickContact(android.content.Context context, android.graphics.Rect target, android.net.Uri lookupUri, int mode, java.lang.String[] excludeMimes)
    showQuickContact(android.content.Context context, android.graphics.Rect target, android.net.Uri lookupUri, java.lang.String[] excludeMimes, java.lang.String prioritizedMimeType)
    showQuickContact(android.content.Context context, android.view.View target, android.net.Uri lookupUri, int mode, java.lang.String[] excludeMimes)
    showQuickContact(android.content.Context context, android.view.View target, android.net.Uri lookupUri, java.lang.String[] excludeMimes, java.lang.String prioritizedMimeType)
  class ContactsContract.RawContacts
    getContactLookupUri(android.content.ContentResolver resolver, android.net.Uri rawContactUri)
    newEntityIterator(android.database.Cursor cursor)
  class ContactsContract.StatusUpdates
    getPresenceIconResourceId(int status)
    getPresencePrecedence(int status)
  class ContactsContract.SyncState
    get(android.content.ContentProviderClient provider, android.accounts.Account account)
    getWithUri(android.content.ContentProviderClient provider, android.accounts.Account account)
    newSetOperation(android.accounts.Account account, byte[] data)
    set(android.content.ContentProviderClient provider, android.accounts.Account account, byte[] data)
  class DocumentsContract
    buildChildDocumentsUri(java.lang.String authority, java.lang.String parentDocumentId)
    buildChildDocumentsUriUsingTree(android.net.Uri treeUri, java.lang.String parentDocumentId)
    buildDocumentUri(java.lang.String authority, java.lang.String documentId)
    buildDocumentUriUsingTree(android.net.Uri treeUri, java.lang.String documentId)
    buildRecentDocumentsUri(java.lang.String authority, java.lang.String rootId)
    buildRootsUri(java.lang.String authority)
    buildRootUri(java.lang.String authority, java.lang.String rootId)
    buildSearchDocumentsUri(java.lang.String authority, java.lang.String rootId, java.lang.String query)
    buildTreeDocumentUri(java.lang.String authority, java.lang.String documentId)
    copyDocument(android.content.ContentResolver resolver, android.net.Uri sourceDocumentUri, android.net.Uri targetParentDocumentUri)
    createDocument(android.content.ContentResolver resolver, android.net.Uri parentDocumentUri, java.lang.String mimeType, java.lang.String displayName)
    createWebLinkIntent(android.content.ContentResolver resolver, android.net.Uri uri, android.os.Bundle options)
    deleteDocument(android.content.ContentResolver resolver, android.net.Uri documentUri)
    ejectRoot(android.content.ContentResolver resolver, android.net.Uri rootUri)
    findDocumentPath(android.content.ContentResolver resolver, android.net.Uri treeUri)
    getDocumentId(android.net.Uri documentUri)
    getDocumentThumbnail(android.content.ContentResolver resolver, android.net.Uri documentUri, android.graphics.Point size, android.os.CancellationSignal signal)
    getRootId(android.net.Uri rootUri)
    getSearchDocumentsQuery(android.net.Uri searchDocumentsUri)
    getTreeDocumentId(android.net.Uri documentUri)
    isDocumentUri(android.content.Context context, android.net.Uri uri)
    isTreeUri(android.net.Uri uri)
    moveDocument(android.content.ContentResolver resolver, android.net.Uri sourceDocumentUri, android.net.Uri sourceParentDocumentUri, android.net.Uri targetParentDocumentUri)
    removeDocument(android.content.ContentResolver resolver, android.net.Uri documentUri, android.net.Uri parentDocumentUri)
    renameDocument(android.content.ContentResolver resolver, android.net.Uri documentUri, java.lang.String displayName)
  class DocumentsContract.Path
    #ctor(java.lang.String rootId, java.util.List<java.lang.String> path)
    equals(java.lang.Object o)
    writeToParcel(android.os.Parcel dest, int flags)
  class DocumentsProvider
    attachInfo(android.content.Context context, android.content.pm.ProviderInfo info)
    call(java.lang.String method, java.lang.String arg, android.os.Bundle extras)
    canonicalize(android.net.Uri uri)
    copyDocument(java.lang.String sourceDocumentId, java.lang.String targetParentDocumentId)
    createDocument(java.lang.String parentDocumentId, java.lang.String mimeType, java.lang.String displayName)
    createWebLinkIntent(java.lang.String documentId, android.os.Bundle options)
    delete(android.net.Uri uri, java.lang.String selection, java.lang.String[] selectionArgs)
    deleteDocument(java.lang.String documentId)
    ejectRoot(java.lang.String rootId)
    findDocumentPath(java.lang.String parentDocumentId, java.lang.String childDocumentId)
    getDocumentStreamTypes(java.lang.String documentId, java.lang.String mimeTypeFilter)
    getDocumentType(java.lang.String documentId)
    getStreamTypes(android.net.Uri uri, java.lang.String mimeTypeFilter)
    getType(android.net.Uri uri)
    insert(android.net.Uri uri, android.content.ContentValues values)
    isChildDocument(java.lang.String parentDocumentId, java.lang.String documentId)
    moveDocument(java.lang.String sourceDocumentId, java.lang.String sourceParentDocumentId, java.lang.String targetParentDocumentId)
    openAssetFile(android.net.Uri uri, java.lang.String mode)
    openAssetFile(android.net.Uri uri, java.lang.String mode, android.os.CancellationSignal signal)
    openDocument(java.lang.String documentId, java.lang.String mode, android.os.CancellationSignal signal)
    openDocumentThumbnail(java.lang.String documentId, android.graphics.Point sizeHint, android.os.CancellationSignal signal)
    openFile(android.net.Uri uri, java.lang.String mode)
    openFile(android.net.Uri uri, java.lang.String mode, android.os.CancellationSignal signal)
    openTypedAssetFile(android.net.Uri uri, java.lang.String mimeTypeFilter, android.os.Bundle opts)
    openTypedAssetFile(android.net.Uri uri, java.lang.String mimeTypeFilter, android.os.Bundle opts, android.os.CancellationSignal signal)
    openTypedDocument(java.lang.String documentId, java.lang.String mimeTypeFilter, android.os.Bundle opts, android.os.CancellationSignal signal)
    query(android.net.Uri uri, java.lang.String[] projection, android.os.Bundle queryArgs, android.os.CancellationSignal cancellationSignal)
    query(android.net.Uri uri, java.lang.String[] projection, java.lang.String selection, java.lang.String[] selectionArgs, java.lang.String sortOrder)
    query(android.net.Uri uri, java.lang.String[] projection, java.lang.String selection, java.lang.String[] selectionArgs, java.lang.String sortOrder, android.os.CancellationSignal cancellationSignal)
    queryChildDocuments(java.lang.String parentDocumentId, java.lang.String[] projection, android.os.Bundle queryArgs)
    queryChildDocuments(java.lang.String parentDocumentId, java.lang.String[] projection, java.lang.String sortOrder)
    queryDocument(java.lang.String documentId, java.lang.String[] projection)
    queryRecentDocuments(java.lang.String rootId, java.lang.String[] projection)
    queryRoots(java.lang.String[] projection)
    querySearchDocuments(java.lang.String rootId, java.lang.String query, java.lang.String[] projection)
    removeDocument(java.lang.String documentId, java.lang.String parentDocumentId)
    renameDocument(java.lang.String documentId, java.lang.String displayName)
    revokeDocumentPermission(java.lang.String documentId)
    update(android.net.Uri uri, android.content.ContentValues values, java.lang.String selection, java.lang.String[] selectionArgs)
  class FontRequest
    #ctor(java.lang.String providerAuthority, java.lang.String providerPackage, java.lang.String query)
    #ctor(java.lang.String providerAuthority, java.lang.String providerPackage, java.lang.String query, java.util.List<java.util.List<byte[]>> certificates)
  class FontsContract
    buildTypeface(android.content.Context context, android.os.CancellationSignal cancellationSignal, android.provider.FontsContract.FontInfo[] fonts)
    fetchFonts(android.content.Context context, android.os.CancellationSignal cancellationSignal, android.provider.FontRequest request)
    requestFonts(android.content.Context context, android.provider.FontRequest request, android.os.Handler handler, android.os.CancellationSignal cancellationSignal, android.provider.FontsContract.FontRequestCallback callback)
  class FontsContract.FontRequestCallback
    onTypefaceRequestFailed(int reason)
    onTypefaceRetrieved(android.graphics.Typeface typeface)
  class MediaStore
    getDocumentUri(android.content.Context context, android.net.Uri mediaUri)
    getVersion(android.content.Context context)
  class MediaStore.Audio
    keyFor(java.lang.String name)
  class MediaStore.Audio.Albums
    getContentUri(java.lang.String volumeName)
  class MediaStore.Audio.Artists
    getContentUri(java.lang.String volumeName)
  class MediaStore.Audio.Artists.Albums
    getContentUri(java.lang.String volumeName, long artistId)
  class MediaStore.Audio.Genres
    getContentUri(java.lang.String volumeName)
    getContentUriForAudioId(java.lang.String volumeName, int audioId)
  class MediaStore.Audio.Genres.Members
    getContentUri(java.lang.String volumeName, long genreId)
  class MediaStore.Audio.Media
    getContentUri(java.lang.String volumeName)
    getContentUriForPath(java.lang.String path)
  class MediaStore.Audio.Playlists
    getContentUri(java.lang.String volumeName)
  class MediaStore.Audio.Playlists.Members
    getContentUri(java.lang.String volumeName, long playlistId)
    moveItem(android.content.ContentResolver res, long playlistId, int from, int to)
  class MediaStore.Files
    getContentUri(java.lang.String volumeName)
    getContentUri(java.lang.String volumeName, long rowId)
  class MediaStore.Images.Media
    getBitmap(android.content.ContentResolver cr, android.net.Uri url)
    getContentUri(java.lang.String volumeName)
    insertImage(android.content.ContentResolver cr, android.graphics.Bitmap source, java.lang.String title, java.lang.String description)
    insertImage(android.content.ContentResolver cr, java.lang.String imagePath, java.lang.String name, java.lang.String description)
    query(android.content.ContentResolver cr, android.net.Uri uri, java.lang.String[] projection)
    query(android.content.ContentResolver cr, android.net.Uri uri, java.lang.String[] projection, java.lang.String where, java.lang.String orderBy)
    query(android.content.ContentResolver cr, android.net.Uri uri, java.lang.String[] projection, java.lang.String selection, java.lang.String[] selectionArgs, java.lang.String orderBy)
  class MediaStore.Images.Thumbnails
    cancelThumbnailRequest(android.content.ContentResolver cr, long origId)
    cancelThumbnailRequest(android.content.ContentResolver cr, long origId, long groupId)
    getContentUri(java.lang.String volumeName)
    getThumbnail(android.content.ContentResolver cr, long origId, int kind, android.graphics.BitmapFactory.Options options)
    getThumbnail(android.content.ContentResolver cr, long origId, long groupId, int kind, android.graphics.BitmapFactory.Options options)
    query(android.content.ContentResolver cr, android.net.Uri uri, java.lang.String[] projection)
    queryMiniThumbnail(android.content.ContentResolver cr, long origId, int kind, java.lang.String[] projection)
    queryMiniThumbnails(android.content.ContentResolver cr, android.net.Uri uri, int kind, java.lang.String[] projection)
  class MediaStore.Video
    query(android.content.ContentResolver cr, android.net.Uri uri, java.lang.String[] projection)
  class MediaStore.Video.Media
    getContentUri(java.lang.String volumeName)
  class MediaStore.Video.Thumbnails
    cancelThumbnailRequest(android.content.ContentResolver cr, long origId)
    cancelThumbnailRequest(android.content.ContentResolver cr, long origId, long groupId)
    getContentUri(java.lang.String volumeName)
    getThumbnail(android.content.ContentResolver cr, long origId, int kind, android.graphics.BitmapFactory.Options options)
    getThumbnail(android.content.ContentResolver cr, long origId, long groupId, int kind, android.graphics.BitmapFactory.Options options)
  class SearchRecentSuggestions
    saveRecentQuery(java.lang.String queryString, java.lang.String line2)
    #ctor(android.content.Context context, java.lang.String authority, int mode)
    truncateHistory(android.content.ContentResolver cr, int maxEntries)
  class Settings
    canDrawOverlays(android.content.Context context)
  class Settings.Global
    getFloat(android.content.ContentResolver cr, java.lang.String name)
    getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
    getInt(android.content.ContentResolver cr, java.lang.String name)
    getInt(android.content.ContentResolver cr, java.lang.String name, int def)
    getLong(android.content.ContentResolver cr, java.lang.String name)
    getLong(android.content.ContentResolver cr, java.lang.String name, long def)
    getString(android.content.ContentResolver resolver, java.lang.String name)
    getUriFor(java.lang.String name)
    putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
    putInt(android.content.ContentResolver cr, java.lang.String name, int value)
    putLong(android.content.ContentResolver cr, java.lang.String name, long value)
    putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
  class Settings.NameValueTable
    getUriFor(android.net.Uri uri, java.lang.String name)
    putString(android.content.ContentResolver resolver, android.net.Uri uri, java.lang.String name, java.lang.String value)
  class Settings.Secure
    getFloat(android.content.ContentResolver cr, java.lang.String name)
    getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
    getInt(android.content.ContentResolver cr, java.lang.String name)
    getInt(android.content.ContentResolver cr, java.lang.String name, int def)
    getLong(android.content.ContentResolver cr, java.lang.String name)
    getLong(android.content.ContentResolver cr, java.lang.String name, long def)
    getString(android.content.ContentResolver resolver, java.lang.String name)
    getUriFor(java.lang.String name)
    isLocationProviderEnabled(android.content.ContentResolver cr, java.lang.String provider)
    putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
    putInt(android.content.ContentResolver cr, java.lang.String name, int value)
    putLong(android.content.ContentResolver cr, java.lang.String name, long value)
    putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
    setLocationProviderEnabled(android.content.ContentResolver cr, java.lang.String provider, boolean enabled)
  class Settings.SettingNotFoundException
    #ctor(java.lang.String msg)
  class Settings.System
    canWrite(android.content.Context context)
    getConfiguration(android.content.ContentResolver cr, android.content.res.Configuration outConfig)
    getFloat(android.content.ContentResolver cr, java.lang.String name)
    getFloat(android.content.ContentResolver cr, java.lang.String name, float def)
    getInt(android.content.ContentResolver cr, java.lang.String name)
    getInt(android.content.ContentResolver cr, java.lang.String name, int def)
    getLong(android.content.ContentResolver cr, java.lang.String name)
    getLong(android.content.ContentResolver cr, java.lang.String name, long def)
    getShowGTalkServiceStatus(android.content.ContentResolver cr)
    getString(android.content.ContentResolver resolver, java.lang.String name)
    getUriFor(java.lang.String name)
    putConfiguration(android.content.ContentResolver cr, android.content.res.Configuration config)
    putFloat(android.content.ContentResolver cr, java.lang.String name, float value)
    putInt(android.content.ContentResolver cr, java.lang.String name, int value)
    putLong(android.content.ContentResolver cr, java.lang.String name, long value)
    putString(android.content.ContentResolver resolver, java.lang.String name, java.lang.String value)
    setShowGTalkServiceStatus(android.content.ContentResolver cr, boolean flag)
  class SyncStateContract.Helpers
    get(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account)
    getWithUri(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account)
    insert(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account, byte[] data)
    newSetOperation(android.net.Uri uri, android.accounts.Account account, byte[] data)
    newUpdateOperation(android.net.Uri uri, byte[] data)
    set(android.content.ContentProviderClient provider, android.net.Uri uri, android.accounts.Account account, byte[] data)
    update(android.content.ContentProviderClient provider, android.net.Uri uri, byte[] data)
  class Telephony.CarrierIdentification
    getUriForSubscriptionId(int subscriptionId)
  class Telephony.ServiceStateTable
    getUriForSubscriptionId(int subscriptionId)
    getUriForSubscriptionIdAndField(int subscriptionId, java.lang.String field)
  class Telephony.Sms
    getDefaultSmsPackage(android.content.Context context)
  class Telephony.Sms.Intents
    getMessagesFromIntent(android.content.Intent intent)
  class Telephony.Threads
    getOrCreateThreadId(android.content.Context context, java.lang.String recipient)
    getOrCreateThreadId(android.content.Context context, java.util.Set<java.lang.String> recipients)
  class UserDictionary.Words
    addWord(android.content.Context context, java.lang.String word, int frequency, int localeType)
    addWord(android.content.Context context, java.lang.String word, int frequency, java.lang.String shortcut, java.util.Locale locale)
  class VoicemailContract.Status
    buildSourceUri(java.lang.String packageName)
  class VoicemailContract.Voicemails
    buildSourceUri(java.lang.String packageName)

package android.renderscript
;---------------------------------------
  class Allocation
    copy1DRangeFrom(int off, int count, android.renderscript.Allocation data, int dataOff)
    copy1DRangeFrom(int off, int count, byte[] d)
    copy1DRangeFrom(int off, int count, float[] d)
    copy1DRangeFrom(int off, int count, int[] d)
    copy1DRangeFrom(int off, int count, java.lang.Object array)
    copy1DRangeFrom(int off, int count, short[] d)
    copy1DRangeFromUnchecked(int off, int count, byte[] d)
    copy1DRangeFromUnchecked(int off, int count, float[] d)
    copy1DRangeFromUnchecked(int off, int count, int[] d)
    copy1DRangeFromUnchecked(int off, int count, java.lang.Object array)
    copy1DRangeFromUnchecked(int off, int count, short[] d)
    copy1DRangeTo(int off, int count, byte[] d)
    copy1DRangeTo(int off, int count, float[] d)
    copy1DRangeTo(int off, int count, int[] d)
    copy1DRangeTo(int off, int count, java.lang.Object array)
    copy1DRangeTo(int off, int count, short[] d)
    copy1DRangeToUnchecked(int off, int count, byte[] d)
    copy1DRangeToUnchecked(int off, int count, float[] d)
    copy1DRangeToUnchecked(int off, int count, int[] d)
    copy1DRangeToUnchecked(int off, int count, java.lang.Object array)
    copy1DRangeToUnchecked(int off, int count, short[] d)
    copy2DRangeFrom(int xoff, int yoff, android.graphics.Bitmap data)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, android.renderscript.Allocation data, int dataXoff, int dataYoff)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, byte[] data)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, float[] data)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, int[] data)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, java.lang.Object array)
    copy2DRangeFrom(int xoff, int yoff, int w, int h, short[] data)
    copy2DRangeTo(int xoff, int yoff, int w, int h, byte[] data)
    copy2DRangeTo(int xoff, int yoff, int w, int h, float[] data)
    copy2DRangeTo(int xoff, int yoff, int w, int h, int[] data)
    copy2DRangeTo(int xoff, int yoff, int w, int h, java.lang.Object array)
    copy2DRangeTo(int xoff, int yoff, int w, int h, short[] data)
    copy3DRangeFrom(int xoff, int yoff, int zoff, int w, int h, int d, android.renderscript.Allocation data, int dataXoff, int dataYoff, int dataZoff)
    copy3DRangeFrom(int xoff, int yoff, int zoff, int w, int h, int d, java.lang.Object array)
    copy3DRangeTo(int xoff, int yoff, int zoff, int w, int h, int d, java.lang.Object array)
    copyFrom(android.graphics.Bitmap b)
    copyFrom(android.renderscript.Allocation a)
    copyFrom(android.renderscript.BaseObj[] d)
    copyFrom(byte[] d)
    copyFrom(float[] d)
    copyFrom(int[] d)
    copyFrom(java.lang.Object array)
    copyFrom(short[] d)
    copyFromUnchecked(byte[] d)
    copyFromUnchecked(float[] d)
    copyFromUnchecked(int[] d)
    copyFromUnchecked(java.lang.Object array)
    copyFromUnchecked(short[] d)
    copyTo(android.graphics.Bitmap b)
    copyTo(byte[] d)
    copyTo(float[] d)
    copyTo(int[] d)
    copyTo(java.lang.Object array)
    copyTo(short[] d)
    createAllocations(android.renderscript.RenderScript rs, android.renderscript.Type t, int usage, int numAlloc)
    createCubemapFromBitmap(android.renderscript.RenderScript rs, android.graphics.Bitmap b)
    createCubemapFromBitmap(android.renderscript.RenderScript rs, android.graphics.Bitmap b, android.renderscript.Allocation.MipmapControl mips, int usage)
    createCubemapFromCubeFaces(android.renderscript.RenderScript rs, android.graphics.Bitmap xpos, android.graphics.Bitmap xneg, android.graphics.Bitmap ypos, android.graphics.Bitmap yneg, android.graphics.Bitmap zpos, android.graphics.Bitmap zneg)
    createCubemapFromCubeFaces(android.renderscript.RenderScript rs, android.graphics.Bitmap xpos, android.graphics.Bitmap xneg, android.graphics.Bitmap ypos, android.graphics.Bitmap yneg, android.graphics.Bitmap zpos, android.graphics.Bitmap zneg, android.renderscript.Allocation.MipmapControl mips, int usage)
    createFromBitmap(android.renderscript.RenderScript rs, android.graphics.Bitmap b)
    createFromBitmap(android.renderscript.RenderScript rs, android.graphics.Bitmap b, android.renderscript.Allocation.MipmapControl mips, int usage)
    createFromBitmapResource(android.renderscript.RenderScript rs, android.content.res.Resources res, int id)
    createFromBitmapResource(android.renderscript.RenderScript rs, android.content.res.Resources res, int id, android.renderscript.Allocation.MipmapControl mips, int usage)
    createFromString(android.renderscript.RenderScript rs, java.lang.String str, int usage)
    createSized(android.renderscript.RenderScript rs, android.renderscript.Element e, int count)
    createSized(android.renderscript.RenderScript rs, android.renderscript.Element e, int count, int usage)
    createTyped(android.renderscript.RenderScript rs, android.renderscript.Type type)
    createTyped(android.renderscript.RenderScript rs, android.renderscript.Type type, android.renderscript.Allocation.MipmapControl mips, int usage)
    createTyped(android.renderscript.RenderScript rs, android.renderscript.Type type, int usage)
    resize(int dimX)
    setAutoPadding(boolean useAutoPadding)
    setFromFieldPacker(int xoff, android.renderscript.FieldPacker fp)
    setFromFieldPacker(int xoff, int component_number, android.renderscript.FieldPacker fp)
    setFromFieldPacker(int xoff, int yoff, int zoff, int component_number, android.renderscript.FieldPacker fp)
    setOnBufferAvailableListener(android.renderscript.Allocation.OnBufferAvailableListener callback)
    setSurface(android.view.Surface sur)
    syncAll(int srcLocation)
  class Allocation.MipmapControl
    valueOf(java.lang.String name)
  interface Allocation.OnBufferAvailableListener
    onBufferAvailable(android.renderscript.Allocation a)
  class AllocationAdapter
    create1D(android.renderscript.RenderScript rs, android.renderscript.Allocation a)
    create2D(android.renderscript.RenderScript rs, android.renderscript.Allocation a)
    createTyped(android.renderscript.RenderScript rs, android.renderscript.Allocation a, android.renderscript.Type t)
    resize(int dimX)
    setFace(android.renderscript.Type.CubemapFace cf)
    setLOD(int lod)
    setX(int x)
    setY(int y)
    setZ(int z)
  class BaseObj
    equals(java.lang.Object obj)
    setName(java.lang.String name)
  class Byte2
    #ctor(byte initX, byte initY)
  class Byte3
    #ctor(byte initX, byte initY, byte initZ)
  class Byte4
    #ctor(byte initX, byte initY, byte initZ, byte initW)
  class Double2
    #ctor(double x, double y)
  class Double3
    #ctor(double x, double y, double z)
  class Double4
    #ctor(double x, double y, double z, double w)
  class FieldPacker
    addBoolean(boolean v)
    addF32(android.renderscript.Float2 v)
    addF32(android.renderscript.Float3 v)
    addF32(android.renderscript.Float4 v)
    addF32(float v)
    addF64(android.renderscript.Double2 v)
    addF64(android.renderscript.Double3 v)
    addF64(android.renderscript.Double4 v)
    addF64(double v)
    addI16(android.renderscript.Short2 v)
    addI16(android.renderscript.Short3 v)
    addI16(android.renderscript.Short4 v)
    addI16(short v)
    addI32(android.renderscript.Int2 v)
    addI32(android.renderscript.Int3 v)
    addI32(android.renderscript.Int4 v)
    addI32(int v)
    addI64(android.renderscript.Long2 v)
    addI64(android.renderscript.Long3 v)
    addI64(android.renderscript.Long4 v)
    addI64(long v)
    addI8(android.renderscript.Byte2 v)
    addI8(android.renderscript.Byte3 v)
    addI8(android.renderscript.Byte4 v)
    addI8(byte v)
    addMatrix(android.renderscript.Matrix2f v)
    addMatrix(android.renderscript.Matrix3f v)
    addMatrix(android.renderscript.Matrix4f v)
    addObj(android.renderscript.BaseObj obj)
    addU16(android.renderscript.Int2 v)
    addU16(android.renderscript.Int3 v)
    addU16(android.renderscript.Int4 v)
    addU16(int v)
    addU32(android.renderscript.Long2 v)
    addU32(android.renderscript.Long3 v)
    addU32(android.renderscript.Long4 v)
    addU32(long v)
    addU64(android.renderscript.Long2 v)
    addU64(android.renderscript.Long3 v)
    addU64(android.renderscript.Long4 v)
    addU64(long v)
    addU8(android.renderscript.Short2 v)
    addU8(android.renderscript.Short3 v)
    addU8(android.renderscript.Short4 v)
    addU8(short v)
    align(int v)
    #ctor(byte[] data)
    #ctor(int len)
    reset(int i)
    skip(int i)
    subalign(int v)
  class Float2
    #ctor(float x, float y)
  class Float4
    #ctor(float x, float y, float z, float w)
  class Int2
    #ctor(int x, int y)
  class Int3
    #ctor(int x, int y, int z)
  class Int4
    #ctor(int x, int y, int z, int w)
  class Long2
    #ctor(long x, long y)
  class Long3
    #ctor(long x, long y, long z)
  class Long4
    #ctor(long x, long y, long z, long w)
  class Matrix3f
    get(int x, int y)
    load(android.renderscript.Matrix3f src)
    loadMultiply(android.renderscript.Matrix3f lhs, android.renderscript.Matrix3f rhs)
    loadRotate(float rot)
    loadRotate(float rot, float x, float y, float z)
    loadScale(float x, float y)
    loadScale(float x, float y, float z)
    loadTranslate(float x, float y)
    #ctor(float[] dataArray)
    multiply(android.renderscript.Matrix3f rhs)
    rotate(float rot)
    rotate(float rot, float x, float y, float z)
    scale(float x, float y)
    scale(float x, float y, float z)
    set(int x, int y, float v)
    translate(float x, float y)
  class Matrix4f
    get(int x, int y)
    load(android.renderscript.Matrix4f src)
    loadFrustum(float l, float r, float b, float t, float n, float f)
    loadMultiply(android.renderscript.Matrix4f lhs, android.renderscript.Matrix4f rhs)
    loadOrtho(float l, float r, float b, float t, float n, float f)
    loadOrthoWindow(int w, int h)
    loadPerspective(float fovy, float aspect, float near, float far)
    loadProjectionNormalized(int w, int h)
    loadRotate(float rot, float x, float y, float z)
    loadScale(float x, float y, float z)
    loadTranslate(float x, float y, float z)
    #ctor(float[] dataArray)
    multiply(android.renderscript.Matrix4f rhs)
    rotate(float rot, float x, float y, float z)
    scale(float x, float y, float z)
    set(int x, int y, float v)
    translate(float x, float y, float z)
  class RenderScript
    create(android.content.Context ctx)
    create(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct)
    create(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct, int flags)
    createMultiContext(android.content.Context ctx, android.renderscript.RenderScript.ContextType ct, int flags, int API_number)
    sendMessage(int id, int[] data)
    setErrorHandler(android.renderscript.RenderScript.RSErrorHandler msg)
    setMessageHandler(android.renderscript.RenderScript.RSMessageHandler msg)
    setPriority(android.renderscript.RenderScript.Priority p)
  class RenderScript.ContextType
    valueOf(java.lang.String name)
  class RenderScript.Priority
    valueOf(java.lang.String name)
  class RSIllegalArgumentException
    #ctor(java.lang.String string)
  class RSRuntimeException
    #ctor(java.lang.String string)
  class Sampler
    CLAMP_LINEAR(android.renderscript.RenderScript rs)
    CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript rs)
    CLAMP_NEAREST(android.renderscript.RenderScript rs)
    MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript rs)
    MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript rs)
    MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript rs)
    WRAP_LINEAR(android.renderscript.RenderScript rs)
    WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript rs)
    WRAP_NEAREST(android.renderscript.RenderScript rs)
  class Sampler.Builder
    #ctor(android.renderscript.RenderScript rs)
    setAnisotropy(float v)
    setMagnification(android.renderscript.Sampler.Value v)
    setMinification(android.renderscript.Sampler.Value v)
    setWrapS(android.renderscript.Sampler.Value v)
    setWrapT(android.renderscript.Sampler.Value v)
  class Sampler.Value
    valueOf(java.lang.String name)
  class Script
    bindAllocation(android.renderscript.Allocation va, int slot)
    createFieldID(int slot, android.renderscript.Element e)
    createInvokeID(int slot)
    createKernelID(int slot, int sig, android.renderscript.Element ein, android.renderscript.Element eout)
    forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v)
    forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc)
    forEach(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.FieldPacker v)
    forEach(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc)
    getVarB(int index)
    getVarD(int index)
    getVarF(int index)
    getVarI(int index)
    getVarJ(int index)
    getVarV(int index, android.renderscript.FieldPacker v)
    invoke(int slot)
    invoke(int slot, android.renderscript.FieldPacker v)
    reduce(int slot, android.renderscript.Allocation[] ains, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions sc)
    setTimeZone(java.lang.String timeZone)
    setVar(int index, android.renderscript.BaseObj o)
    setVar(int index, android.renderscript.FieldPacker v)
    setVar(int index, android.renderscript.FieldPacker v, android.renderscript.Element e, int[] dims)
    setVar(int index, boolean v)
    setVar(int index, double v)
    setVar(int index, float v)
    setVar(int index, int v)
    setVar(int index, long v)
  class Script.FieldBase
    init(android.renderscript.RenderScript rs, int dimx)
    init(android.renderscript.RenderScript rs, int dimx, int usages)
  class Script.LaunchOptions
    setX(int xstartArg, int xendArg)
    setY(int ystartArg, int yendArg)
    setZ(int zstartArg, int zendArg)
  class ScriptIntrinsicColorMatrix
    create(android.renderscript.RenderScript rs)
    create(android.renderscript.RenderScript rs, android.renderscript.Element e)
    forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
    forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
    setAdd(android.renderscript.Float4 f)
    setAdd(float r, float g, float b, float a)
    setColorMatrix(android.renderscript.Matrix3f m)
    setColorMatrix(android.renderscript.Matrix4f m)
  class ScriptIntrinsicConvolve3x3
    create(android.renderscript.RenderScript rs, android.renderscript.Element e)
    forEach(android.renderscript.Allocation aout)
    forEach(android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
    setCoefficients(float[] v)
    setInput(android.renderscript.Allocation ain)
  class ScriptIntrinsicConvolve5x5
    create(android.renderscript.RenderScript rs, android.renderscript.Element e)
    forEach(android.renderscript.Allocation aout)
    forEach(android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
    setCoefficients(float[] v)
    setInput(android.renderscript.Allocation ain)
  class ScriptIntrinsicLUT
    create(android.renderscript.RenderScript rs, android.renderscript.Element e)
    forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout)
    forEach(android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.Script.LaunchOptions opt)
    setAlpha(int index, int value)
    setBlue(int index, int value)
    setGreen(int index, int value)
    setRed(int index, int value)
  class ScriptIntrinsicYuvToRGB
    create(android.renderscript.RenderScript rs, android.renderscript.Element e)
    forEach(android.renderscript.Allocation aout)
    setInput(android.renderscript.Allocation ain)
  class Short2
    #ctor(short x, short y)
  class Short3
    #ctor(short x, short y, short z)

package dalvik.annotation
;---------------------------------------

package dalvik.bytecode
;---------------------------------------

package dalvik.system
;---------------------------------------
  class BaseDexClassLoader
    #ctor(java.lang.String dexPath, java.io.File optimizedDirectory, java.lang.String librarySearchPath, java.lang.ClassLoader parent)
    findClass(java.lang.String name)
    findLibrary(java.lang.String name)
    findResource(java.lang.String name)
    findResources(java.lang.String name)
    getPackage(java.lang.String name)
  class DelegateLastClassLoader
    #ctor(java.lang.String dexPath, java.lang.ClassLoader parent)
    #ctor(java.lang.String dexPath, java.lang.String librarySearchPath, java.lang.ClassLoader parent)
    getResource(java.lang.String name)
    getResources(java.lang.String name)
    loadClass(java.lang.String name, boolean resolve)
  class DexClassLoader
    #ctor(java.lang.String dexPath, java.lang.String optimizedDirectory, java.lang.String librarySearchPath, java.lang.ClassLoader parent)
  class DexFile
    #ctor(java.io.File file)
    #ctor(java.lang.String fileName)
    isDexOptNeeded(java.lang.String fileName)
    loadClass(java.lang.String name, java.lang.ClassLoader loader)
    loadDex(java.lang.String sourcePathName, java.lang.String outputPathName, int flags)
  class InMemoryDexClassLoader
    #ctor(java.nio.ByteBuffer dexBuffer, java.lang.ClassLoader parent)
    #ctor(java.nio.ByteBuffer[] dexBuffers, java.lang.ClassLoader parent)
  class PathClassLoader
    #ctor(java.lang.String dexPath, java.lang.ClassLoader parent)
    #ctor(java.lang.String dexPath, java.lang.String librarySearchPath, java.lang.ClassLoader parent)

package java.awt.font
;---------------------------------------
  class NumericShaper
    equals(java.lang.Object o)
    getContextualShaper(int ranges)
    getContextualShaper(int ranges, int defaultContext)
    getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range> ranges)
    getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range> ranges, java.awt.font.NumericShaper.Range defaultContext)
    getShaper(int singleRange)
    getShaper(java.awt.font.NumericShaper.Range singleRange)
    shape(char[] text, int start, int count)
    shape(char[] text, int start, int count, int context)
    shape(char[] text, int start, int count, java.awt.font.NumericShaper.Range context)
  class NumericShaper.Range
    valueOf(java.lang.String name)
  class TextAttribute
    #ctor(java.lang.String name)

package java.beans
;---------------------------------------
  class IndexedPropertyChangeEvent
    #ctor(java.lang.Object source, java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue, int index)
  class PropertyChangeEvent
    #ctor(java.lang.Object source, java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue)
    setPropagationId(java.lang.Object propagationId)
  interface PropertyChangeListener
    propertyChange(java.beans.PropertyChangeEvent evt)
  class PropertyChangeListenerProxy
    propertyChange(java.beans.PropertyChangeEvent event)
    #ctor(java.lang.String propertyName, java.beans.PropertyChangeListener listener)
  class PropertyChangeSupport
    addPropertyChangeListener(java.beans.PropertyChangeListener listener)
    addPropertyChangeListener(java.lang.String propertyName, java.beans.PropertyChangeListener listener)
    fireIndexedPropertyChange(java.lang.String propertyName, int index, boolean oldValue, boolean newValue)
    fireIndexedPropertyChange(java.lang.String propertyName, int index, int oldValue, int newValue)
    fireIndexedPropertyChange(java.lang.String propertyName, int index, java.lang.Object oldValue, java.lang.Object newValue)
    firePropertyChange(java.beans.PropertyChangeEvent event)
    firePropertyChange(java.lang.String propertyName, boolean oldValue, boolean newValue)
    firePropertyChange(java.lang.String propertyName, int oldValue, int newValue)
    firePropertyChange(java.lang.String propertyName, java.lang.Object oldValue, java.lang.Object newValue)
    getPropertyChangeListeners(java.lang.String propertyName)
    hasListeners(java.lang.String propertyName)
    #ctor(java.lang.Object sourceBean)
    removePropertyChangeListener(java.beans.PropertyChangeListener listener)
    removePropertyChangeListener(java.lang.String propertyName, java.beans.PropertyChangeListener listener)

package java.io
;---------------------------------------
  class BufferedInputStream
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, int size)
    mark(int readlimit)
    read(byte[] b, int off, int len)
    skip(long n)
  class BufferedOutputStream
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, int size)
    write(byte[] b, int off, int len)
    write(int b)
  class BufferedReader
    #ctor(java.io.Reader in)
    #ctor(java.io.Reader in, int sz)
    mark(int readAheadLimit)
    read(char[] cbuf, int off, int len)
    skip(long n)
  class BufferedWriter
    #ctor(java.io.Writer out)
    #ctor(java.io.Writer out, int sz)
    write(char[] cbuf, int off, int len)
    write(int c)
    write(java.lang.String s, int off, int len)
  class ByteArrayInputStream
    #ctor(byte[] buf)
    #ctor(byte[] buf, int offset, int length)
    mark(int readAheadLimit)
    read(byte[] b, int off, int len)
    skip(long n)
  class ByteArrayOutputStream
    #ctor(int size)
    toString(int hibyte)
    toString(java.lang.String charsetName)
    write(byte[] b, int off, int len)
    write(int b)
    writeTo(java.io.OutputStream out)
  class CharArrayReader
    #ctor(char[] buf)
    #ctor(char[] buf, int offset, int length)
    mark(int readAheadLimit)
    read(char[] b, int off, int len)
    skip(long n)
  class CharArrayWriter
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    #ctor(int initialSize)
    write(char[] c, int off, int len)
    write(int c)
    write(java.lang.String str, int off, int len)
    writeTo(java.io.Writer out)
  class CharConversionException
    #ctor(java.lang.String s)
  class Console
    format(java.lang.String fmt, java.lang.Object... args)
    printf(java.lang.String format, java.lang.Object... args)
    readLine(java.lang.String fmt, java.lang.Object... args)
    readPassword(java.lang.String fmt, java.lang.Object... args)
  interface DataInput
    readFully(byte[] b)
    readFully(byte[] b, int off, int len)
    skipBytes(int n)
  class DataInputStream
    #ctor(java.io.InputStream in)
    read(byte[] b)
    read(byte[] b, int off, int len)
    readFully(byte[] b)
    readFully(byte[] b, int off, int len)
    readUTF(java.io.DataInput in)
    skipBytes(int n)
  interface DataOutput
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
    writeBoolean(boolean v)
    writeByte(int v)
    writeBytes(java.lang.String s)
    writeChar(int v)
    writeChars(java.lang.String s)
    writeDouble(double v)
    writeFloat(float v)
    writeInt(int v)
    writeLong(long v)
    writeShort(int v)
    writeUTF(java.lang.String s)
  class DataOutputStream
    #ctor(java.io.OutputStream out)
    write(byte[] b, int off, int len)
    write(int b)
    writeBoolean(boolean v)
    writeByte(int v)
    writeBytes(java.lang.String s)
    writeChar(int v)
    writeChars(java.lang.String s)
    writeDouble(double v)
    writeFloat(float v)
    writeInt(int v)
    writeLong(long v)
    writeShort(int v)
    writeUTF(java.lang.String str)
  class EOFException
    #ctor(java.lang.String s)
  interface Externalizable
    readExternal(java.io.ObjectInput in)
    writeExternal(java.io.ObjectOutput out)
  class File
    compareTo(java.io.File pathname)
    createTempFile(java.lang.String prefix, java.lang.String suffix)
    createTempFile(java.lang.String prefix, java.lang.String suffix, java.io.File directory)
    equals(java.lang.Object obj)
    #ctor(java.io.File parent, java.lang.String child)
    #ctor(java.lang.String pathname)
    #ctor(java.lang.String parent, java.lang.String child)
    #ctor(java.net.URI uri)
    list(java.io.FilenameFilter filter)
    listFiles(java.io.FileFilter filter)
    listFiles(java.io.FilenameFilter filter)
    renameTo(java.io.File dest)
    setExecutable(boolean executable)
    setExecutable(boolean executable, boolean ownerOnly)
    setLastModified(long time)
    setReadable(boolean readable)
    setReadable(boolean readable, boolean ownerOnly)
    setWritable(boolean writable)
    setWritable(boolean writable, boolean ownerOnly)
  interface FileFilter
    accept(java.io.File pathname)
  class FileInputStream
    #ctor(java.io.File file)
    #ctor(java.io.FileDescriptor fdObj)
    #ctor(java.lang.String name)
    read(byte[] b)
    read(byte[] b, int off, int len)
    skip(long n)
  interface FilenameFilter
    accept(java.io.File dir, java.lang.String name)
  class FileNotFoundException
    #ctor(java.lang.String s)
  class FileOutputStream
    #ctor(java.io.File file)
    #ctor(java.io.File file, boolean append)
    #ctor(java.io.FileDescriptor fdObj)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, boolean append)
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
  class FilePermission
    #ctor(java.lang.String path, java.lang.String actions)
    implies(java.security.Permission p)
  class FileReader
    #ctor(java.io.File file)
    #ctor(java.io.FileDescriptor fd)
    #ctor(java.lang.String fileName)
  class FileWriter
    #ctor(java.io.File file)
    #ctor(java.io.File file, boolean append)
    #ctor(java.io.FileDescriptor fd)
    #ctor(java.lang.String fileName)
    #ctor(java.lang.String fileName, boolean append)
  class FilterInputStream
    #ctor(java.io.InputStream in)
    mark(int readlimit)
    read(byte[] b)
    read(byte[] b, int off, int len)
    skip(long n)
  class FilterOutputStream
    #ctor(java.io.OutputStream out)
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
  class FilterReader
    #ctor(java.io.Reader in)
    mark(int readAheadLimit)
    read(char[] cbuf, int off, int len)
    skip(long n)
  class FilterWriter
    #ctor(java.io.Writer out)
    write(char[] cbuf, int off, int len)
    write(int c)
    write(java.lang.String str, int off, int len)
  class InputStream
    mark(int readlimit)
    read(byte[] b)
    read(byte[] b, int off, int len)
    skip(long n)
  class InputStreamReader
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, java.lang.String charsetName)
    #ctor(java.io.InputStream in, java.nio.charset.Charset cs)
    #ctor(java.io.InputStream in, java.nio.charset.CharsetDecoder dec)
    read(char[] cbuf, int offset, int length)
  class InterruptedIOException
    #ctor(java.lang.String s)
  class InvalidClassException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String cname, java.lang.String reason)
  class InvalidObjectException
    #ctor(java.lang.String reason)
  class IOError
    #ctor(java.lang.Throwable cause)
  class IOException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class LineNumberInputStream
    #ctor(java.io.InputStream in)
    mark(int readlimit)
    read(byte[] b, int off, int len)
    setLineNumber(int lineNumber)
    skip(long n)
  class LineNumberReader
    #ctor(java.io.Reader in)
    #ctor(java.io.Reader in, int sz)
    mark(int readAheadLimit)
    read(char[] cbuf, int off, int len)
    setLineNumber(int lineNumber)
    skip(long n)
  class NotActiveException
    #ctor(java.lang.String reason)
  class NotSerializableException
    #ctor(java.lang.String classname)
  interface ObjectInput
    read(byte[] b)
    read(byte[] b, int off, int len)
    skip(long n)
  class ObjectInputStream
    enableResolveObject(boolean enable)
    #ctor(java.io.InputStream in)
    read(byte[] buf, int off, int len)
    readFully(byte[] buf)
    readFully(byte[] buf, int off, int len)
    registerValidation(java.io.ObjectInputValidation obj, int prio)
    resolveClass(java.io.ObjectStreamClass desc)
    resolveObject(java.lang.Object obj)
    resolveProxyClass(java.lang.String[] interfaces)
    skipBytes(int len)
  class ObjectInputStream.GetField
    defaulted(java.lang.String name)
    get(java.lang.String name, boolean val)
    get(java.lang.String name, byte val)
    get(java.lang.String name, char val)
    get(java.lang.String name, double val)
    get(java.lang.String name, float val)
    get(java.lang.String name, int val)
    get(java.lang.String name, java.lang.Object val)
    get(java.lang.String name, long val)
    get(java.lang.String name, short val)
  interface ObjectOutput
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
    writeObject(java.lang.Object obj)
  class ObjectOutputStream
    annotateClass(java.lang.Class<?> cl)
    annotateProxyClass(java.lang.Class<?> cl)
    enableReplaceObject(boolean enable)
    #ctor(java.io.OutputStream out)
    replaceObject(java.lang.Object obj)
    useProtocolVersion(int version)
    write(byte[] buf)
    write(byte[] buf, int off, int len)
    write(int val)
    writeBoolean(boolean val)
    writeByte(int val)
    writeBytes(java.lang.String str)
    writeChar(int val)
    writeChars(java.lang.String str)
    writeClassDescriptor(java.io.ObjectStreamClass desc)
    writeDouble(double val)
    writeFloat(float val)
    writeInt(int val)
    writeLong(long val)
    writeObject(java.lang.Object obj)
    writeObjectOverride(java.lang.Object obj)
    writeShort(int val)
    writeUnshared(java.lang.Object obj)
    writeUTF(java.lang.String str)
  class ObjectOutputStream.PutField
    put(java.lang.String name, boolean val)
    put(java.lang.String name, byte val)
    put(java.lang.String name, char val)
    put(java.lang.String name, double val)
    put(java.lang.String name, float val)
    put(java.lang.String name, int val)
    put(java.lang.String name, java.lang.Object val)
    put(java.lang.String name, long val)
    put(java.lang.String name, short val)
    write(java.io.ObjectOutput out)
  class ObjectStreamClass
    getField(java.lang.String name)
    lookup(java.lang.Class<?> cl)
    lookupAny(java.lang.Class<?> cl)
  class ObjectStreamException
    #ctor(java.lang.String classname)
  class ObjectStreamField
    compareTo(java.lang.Object obj)
    #ctor(java.lang.String name, java.lang.Class<?> type)
    #ctor(java.lang.String name, java.lang.Class<?> type, boolean unshared)
    setOffset(int offset)
  class OutputStream
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
  class OutputStreamWriter
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, java.lang.String charsetName)
    #ctor(java.io.OutputStream out, java.nio.charset.Charset cs)
    #ctor(java.io.OutputStream out, java.nio.charset.CharsetEncoder enc)
    write(char[] cbuf, int off, int len)
    write(int c)
    write(java.lang.String str, int off, int len)
  class PipedInputStream
    connect(java.io.PipedOutputStream src)
    #ctor(int pipeSize)
    #ctor(java.io.PipedOutputStream src)
    #ctor(java.io.PipedOutputStream src, int pipeSize)
    read(byte[] b, int off, int len)
    receive(int b)
  class PipedOutputStream
    connect(java.io.PipedInputStream snk)
    #ctor(java.io.PipedInputStream snk)
    write(byte[] b, int off, int len)
    write(int b)
  class PipedReader
    connect(java.io.PipedWriter src)
    #ctor(int pipeSize)
    #ctor(java.io.PipedWriter src)
    #ctor(java.io.PipedWriter src, int pipeSize)
    read(char[] cbuf, int off, int len)
  class PipedWriter
    connect(java.io.PipedReader snk)
    #ctor(java.io.PipedReader snk)
    write(char[] cbuf, int off, int len)
    write(int c)
  class PrintStream
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    format(java.lang.String format, java.lang.Object... args)
    format(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    print(boolean b)
    print(char c)
    print(char[] s)
    print(double d)
    print(float f)
    print(int i)
    print(java.lang.Object obj)
    print(java.lang.String s)
    print(long l)
    printf(java.lang.String format, java.lang.Object... args)
    printf(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    println(boolean x)
    println(char x)
    println(char[] x)
    println(double x)
    println(float x)
    println(int x)
    println(java.lang.Object x)
    println(java.lang.String x)
    println(long x)
    #ctor(java.io.File file)
    #ctor(java.io.File file, java.lang.String csn)
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, boolean autoFlush)
    #ctor(java.io.OutputStream out, boolean autoFlush, java.lang.String encoding)
    #ctor(java.lang.String fileName)
    #ctor(java.lang.String fileName, java.lang.String csn)
    write(byte[] buf, int off, int len)
    write(int b)
  class PrintWriter
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    format(java.lang.String format, java.lang.Object... args)
    format(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    print(boolean b)
    print(char c)
    print(char[] s)
    print(double d)
    print(float f)
    print(int i)
    print(java.lang.Object obj)
    print(java.lang.String s)
    print(long l)
    printf(java.lang.String format, java.lang.Object... args)
    printf(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    println(boolean x)
    println(char x)
    println(char[] x)
    println(double x)
    println(float x)
    println(int x)
    println(java.lang.Object x)
    println(java.lang.String x)
    println(long x)
    #ctor(java.io.File file)
    #ctor(java.io.File file, java.lang.String csn)
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, boolean autoFlush)
    #ctor(java.io.Writer out)
    #ctor(java.io.Writer out, boolean autoFlush)
    #ctor(java.lang.String fileName)
    #ctor(java.lang.String fileName, java.lang.String csn)
    write(char[] buf)
    write(char[] buf, int off, int len)
    write(int c)
    write(java.lang.String s)
    write(java.lang.String s, int off, int len)
  class PushbackInputStream
    mark(int readlimit)
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, int size)
    read(byte[] b, int off, int len)
    skip(long n)
    unread(byte[] b)
    unread(byte[] b, int off, int len)
    unread(int b)
  class PushbackReader
    mark(int readAheadLimit)
    #ctor(java.io.Reader in)
    #ctor(java.io.Reader in, int size)
    read(char[] cbuf, int off, int len)
    skip(long n)
    unread(char[] cbuf)
    unread(char[] cbuf, int off, int len)
    unread(int c)
  class RandomAccessFile
    #ctor(java.io.File file, java.lang.String mode)
    #ctor(java.lang.String name, java.lang.String mode)
    read(byte[] b)
    read(byte[] b, int off, int len)
    readFully(byte[] b)
    readFully(byte[] b, int off, int len)
    seek(long pos)
    setLength(long newLength)
    skipBytes(int n)
    write(byte[] b)
    write(byte[] b, int off, int len)
    write(int b)
    writeBoolean(boolean v)
    writeByte(int v)
    writeBytes(java.lang.String s)
    writeChar(int v)
    writeChars(java.lang.String s)
    writeDouble(double v)
    writeFloat(float v)
    writeInt(int v)
    writeLong(long v)
    writeShort(int v)
    writeUTF(java.lang.String str)
  class Reader
    mark(int readAheadLimit)
    read(char[] cbuf)
    read(char[] cbuf, int off, int len)
    read(java.nio.CharBuffer target)
    #ctor(java.lang.Object lock)
    skip(long n)
  class SequenceInputStream
    read(byte[] b, int off, int len)
    #ctor(java.io.InputStream s1, java.io.InputStream s2)
    #ctor(java.util.Enumeration<? extends java.io.InputStream> e)
  class SerializablePermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class StreamCorruptedException
    #ctor(java.lang.String reason)
  class StreamTokenizer
    commentChar(int ch)
    eolIsSignificant(boolean flag)
    lowerCaseMode(boolean fl)
    ordinaryChar(int ch)
    ordinaryChars(int low, int hi)
    quoteChar(int ch)
    slashSlashComments(boolean flag)
    slashStarComments(boolean flag)
    #ctor(java.io.InputStream is)
    #ctor(java.io.Reader r)
    whitespaceChars(int low, int hi)
    wordChars(int low, int hi)
  class StringBufferInputStream
    read(byte[] b, int off, int len)
    skip(long n)
    #ctor(java.lang.String s)
  class StringReader
    mark(int readAheadLimit)
    read(char[] cbuf, int off, int len)
    skip(long ns)
    #ctor(java.lang.String s)
  class StringWriter
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    #ctor(int initialSize)
    write(char[] cbuf, int off, int len)
    write(int c)
    write(java.lang.String str)
    write(java.lang.String str, int off, int len)
  class SyncFailedException
    #ctor(java.lang.String desc)
  class UncheckedIOException
    #ctor(java.io.IOException cause)
    #ctor(java.lang.String message, java.io.IOException cause)
  class UnsupportedEncodingException
    #ctor(java.lang.String s)
  class UTFDataFormatException
    #ctor(java.lang.String s)
  class WriteAbortedException
    #ctor(java.lang.String s, java.lang.Exception ex)
  class Writer
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    write(char[] cbuf)
    write(char[] cbuf, int off, int len)
    write(int c)
    write(java.lang.String str)
    write(java.lang.String str, int off, int len)
    #ctor(java.lang.Object lock)

package java.lang
;---------------------------------------
  class AbstractMethodError
    #ctor(java.lang.String s)
  class AbstractStringBuilder
    append(char c)
    append(java.lang.CharSequence s)
    append(java.lang.CharSequence s, int start, int end)
    charAt(int index)
    codePointAt(int index)
    codePointBefore(int index)
    codePointCount(int beginIndex, int endIndex)
    ensureCapacity(int minimumCapacity)
    getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
    indexOf(java.lang.String str)
    indexOf(java.lang.String str, int fromIndex)
    lastIndexOf(java.lang.String str)
    lastIndexOf(java.lang.String str, int fromIndex)
    offsetByCodePoints(int index, int codePointOffset)
    setCharAt(int index, char ch)
    setLength(int newLength)
    subSequence(int start, int end)
    substring(int start)
    substring(int start, int end)
  interface Appendable
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
  class ArithmeticException
    #ctor(java.lang.String s)
  class ArrayIndexOutOfBoundsException
    #ctor(int index)
    #ctor(java.lang.String s)
  class ArrayStoreException
    #ctor(java.lang.String s)
  class AssertionError
    #ctor(boolean detailMessage)
    #ctor(char detailMessage)
    #ctor(double detailMessage)
    #ctor(float detailMessage)
    #ctor(int detailMessage)
    #ctor(java.lang.Object detailMessage)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(long detailMessage)
  class Boolean
    #ctor(boolean value)
    #ctor(java.lang.String s)
    compare(boolean x, boolean y)
    compareTo(java.lang.Boolean b)
    equals(java.lang.Object obj)
    getBoolean(java.lang.String name)
    hashCode(boolean value)
    logicalAnd(boolean a, boolean b)
    logicalOr(boolean a, boolean b)
    logicalXor(boolean a, boolean b)
    parseBoolean(java.lang.String s)
    toString(boolean b)
    valueOf(boolean b)
    valueOf(java.lang.String s)
  class BootstrapMethodError
    #ctor(java.lang.String s)
    #ctor(java.lang.String s, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class Byte
    #ctor(byte value)
    #ctor(java.lang.String s)
    compare(byte x, byte y)
    compareTo(java.lang.Byte anotherByte)
    decode(java.lang.String nm)
    equals(java.lang.Object obj)
    hashCode(byte value)
    parseByte(java.lang.String s)
    parseByte(java.lang.String s, int radix)
    toString(byte b)
    toUnsignedInt(byte x)
    toUnsignedLong(byte x)
    valueOf(byte b)
    valueOf(java.lang.String s)
    valueOf(java.lang.String s, int radix)
  class Character
    #ctor(char value)
    charCount(int codePoint)
    codePointAt(char[] a, int index)
    codePointAt(char[] a, int index, int limit)
    codePointAt(java.lang.CharSequence seq, int index)
    codePointBefore(char[] a, int index)
    codePointBefore(char[] a, int index, int start)
    codePointBefore(java.lang.CharSequence seq, int index)
    codePointCount(char[] a, int offset, int count)
    codePointCount(java.lang.CharSequence seq, int beginIndex, int endIndex)
    compare(char x, char y)
    compareTo(java.lang.Character anotherCharacter)
    digit(char ch, int radix)
    digit(int codePoint, int radix)
    equals(java.lang.Object obj)
    forDigit(int digit, int radix)
    getDirectionality(char ch)
    getDirectionality(int codePoint)
    getName(int codePoint)
    getNumericValue(char ch)
    getNumericValue(int codePoint)
    getType(char ch)
    getType(int codePoint)
    hashCode(char value)
    highSurrogate(int codePoint)
    isAlphabetic(int codePoint)
    isBmpCodePoint(int codePoint)
    isDefined(char ch)
    isDefined(int codePoint)
    isDigit(char ch)
    isDigit(int codePoint)
    isHighSurrogate(char ch)
    isIdentifierIgnorable(char ch)
    isIdentifierIgnorable(int codePoint)
    isIdeographic(int codePoint)
    isISOControl(char ch)
    isISOControl(int codePoint)
    isJavaIdentifierPart(char ch)
    isJavaIdentifierPart(int codePoint)
    isJavaIdentifierStart(char ch)
    isJavaIdentifierStart(int codePoint)
    isJavaLetter(char ch)
    isJavaLetterOrDigit(char ch)
    isLetter(char ch)
    isLetter(int codePoint)
    isLetterOrDigit(char ch)
    isLetterOrDigit(int codePoint)
    isLowerCase(char ch)
    isLowerCase(int codePoint)
    isLowSurrogate(char ch)
    isMirrored(char ch)
    isMirrored(int codePoint)
    isSpace(char ch)
    isSpaceChar(char ch)
    isSpaceChar(int codePoint)
    isSupplementaryCodePoint(int codePoint)
    isSurrogate(char ch)
    isSurrogatePair(char high, char low)
    isTitleCase(char ch)
    isTitleCase(int codePoint)
    isUnicodeIdentifierPart(char ch)
    isUnicodeIdentifierPart(int codePoint)
    isUnicodeIdentifierStart(char ch)
    isUnicodeIdentifierStart(int codePoint)
    isUpperCase(char ch)
    isUpperCase(int codePoint)
    isValidCodePoint(int codePoint)
    isWhitespace(char ch)
    isWhitespace(int codePoint)
    lowSurrogate(int codePoint)
    offsetByCodePoints(char[] a, int start, int count, int index, int codePointOffset)
    offsetByCodePoints(java.lang.CharSequence seq, int index, int codePointOffset)
    reverseBytes(char ch)
    toChars(int codePoint)
    toChars(int codePoint, char[] dst, int dstIndex)
    toCodePoint(char high, char low)
    toLowerCase(char ch)
    toLowerCase(int codePoint)
    toString(char c)
    toTitleCase(char ch)
    toTitleCase(int codePoint)
    toUpperCase(char ch)
    toUpperCase(int codePoint)
    valueOf(char c)
  class Character.Subset
    #ctor(java.lang.String name)
    equals(java.lang.Object obj)
  class Character.UnicodeBlock
    forName(java.lang.String blockName)
    of(char c)
    of(int codePoint)
  class Character.UnicodeScript
    forName(java.lang.String scriptName)
    of(int codePoint)
    valueOf(java.lang.String name)
  interface CharSequence
    charAt(int index)
    subSequence(int start, int end)
  class Class<T>
    <U> asSubclass(java.lang.Class<U> clazz)
    cast(java.lang.Object obj)
    forName(java.lang.String className)
    forName(java.lang.String name, boolean initialize, java.lang.ClassLoader loader)
    <A> getAnnotation(java.lang.Class<A> annotationClass)
    <A> getAnnotationsByType(java.lang.Class<A> annotationClass)
    getConstructor(java.lang.Class<?>... parameterTypes)
    <A> getDeclaredAnnotation(java.lang.Class<A> annotationClass)
    getDeclaredConstructor(java.lang.Class<?>... parameterTypes)
    getDeclaredField(java.lang.String name)
    getDeclaredMethod(java.lang.String name, java.lang.Class<?>... parameterTypes)
    getField(java.lang.String name)
    getMethod(java.lang.String name, java.lang.Class<?>... parameterTypes)
    getResource(java.lang.String name)
    getResourceAsStream(java.lang.String name)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
    isAssignableFrom(java.lang.Class<?> cls)
    isInstance(java.lang.Object obj)
  class ClassCastException
    #ctor(java.lang.String s)
  class ClassCircularityError
    #ctor(java.lang.String s)
  class ClassFormatError
    #ctor(java.lang.String s)
  class ClassLoader
    #ctor(java.lang.ClassLoader parent)
    defineClass(byte[] b, int off, int len)
    defineClass(java.lang.String name, byte[] b, int off, int len)
    defineClass(java.lang.String name, byte[] b, int off, int len, java.security.ProtectionDomain protectionDomain)
    defineClass(java.lang.String name, java.nio.ByteBuffer b, java.security.ProtectionDomain protectionDomain)
    definePackage(java.lang.String name, java.lang.String specTitle, java.lang.String specVersion, java.lang.String specVendor, java.lang.String implTitle, java.lang.String implVersion, java.lang.String implVendor, java.net.URL sealBase)
    findClass(java.lang.String name)
    findLibrary(java.lang.String libname)
    findLoadedClass(java.lang.String name)
    findResource(java.lang.String name)
    findResources(java.lang.String name)
    findSystemClass(java.lang.String name)
    getPackage(java.lang.String name)
    getResource(java.lang.String name)
    getResourceAsStream(java.lang.String name)
    getResources(java.lang.String name)
    getSystemResource(java.lang.String name)
    getSystemResourceAsStream(java.lang.String name)
    getSystemResources(java.lang.String name)
    loadClass(java.lang.String name)
    loadClass(java.lang.String name, boolean resolve)
    resolveClass(java.lang.Class<?> c)
    setClassAssertionStatus(java.lang.String className, boolean enabled)
    setDefaultAssertionStatus(boolean enabled)
    setPackageAssertionStatus(java.lang.String packageName, boolean enabled)
    setSigners(java.lang.Class<?> c, java.lang.Object[] signers)
  class ClassNotFoundException
    #ctor(java.lang.String s)
    #ctor(java.lang.String s, java.lang.Throwable ex)
  class CloneNotSupportedException
    #ctor(java.lang.String s)
  interface Comparable<T>
    compareTo(T o)
  class Compiler
    command(java.lang.Object cmd)
    compileClass(java.lang.Class<?> classToCompile)
    compileClasses(java.lang.String nameRoot)
  class Double
    compare(double d1, double d2)
    compareTo(java.lang.Double anotherDouble)
    #ctor(double value)
    #ctor(java.lang.String s)
    doubleToLongBits(double value)
    doubleToRawLongBits(double value)
    equals(java.lang.Object obj)
    hashCode(double value)
    isFinite(double d)
    isInfinite(double v)
    isNaN(double v)
    longBitsToDouble(long bits)
    max(double a, double b)
    min(double a, double b)
    parseDouble(java.lang.String s)
    sum(double a, double b)
    toHexString(double d)
    toString(double d)
    valueOf(double d)
    valueOf(java.lang.String s)
  class Enum<E>
    compareTo(E o)
    #ctor(java.lang.String name, int ordinal)
    equals(java.lang.Object other)
    <T> valueOf(java.lang.Class<T> enumType, java.lang.String name)
  class EnumConstantNotPresentException
    #ctor(java.lang.Class<? extends java.lang.Enum> enumType, java.lang.String constantName)
  class Error
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.String message, java.lang.Throwable cause, boolean enableSuppression, boolean writableStackTrace)
    #ctor(java.lang.Throwable cause)
  class Exception
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.String message, java.lang.Throwable cause, boolean enableSuppression, boolean writableStackTrace)
    #ctor(java.lang.Throwable cause)
  class ExceptionInInitializerError
    #ctor(java.lang.String s)
    #ctor(java.lang.Throwable thrown)
  class Float
    compare(float f1, float f2)
    compareTo(java.lang.Float anotherFloat)
    equals(java.lang.Object obj)
    #ctor(double value)
    #ctor(float value)
    #ctor(java.lang.String s)
    floatToIntBits(float value)
    floatToRawIntBits(float value)
    hashCode(float value)
    intBitsToFloat(int bits)
    isFinite(float f)
    isInfinite(float v)
    isNaN(float v)
    max(float a, float b)
    min(float a, float b)
    parseFloat(java.lang.String s)
    sum(float a, float b)
    toHexString(float f)
    toString(float f)
    valueOf(float f)
    valueOf(java.lang.String s)
  class IllegalAccessError
    #ctor(java.lang.String s)
  class IllegalAccessException
    #ctor(java.lang.String s)
  class IllegalArgumentException
    #ctor(java.lang.String s)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class IllegalMonitorStateException
    #ctor(java.lang.String s)
  class IllegalStateException
    #ctor(java.lang.String s)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class IllegalThreadStateException
    #ctor(java.lang.String s)
  class IncompatibleClassChangeError
    #ctor(java.lang.String s)
  class IndexOutOfBoundsException
    #ctor(java.lang.String s)
  class InheritableThreadLocal<T>
    childValue(T parentValue)
  class InstantiationError
    #ctor(java.lang.String s)
  class InstantiationException
    #ctor(java.lang.String s)
  class Integer
    bitCount(int i)
    compare(int x, int y)
    compareTo(java.lang.Integer anotherInteger)
    compareUnsigned(int x, int y)
    decode(java.lang.String nm)
    divideUnsigned(int dividend, int divisor)
    equals(java.lang.Object obj)
    getInteger(java.lang.String nm)
    getInteger(java.lang.String nm, int val)
    getInteger(java.lang.String nm, java.lang.Integer val)
    hashCode(int value)
    highestOneBit(int i)
    #ctor(int value)
    #ctor(java.lang.String s)
    lowestOneBit(int i)
    max(int a, int b)
    min(int a, int b)
    numberOfLeadingZeros(int i)
    numberOfTrailingZeros(int i)
    parseInt(java.lang.String s)
    parseInt(java.lang.String s, int radix)
    parseUnsignedInt(java.lang.String s)
    parseUnsignedInt(java.lang.String s, int radix)
    remainderUnsigned(int dividend, int divisor)
    reverse(int i)
    reverseBytes(int i)
    rotateLeft(int i, int distance)
    rotateRight(int i, int distance)
    signum(int i)
    sum(int a, int b)
    toBinaryString(int i)
    toHexString(int i)
    toOctalString(int i)
    toString(int i)
    toString(int i, int radix)
    toUnsignedLong(int x)
    toUnsignedString(int i)
    toUnsignedString(int i, int radix)
    valueOf(int i)
    valueOf(java.lang.String s)
    valueOf(java.lang.String s, int radix)
  class InternalError
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class InterruptedException
    #ctor(java.lang.String s)
  interface Iterable<T>
    forEach(java.util.function.Consumer<? super T> action)
  class LinkageError
    #ctor(java.lang.String s)
    #ctor(java.lang.String s, java.lang.Throwable cause)
  class Long
    bitCount(long i)
    compare(long x, long y)
    compareTo(java.lang.Long anotherLong)
    compareUnsigned(long x, long y)
    decode(java.lang.String nm)
    divideUnsigned(long dividend, long divisor)
    equals(java.lang.Object obj)
    getLong(java.lang.String nm)
    getLong(java.lang.String nm, java.lang.Long val)
    getLong(java.lang.String nm, long val)
    hashCode(long value)
    highestOneBit(long i)
    #ctor(java.lang.String s)
    #ctor(long value)
    lowestOneBit(long i)
    max(long a, long b)
    min(long a, long b)
    numberOfLeadingZeros(long i)
    numberOfTrailingZeros(long i)
    parseLong(java.lang.String s)
    parseLong(java.lang.String s, int radix)
    parseUnsignedLong(java.lang.String s)
    parseUnsignedLong(java.lang.String s, int radix)
    remainderUnsigned(long dividend, long divisor)
    reverse(long i)
    reverseBytes(long i)
    rotateLeft(long i, int distance)
    rotateRight(long i, int distance)
    signum(long i)
    sum(long a, long b)
    toBinaryString(long i)
    toHexString(long i)
    toOctalString(long i)
    toString(long i)
    toString(long i, int radix)
    toUnsignedString(long i)
    toUnsignedString(long i, int radix)
    valueOf(java.lang.String s)
    valueOf(java.lang.String s, int radix)
    valueOf(long l)
  class Math
    abs(double a)
    abs(float a)
    abs(int a)
    abs(long a)
    acos(double a)
    addExact(int x, int y)
    addExact(long x, long y)
    asin(double a)
    atan(double a)
    atan2(double y, double x)
    cbrt(double a)
    ceil(double a)
    copySign(double magnitude, double sign)
    copySign(float magnitude, float sign)
    cos(double a)
    cosh(double x)
    decrementExact(int a)
    decrementExact(long a)
    exp(double a)
    expm1(double x)
    floor(double a)
    floorDiv(int x, int y)
    floorDiv(long x, long y)
    floorMod(int x, int y)
    floorMod(long x, long y)
    getExponent(double d)
    getExponent(float f)
    hypot(double x, double y)
    IEEEremainder(double f1, double f2)
    incrementExact(int a)
    incrementExact(long a)
    log(double a)
    log10(double a)
    log1p(double x)
    max(double a, double b)
    max(float a, float b)
    max(int a, int b)
    max(long a, long b)
    min(double a, double b)
    min(float a, float b)
    min(int a, int b)
    min(long a, long b)
    multiplyExact(int x, int y)
    multiplyExact(long x, long y)
    negateExact(int a)
    negateExact(long a)
    nextAfter(double start, double direction)
    nextAfter(float start, double direction)
    nextDown(double d)
    nextDown(float f)
    nextUp(double d)
    nextUp(float f)
    pow(double a, double b)
    rint(double a)
    round(double a)
    round(float a)
    scalb(double d, int scaleFactor)
    scalb(float f, int scaleFactor)
    signum(double d)
    signum(float f)
    sin(double a)
    sinh(double x)
    sqrt(double a)
    subtractExact(int x, int y)
    subtractExact(long x, long y)
    tan(double a)
    tanh(double x)
    toDegrees(double angrad)
    toIntExact(long value)
    toRadians(double angdeg)
    ulp(double d)
    ulp(float f)
  class NegativeArraySizeException
    #ctor(java.lang.String s)
  class NoClassDefFoundError
    #ctor(java.lang.String s)
  class NoSuchFieldError
    #ctor(java.lang.String s)
  class NoSuchFieldException
    #ctor(java.lang.String s)
  class NoSuchMethodError
    #ctor(java.lang.String s)
  class NoSuchMethodException
    #ctor(java.lang.String s)
  class NullPointerException
    #ctor(java.lang.String s)
  class NumberFormatException
    #ctor(java.lang.String s)
  class Object
    equals(java.lang.Object obj)
    wait(long millis)
    wait(long millis, int nanos)
  class OutOfMemoryError
    #ctor(java.lang.String s)
  class Package
    <A> getAnnotation(java.lang.Class<A> annotationClass)
    <A> getAnnotationsByType(java.lang.Class<A> annotationClass)
    <A> getDeclaredAnnotation(java.lang.Class<A> annotationClass)
    <A> getDeclaredAnnotationsByType(java.lang.Class<A> annotationClass)
    getPackage(java.lang.String name)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
    isCompatibleWith(java.lang.String desired)
    isSealed(java.net.URL url)
  class Process
    waitFor(long timeout, java.util.concurrent.TimeUnit unit)
  class ProcessBuilder
    command(java.lang.String... command)
    command(java.util.List<java.lang.String> command)
    directory(java.io.File directory)
    #ctor(java.lang.String... command)
    #ctor(java.util.List<java.lang.String> command)
    redirectError(java.io.File file)
    redirectError(java.lang.ProcessBuilder.Redirect destination)
    redirectErrorStream(boolean redirectErrorStream)
    redirectInput(java.io.File file)
    redirectInput(java.lang.ProcessBuilder.Redirect source)
    redirectOutput(java.io.File file)
    redirectOutput(java.lang.ProcessBuilder.Redirect destination)
  class ProcessBuilder.Redirect
    appendTo(java.io.File file)
    equals(java.lang.Object obj)
    from(java.io.File file)
    to(java.io.File file)
  class ProcessBuilder.Redirect.Type
    valueOf(java.lang.String name)
  interface Readable
    read(java.nio.CharBuffer cb)
  class ReflectiveOperationException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class Runtime
    addShutdownHook(java.lang.Thread hook)
    exec(java.lang.String command)
    exec(java.lang.String command, java.lang.String[] envp)
    exec(java.lang.String command, java.lang.String[] envp, java.io.File dir)
    exec(java.lang.String[] cmdarray)
    exec(java.lang.String[] cmdarray, java.lang.String[] envp)
    exec(java.lang.String[] cmdarray, java.lang.String[] envp, java.io.File dir)
    exit(int status)
    getLocalizedInputStream(java.io.InputStream in)
    getLocalizedOutputStream(java.io.OutputStream out)
    halt(int status)
    load(java.lang.String filename)
    loadLibrary(java.lang.String libname)
    removeShutdownHook(java.lang.Thread hook)
    runFinalizersOnExit(boolean value)
    traceInstructions(boolean on)
    traceMethodCalls(boolean on)
  class RuntimeException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.String message, java.lang.Throwable cause, boolean enableSuppression, boolean writableStackTrace)
    #ctor(java.lang.Throwable cause)
  class RuntimePermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class SecurityException
    #ctor(java.lang.String s)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SecurityManager
    checkAccept(java.lang.String host, int port)
    checkAccess(java.lang.Thread t)
    checkAccess(java.lang.ThreadGroup g)
    checkConnect(java.lang.String host, int port)
    checkConnect(java.lang.String host, int port, java.lang.Object context)
    checkDelete(java.lang.String file)
    checkExec(java.lang.String cmd)
    checkExit(int status)
    checkLink(java.lang.String lib)
    checkListen(int port)
    checkMemberAccess(java.lang.Class<?> clazz, int which)
    checkMulticast(java.net.InetAddress maddr)
    checkMulticast(java.net.InetAddress maddr, byte ttl)
    checkPackageAccess(java.lang.String pkg)
    checkPackageDefinition(java.lang.String pkg)
    checkPermission(java.security.Permission perm)
    checkPermission(java.security.Permission perm, java.lang.Object context)
    checkPropertyAccess(java.lang.String key)
    checkRead(java.io.FileDescriptor fd)
    checkRead(java.lang.String file)
    checkRead(java.lang.String file, java.lang.Object context)
    checkSecurityAccess(java.lang.String target)
    checkTopLevelWindow(java.lang.Object window)
    checkWrite(java.io.FileDescriptor fd)
    checkWrite(java.lang.String file)
    classDepth(java.lang.String name)
    inClass(java.lang.String name)
  class Short
    compare(short x, short y)
    compareTo(java.lang.Short anotherShort)
    decode(java.lang.String nm)
    equals(java.lang.Object obj)
    hashCode(short value)
    parseShort(java.lang.String s)
    parseShort(java.lang.String s, int radix)
    reverseBytes(short i)
    #ctor(java.lang.String s)
    #ctor(short value)
    toString(short s)
    toUnsignedInt(short x)
    toUnsignedLong(short x)
    valueOf(java.lang.String s)
    valueOf(java.lang.String s, int radix)
    valueOf(short s)
  class StackOverflowError
    #ctor(java.lang.String s)
  class StackTraceElement
    equals(java.lang.Object obj)
    #ctor(java.lang.String declaringClass, java.lang.String methodName, java.lang.String fileName, int lineNumber)
  class StrictMath
    abs(double a)
    abs(float a)
    abs(int a)
    abs(long a)
    acos(double a)
    addExact(int x, int y)
    addExact(long x, long y)
    asin(double a)
    atan(double a)
    atan2(double y, double x)
    cbrt(double a)
    ceil(double a)
    copySign(double magnitude, double sign)
    copySign(float magnitude, float sign)
    cos(double a)
    cosh(double x)
    exp(double a)
    expm1(double x)
    floor(double a)
    floorDiv(int x, int y)
    floorDiv(long x, long y)
    floorMod(int x, int y)
    floorMod(long x, long y)
    getExponent(double d)
    getExponent(float f)
    hypot(double x, double y)
    IEEEremainder(double f1, double f2)
    log(double a)
    log10(double a)
    log1p(double x)
    max(double a, double b)
    max(float a, float b)
    max(int a, int b)
    max(long a, long b)
    min(double a, double b)
    min(float a, float b)
    min(int a, int b)
    min(long a, long b)
    multiplyExact(int x, int y)
    multiplyExact(long x, long y)
    nextAfter(double start, double direction)
    nextAfter(float start, double direction)
    nextDown(double d)
    nextDown(float f)
    nextUp(double d)
    nextUp(float f)
    pow(double a, double b)
    rint(double a)
    round(double a)
    round(float a)
    scalb(double d, int scaleFactor)
    scalb(float f, int scaleFactor)
    signum(double d)
    signum(float f)
    sin(double a)
    sinh(double x)
    sqrt(double a)
    subtractExact(int x, int y)
    subtractExact(long x, long y)
    tan(double a)
    tanh(double x)
    toDegrees(double angrad)
    toIntExact(long value)
    toRadians(double angdeg)
    ulp(double d)
    ulp(float f)
  class String
    charAt(int index)
    codePointAt(int index)
    codePointBefore(int index)
    codePointCount(int beginIndex, int endIndex)
    compareTo(java.lang.String anotherString)
    compareToIgnoreCase(java.lang.String str)
    concat(java.lang.String str)
    contains(java.lang.CharSequence s)
    contentEquals(java.lang.CharSequence cs)
    contentEquals(java.lang.StringBuffer sb)
    copyValueOf(char[] data)
    copyValueOf(char[] data, int offset, int count)
    endsWith(java.lang.String suffix)
    equals(java.lang.Object anObject)
    equalsIgnoreCase(java.lang.String anotherString)
    format(java.lang.String format, java.lang.Object... args)
    format(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)
    getBytes(java.lang.String charsetName)
    getBytes(java.nio.charset.Charset charset)
    getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
    indexOf(int ch)
    indexOf(int ch, int fromIndex)
    indexOf(java.lang.String str)
    indexOf(java.lang.String str, int fromIndex)
    join(java.lang.CharSequence delimiter, java.lang.CharSequence... elements)
    join(java.lang.CharSequence delimiter, java.lang.Iterable<? extends java.lang.CharSequence> elements)
    lastIndexOf(int ch)
    lastIndexOf(int ch, int fromIndex)
    lastIndexOf(java.lang.String str)
    lastIndexOf(java.lang.String str, int fromIndex)
    matches(java.lang.String regex)
    offsetByCodePoints(int index, int codePointOffset)
    regionMatches(boolean ignoreCase, int toffset, java.lang.String other, int ooffset, int len)
    regionMatches(int toffset, java.lang.String other, int ooffset, int len)
    replace(char oldChar, char newChar)
    replace(java.lang.CharSequence target, java.lang.CharSequence replacement)
    replaceAll(java.lang.String regex, java.lang.String replacement)
    replaceFirst(java.lang.String regex, java.lang.String replacement)
    split(java.lang.String regex)
    split(java.lang.String regex, int limit)
    startsWith(java.lang.String prefix)
    startsWith(java.lang.String prefix, int toffset)
    #ctor(byte[] bytes)
    #ctor(byte[] ascii, int hibyte)
    #ctor(byte[] bytes, int offset, int length)
    #ctor(byte[] ascii, int hibyte, int offset, int count)
    #ctor(byte[] bytes, int offset, int length, java.lang.String charsetName)
    #ctor(byte[] bytes, int offset, int length, java.nio.charset.Charset charset)
    #ctor(byte[] bytes, java.lang.String charsetName)
    #ctor(byte[] bytes, java.nio.charset.Charset charset)
    #ctor(char[] value)
    #ctor(char[] value, int offset, int count)
    #ctor(int[] codePoints, int offset, int count)
    #ctor(java.lang.String original)
    #ctor(java.lang.StringBuffer buffer)
    #ctor(java.lang.StringBuilder builder)
    subSequence(int beginIndex, int endIndex)
    substring(int beginIndex)
    substring(int beginIndex, int endIndex)
    toLowerCase(java.util.Locale locale)
    toUpperCase(java.util.Locale locale)
    valueOf(boolean b)
    valueOf(char c)
    valueOf(char[] data)
    valueOf(char[] data, int offset, int count)
    valueOf(double d)
    valueOf(float f)
    valueOf(int i)
    valueOf(java.lang.Object obj)
    valueOf(long l)
  class StringBuffer
    append(boolean b)
    append(char c)
    append(char[] str)
    append(char[] str, int offset, int len)
    append(double d)
    append(float f)
    append(int i)
    append(java.lang.CharSequence s)
    append(java.lang.CharSequence s, int start, int end)
    append(java.lang.Object obj)
    append(java.lang.String str)
    append(java.lang.StringBuffer sb)
    append(long lng)
    appendCodePoint(int codePoint)
    charAt(int index)
    codePointAt(int index)
    codePointBefore(int index)
    codePointCount(int beginIndex, int endIndex)
    delete(int start, int end)
    deleteCharAt(int index)
    ensureCapacity(int minimumCapacity)
    getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
    indexOf(java.lang.String str)
    indexOf(java.lang.String str, int fromIndex)
    insert(int offset, boolean b)
    insert(int offset, char c)
    insert(int offset, char[] str)
    insert(int index, char[] str, int offset, int len)
    insert(int offset, double d)
    insert(int offset, float f)
    insert(int offset, int i)
    insert(int dstOffset, java.lang.CharSequence s)
    insert(int dstOffset, java.lang.CharSequence s, int start, int end)
    insert(int offset, java.lang.Object obj)
    insert(int offset, java.lang.String str)
    insert(int offset, long l)
    lastIndexOf(java.lang.String str)
    lastIndexOf(java.lang.String str, int fromIndex)
    offsetByCodePoints(int index, int codePointOffset)
    replace(int start, int end, java.lang.String str)
    setCharAt(int index, char ch)
    setLength(int newLength)
    #ctor(int capacity)
    #ctor(java.lang.CharSequence seq)
    #ctor(java.lang.String str)
    subSequence(int start, int end)
    substring(int start)
    substring(int start, int end)
  class StringBuilder
    append(boolean b)
    append(char c)
    append(char[] str)
    append(char[] str, int offset, int len)
    append(double d)
    append(float f)
    append(int i)
    append(java.lang.CharSequence s)
    append(java.lang.CharSequence s, int start, int end)
    append(java.lang.Object obj)
    append(java.lang.String str)
    append(java.lang.StringBuffer sb)
    append(long lng)
    appendCodePoint(int codePoint)
    delete(int start, int end)
    deleteCharAt(int index)
    indexOf(java.lang.String str)
    indexOf(java.lang.String str, int fromIndex)
    insert(int offset, boolean b)
    insert(int offset, char c)
    insert(int offset, char[] str)
    insert(int index, char[] str, int offset, int len)
    insert(int offset, double d)
    insert(int offset, float f)
    insert(int offset, int i)
    insert(int dstOffset, java.lang.CharSequence s)
    insert(int dstOffset, java.lang.CharSequence s, int start, int end)
    insert(int offset, java.lang.Object obj)
    insert(int offset, java.lang.String str)
    insert(int offset, long l)
    lastIndexOf(java.lang.String str)
    lastIndexOf(java.lang.String str, int fromIndex)
    replace(int start, int end, java.lang.String str)
    #ctor(int capacity)
    #ctor(java.lang.CharSequence seq)
    #ctor(java.lang.String str)
  class StringIndexOutOfBoundsException
    #ctor(int index)
    #ctor(java.lang.String s)
  class System
    arraycopy(java.lang.Object src, int srcPos, java.lang.Object dest, int destPos, int length)
    clearProperty(java.lang.String key)
    exit(int status)
    getenv(java.lang.String name)
    getProperty(java.lang.String key)
    getProperty(java.lang.String key, java.lang.String def)
    identityHashCode(java.lang.Object x)
    load(java.lang.String filename)
    loadLibrary(java.lang.String libname)
    mapLibraryName(java.lang.String libname)
    runFinalizersOnExit(boolean value)
    setErr(java.io.PrintStream err)
    setIn(java.io.InputStream in)
    setOut(java.io.PrintStream out)
    setProperties(java.util.Properties props)
    setProperty(java.lang.String key, java.lang.String value)
    setSecurityManager(java.lang.SecurityManager s)
  class Thread
    enumerate(java.lang.Thread[] tarray)
    holdsLock(java.lang.Object obj)
    join(long millis)
    join(long millis, int nanos)
    setContextClassLoader(java.lang.ClassLoader cl)
    setDaemon(boolean on)
    setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler eh)
    setName(java.lang.String name)
    setPriority(int newPriority)
    setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler eh)
    sleep(long millis)
    sleep(long millis, int nanos)
    stop(java.lang.Throwable obj)
    #ctor(java.lang.Runnable target)
    #ctor(java.lang.Runnable target, java.lang.String name)
    #ctor(java.lang.String name)
    #ctor(java.lang.ThreadGroup group, java.lang.Runnable target)
    #ctor(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name)
    #ctor(java.lang.ThreadGroup group, java.lang.Runnable target, java.lang.String name, long stackSize)
    #ctor(java.lang.ThreadGroup group, java.lang.String name)
  class Thread.State
    valueOf(java.lang.String name)
  interface Thread.UncaughtExceptionHandler
    uncaughtException(java.lang.Thread t, java.lang.Throwable e)
  class ThreadGroup
    allowThreadSuspension(boolean b)
    enumerate(java.lang.Thread[] list)
    enumerate(java.lang.Thread[] list, boolean recurse)
    enumerate(java.lang.ThreadGroup[] list)
    enumerate(java.lang.ThreadGroup[] list, boolean recurse)
    parentOf(java.lang.ThreadGroup g)
    setDaemon(boolean daemon)
    setMaxPriority(int pri)
    #ctor(java.lang.String name)
    #ctor(java.lang.ThreadGroup parent, java.lang.String name)
    uncaughtException(java.lang.Thread t, java.lang.Throwable e)
  class ThreadLocal<T>
    set(T value)
    <S> withInitial(java.util.function.Supplier<? extends S> supplier)
  class Throwable
    addSuppressed(java.lang.Throwable exception)
    initCause(java.lang.Throwable cause)
    printStackTrace(java.io.PrintStream s)
    printStackTrace(java.io.PrintWriter s)
    setStackTrace(java.lang.StackTraceElement[] stackTrace)
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.String message, java.lang.Throwable cause, boolean enableSuppression, boolean writableStackTrace)
    #ctor(java.lang.Throwable cause)
  class TypeNotPresentException
    #ctor(java.lang.String typeName, java.lang.Throwable cause)
  class UnknownError
    #ctor(java.lang.String s)
  class UnsatisfiedLinkError
    #ctor(java.lang.String s)
  class UnsupportedClassVersionError
    #ctor(java.lang.String s)
  class UnsupportedOperationException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class VerifyError
    #ctor(java.lang.String s)
  class VirtualMachineError
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)

package java.lang.annotation
;---------------------------------------
  interface Annotation
    equals(java.lang.Object obj)
  class AnnotationFormatError
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class AnnotationTypeMismatchException
    #ctor(java.lang.reflect.Method element, java.lang.String foundType)
  class ElementType
    valueOf(java.lang.String name)
  class IncompleteAnnotationException
    #ctor(java.lang.Class<? extends java.lang.annotation.Annotation> annotationType, java.lang.String elementName)
  class RetentionPolicy
    valueOf(java.lang.String name)

package java.lang.invoke
;---------------------------------------
  class CallSite
    setTarget(java.lang.invoke.MethodHandle newTarget)
  class ConstantCallSite
    #ctor(java.lang.invoke.MethodHandle target)
    #ctor(java.lang.invoke.MethodType targetType, java.lang.invoke.MethodHandle createTargetHook)
    setTarget(java.lang.invoke.MethodHandle ignore)
  class LambdaConversionException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.String message, java.lang.Throwable cause, boolean enableSuppression, boolean writableStackTrace)
    #ctor(java.lang.Throwable cause)
  class MethodHandle
    asCollector(java.lang.Class<?> arrayType, int arrayLength)
    asSpreader(java.lang.Class<?> arrayType, int arrayLength)
    asType(java.lang.invoke.MethodType newType)
    asVarargsCollector(java.lang.Class<?> arrayType)
    bindTo(java.lang.Object x)
    invoke(java.lang.Object... args)
    invokeExact(java.lang.Object... args)
    invokeWithArguments(java.lang.Object... arguments)
    invokeWithArguments(java.util.List<?> arguments)
  interface MethodHandleInfo
    referenceKindToString(int referenceKind)
    refKindIsField(int refKind)
    refKindIsValid(int refKind)
    refKindName(int refKind)
    <T> reflectAs(java.lang.Class<T> expected, java.lang.invoke.MethodHandles.Lookup lookup)
    toString(int kind, java.lang.Class<?> defc, java.lang.String name, java.lang.invoke.MethodType type)
  class MethodHandles
    arrayElementGetter(java.lang.Class<?> arrayClass)
    arrayElementSetter(java.lang.Class<?> arrayClass)
    catchException(java.lang.invoke.MethodHandle target, java.lang.Class<? extends java.lang.Throwable> exType, java.lang.invoke.MethodHandle handler)
    collectArguments(java.lang.invoke.MethodHandle target, int pos, java.lang.invoke.MethodHandle filter)
    constant(java.lang.Class<?> type, java.lang.Object value)
    dropArguments(java.lang.invoke.MethodHandle target, int pos, java.lang.Class<?>... valueTypes)
    dropArguments(java.lang.invoke.MethodHandle target, int pos, java.util.List<java.lang.Class<?>> valueTypes)
    exactInvoker(java.lang.invoke.MethodType type)
    explicitCastArguments(java.lang.invoke.MethodHandle target, java.lang.invoke.MethodType newType)
    filterArguments(java.lang.invoke.MethodHandle target, int pos, java.lang.invoke.MethodHandle... filters)
    filterReturnValue(java.lang.invoke.MethodHandle target, java.lang.invoke.MethodHandle filter)
    foldArguments(java.lang.invoke.MethodHandle target, java.lang.invoke.MethodHandle combiner)
    guardWithTest(java.lang.invoke.MethodHandle test, java.lang.invoke.MethodHandle target, java.lang.invoke.MethodHandle fallback)
    identity(java.lang.Class<?> type)
    insertArguments(java.lang.invoke.MethodHandle target, int pos, java.lang.Object... values)
    invoker(java.lang.invoke.MethodType type)
    permuteArguments(java.lang.invoke.MethodHandle target, java.lang.invoke.MethodType newType, int... reorder)
    <T> reflectAs(java.lang.Class<T> expected, java.lang.invoke.MethodHandle target)
    spreadInvoker(java.lang.invoke.MethodType type, int leadingArgCount)
    throwException(java.lang.Class<?> returnType, java.lang.Class<? extends java.lang.Throwable> exType)
  class MethodHandles.Lookup
    bind(java.lang.Object receiver, java.lang.String name, java.lang.invoke.MethodType type)
    findConstructor(java.lang.Class<?> refc, java.lang.invoke.MethodType type)
    findGetter(java.lang.Class<?> refc, java.lang.String name, java.lang.Class<?> type)
    findSetter(java.lang.Class<?> refc, java.lang.String name, java.lang.Class<?> type)
    findSpecial(java.lang.Class<?> refc, java.lang.String name, java.lang.invoke.MethodType type, java.lang.Class<?> specialCaller)
    findStatic(java.lang.Class<?> refc, java.lang.String name, java.lang.invoke.MethodType type)
    findStaticGetter(java.lang.Class<?> refc, java.lang.String name, java.lang.Class<?> type)
    findStaticSetter(java.lang.Class<?> refc, java.lang.String name, java.lang.Class<?> type)
    findVirtual(java.lang.Class<?> refc, java.lang.String name, java.lang.invoke.MethodType type)
    in(java.lang.Class<?> requestedLookupClass)
    revealDirect(java.lang.invoke.MethodHandle target)
    unreflect(java.lang.reflect.Method m)
    unreflectConstructor(java.lang.reflect.Constructor<?> c)
    unreflectGetter(java.lang.reflect.Field f)
    unreflectSetter(java.lang.reflect.Field f)
    unreflectSpecial(java.lang.reflect.Method m, java.lang.Class<?> specialCaller)
  class MethodType
    appendParameterTypes(java.lang.Class<?>... ptypesToInsert)
    appendParameterTypes(java.util.List<java.lang.Class<?>> ptypesToInsert)
    changeParameterType(int num, java.lang.Class<?> nptype)
    changeReturnType(java.lang.Class<?> nrtype)
    dropParameterTypes(int start, int end)
    equals(java.lang.Object x)
    fromMethodDescriptorString(java.lang.String descriptor, java.lang.ClassLoader loader)
    genericMethodType(int objectArgCount)
    genericMethodType(int objectArgCount, boolean finalArray)
    insertParameterTypes(int num, java.lang.Class<?>... ptypesToInsert)
    insertParameterTypes(int num, java.util.List<java.lang.Class<?>> ptypesToInsert)
    methodType(java.lang.Class<?> rtype)
    methodType(java.lang.Class<?> rtype, java.lang.Class<?> ptype0)
    methodType(java.lang.Class<?> rtype, java.lang.Class<?> ptype0, java.lang.Class<?>... ptypes)
    methodType(java.lang.Class<?> rtype, java.lang.Class<?>[] ptypes)
    methodType(java.lang.Class<?> rtype, java.lang.invoke.MethodType ptypes)
    methodType(java.lang.Class<?> rtype, java.util.List<java.lang.Class<?>> ptypes)
    parameterType(int num)
  class MutableCallSite
    #ctor(java.lang.invoke.MethodHandle target)
    #ctor(java.lang.invoke.MethodType type)
    setTarget(java.lang.invoke.MethodHandle newTarget)
  class VolatileCallSite
    setTarget(java.lang.invoke.MethodHandle newTarget)
    #ctor(java.lang.invoke.MethodHandle target)
    #ctor(java.lang.invoke.MethodType type)
  class WrongMethodTypeException
    #ctor(java.lang.String s)

package java.lang.ref
;---------------------------------------
  class PhantomReference<T>
    #ctor(T referent, java.lang.ref.ReferenceQueue<? super T> q)
  class Reference<T>
    reachabilityFence(java.lang.Object ref)
  class ReferenceQueue<T>
    remove(long timeout)
  class SoftReference<T>
    #ctor(T referent)
    #ctor(T referent, java.lang.ref.ReferenceQueue<? super T> q)
  class WeakReference<T>
    #ctor(T referent)
    #ctor(T referent, java.lang.ref.ReferenceQueue<? super T> q)

package java.lang.reflect
;---------------------------------------
  class AccessibleObject
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    <T> getAnnotationsByType(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotation(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotationsByType(java.lang.Class<T> annotationClass)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
    setAccessible(boolean flag)
    setAccessible(java.lang.reflect.AccessibleObject[] array, boolean flag)
  interface AnnotatedElement
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    <T> getAnnotationsByType(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotation(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotationsByType(java.lang.Class<T> annotationClass)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationClass)
  class Array
    get(java.lang.Object array, int index)
    getBoolean(java.lang.Object array, int index)
    getByte(java.lang.Object array, int index)
    getChar(java.lang.Object array, int index)
    getDouble(java.lang.Object array, int index)
    getFloat(java.lang.Object array, int index)
    getInt(java.lang.Object array, int index)
    getLength(java.lang.Object array)
    getLong(java.lang.Object array, int index)
    getShort(java.lang.Object array, int index)
    newInstance(java.lang.Class<?> componentType, int length)
    newInstance(java.lang.Class<?> componentType, int... dimensions)
    set(java.lang.Object array, int index, java.lang.Object value)
    setBoolean(java.lang.Object array, int index, boolean z)
    setByte(java.lang.Object array, int index, byte b)
    setChar(java.lang.Object array, int index, char c)
    setDouble(java.lang.Object array, int index, double d)
    setFloat(java.lang.Object array, int index, float f)
    setInt(java.lang.Object array, int index, int i)
    setLong(java.lang.Object array, int index, long l)
    setShort(java.lang.Object array, int index, short s)
  class Constructor<T>
    equals(java.lang.Object obj)
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    newInstance(java.lang.Object... initargs)
  class Executable
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    <T> getAnnotationsByType(java.lang.Class<T> annotationClass)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationType)
  class Field
    equals(java.lang.Object obj)
    get(java.lang.Object obj)
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    <T> getAnnotationsByType(java.lang.Class<T> annotationClass)
    getBoolean(java.lang.Object obj)
    getByte(java.lang.Object obj)
    getChar(java.lang.Object obj)
    getDouble(java.lang.Object obj)
    getFloat(java.lang.Object obj)
    getInt(java.lang.Object obj)
    getLong(java.lang.Object obj)
    getShort(java.lang.Object obj)
    isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation> annotationType)
    set(java.lang.Object obj, java.lang.Object value)
    setBoolean(java.lang.Object obj, boolean z)
    setByte(java.lang.Object obj, byte b)
    setChar(java.lang.Object obj, char c)
    setDouble(java.lang.Object obj, double d)
    setFloat(java.lang.Object obj, float f)
    setInt(java.lang.Object obj, int i)
    setLong(java.lang.Object obj, long l)
    setShort(java.lang.Object obj, short s)
  class GenericSignatureFormatError
    #ctor(java.lang.String message)
  interface InvocationHandler
    invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args)
  class InvocationTargetException
    #ctor(java.lang.Throwable target)
    #ctor(java.lang.Throwable target, java.lang.String s)
  class MalformedParametersException
    #ctor(java.lang.String reason)
  class Method
    equals(java.lang.Object obj)
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    invoke(java.lang.Object obj, java.lang.Object... args)
  class Modifier
    isAbstract(int mod)
    isFinal(int mod)
    isInterface(int mod)
    isNative(int mod)
    isPrivate(int mod)
    isProtected(int mod)
    isPublic(int mod)
    isStatic(int mod)
    isStrict(int mod)
    isSynchronized(int mod)
    isTransient(int mod)
    isVolatile(int mod)
    toString(int mod)
  class Parameter
    equals(java.lang.Object obj)
    <T> getAnnotation(java.lang.Class<T> annotationClass)
    <T> getAnnotationsByType(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotation(java.lang.Class<T> annotationClass)
    <T> getDeclaredAnnotationsByType(java.lang.Class<T> annotationClass)
  class Proxy
    getInvocationHandler(java.lang.Object proxy)
    getProxyClass(java.lang.ClassLoader loader, java.lang.Class<?>... interfaces)
    isProxyClass(java.lang.Class<?> cl)
    newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h)
    #ctor(java.lang.reflect.InvocationHandler h)
  class ReflectPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class UndeclaredThrowableException
    #ctor(java.lang.Throwable undeclaredThrowable)
    #ctor(java.lang.Throwable undeclaredThrowable, java.lang.String s)

package java.math
;---------------------------------------
  class BigDecimal
    abs(java.math.MathContext mc)
    add(java.math.BigDecimal augend)
    add(java.math.BigDecimal augend, java.math.MathContext mc)
    #ctor(char[] in)
    #ctor(char[] in, int offset, int len)
    #ctor(char[] in, int offset, int len, java.math.MathContext mc)
    #ctor(char[] in, java.math.MathContext mc)
    #ctor(double val)
    #ctor(double val, java.math.MathContext mc)
    #ctor(int val)
    #ctor(int val, java.math.MathContext mc)
    #ctor(java.lang.String val)
    #ctor(java.lang.String val, java.math.MathContext mc)
    #ctor(java.math.BigInteger val)
    #ctor(java.math.BigInteger unscaledVal, int scale)
    #ctor(java.math.BigInteger unscaledVal, int scale, java.math.MathContext mc)
    #ctor(java.math.BigInteger val, java.math.MathContext mc)
    #ctor(long val)
    #ctor(long val, java.math.MathContext mc)
    compareTo(java.math.BigDecimal val)
    divide(java.math.BigDecimal divisor)
    divide(java.math.BigDecimal divisor, int roundingMode)
    divide(java.math.BigDecimal divisor, int scale, int roundingMode)
    divide(java.math.BigDecimal divisor, int scale, java.math.RoundingMode roundingMode)
    divide(java.math.BigDecimal divisor, java.math.MathContext mc)
    divide(java.math.BigDecimal divisor, java.math.RoundingMode roundingMode)
    divideAndRemainder(java.math.BigDecimal divisor)
    divideAndRemainder(java.math.BigDecimal divisor, java.math.MathContext mc)
    divideToIntegralValue(java.math.BigDecimal divisor)
    divideToIntegralValue(java.math.BigDecimal divisor, java.math.MathContext mc)
    equals(java.lang.Object x)
    max(java.math.BigDecimal val)
    min(java.math.BigDecimal val)
    movePointLeft(int n)
    movePointRight(int n)
    multiply(java.math.BigDecimal multiplicand)
    multiply(java.math.BigDecimal multiplicand, java.math.MathContext mc)
    negate(java.math.MathContext mc)
    plus(java.math.MathContext mc)
    pow(int n)
    pow(int n, java.math.MathContext mc)
    remainder(java.math.BigDecimal divisor)
    remainder(java.math.BigDecimal divisor, java.math.MathContext mc)
    round(java.math.MathContext mc)
    scaleByPowerOfTen(int n)
    setScale(int newScale)
    setScale(int newScale, int roundingMode)
    setScale(int newScale, java.math.RoundingMode roundingMode)
    subtract(java.math.BigDecimal subtrahend)
    subtract(java.math.BigDecimal subtrahend, java.math.MathContext mc)
    valueOf(double val)
    valueOf(long unscaledVal)
    valueOf(long unscaledVal, int scale)
  class BigInteger
    add(java.math.BigInteger value)
    and(java.math.BigInteger value)
    andNot(java.math.BigInteger value)
    #ctor(byte[] value)
    #ctor(int signum, byte[] magnitude)
    #ctor(int bitLength, int certainty, java.util.Random random)
    #ctor(int numBits, java.util.Random random)
    #ctor(java.lang.String value)
    #ctor(java.lang.String value, int radix)
    clearBit(int n)
    compareTo(java.math.BigInteger value)
    divide(java.math.BigInteger divisor)
    divideAndRemainder(java.math.BigInteger divisor)
    equals(java.lang.Object x)
    flipBit(int n)
    gcd(java.math.BigInteger value)
    isProbablePrime(int certainty)
    max(java.math.BigInteger value)
    min(java.math.BigInteger value)
    mod(java.math.BigInteger m)
    modInverse(java.math.BigInteger m)
    modPow(java.math.BigInteger exponent, java.math.BigInteger modulus)
    multiply(java.math.BigInteger value)
    or(java.math.BigInteger value)
    pow(int exp)
    probablePrime(int bitLength, java.util.Random random)
    remainder(java.math.BigInteger divisor)
    setBit(int n)
    shiftLeft(int n)
    shiftRight(int n)
    subtract(java.math.BigInteger value)
    testBit(int n)
    toString(int radix)
    valueOf(long value)
    xor(java.math.BigInteger value)
  class MathContext
    equals(java.lang.Object x)
    #ctor(int precision)
    #ctor(int precision, java.math.RoundingMode roundingMode)
    #ctor(java.lang.String s)
  class RoundingMode
    valueOf(int mode)
    valueOf(java.lang.String name)

package java.net
;---------------------------------------
  class Authenticator
    requestPasswordAuthentication(java.lang.String host, java.net.InetAddress addr, int port, java.lang.String protocol, java.lang.String prompt, java.lang.String scheme)
    requestPasswordAuthentication(java.lang.String host, java.net.InetAddress addr, int port, java.lang.String protocol, java.lang.String prompt, java.lang.String scheme, java.net.URL url, java.net.Authenticator.RequestorType reqType)
    requestPasswordAuthentication(java.net.InetAddress addr, int port, java.lang.String protocol, java.lang.String prompt, java.lang.String scheme)
    setDefault(java.net.Authenticator a)
  class Authenticator.RequestorType
    valueOf(java.lang.String name)
  class BindException
    #ctor(java.lang.String msg)
  class ConnectException
    #ctor(java.lang.String msg)
  class ContentHandler
    getContent(java.net.URLConnection urlc)
    getContent(java.net.URLConnection urlc, java.lang.Class[] classes)
  interface ContentHandlerFactory
    createContentHandler(java.lang.String mimetype)
  class CookieHandler
    get(java.net.URI uri, java.util.Map<java.lang.String,java.util.List<java.lang.String>> requestHeaders)
    put(java.net.URI uri, java.util.Map<java.lang.String,java.util.List<java.lang.String>> responseHeaders)
    setDefault(java.net.CookieHandler cHandler)
  class CookieManager
    #ctor(java.net.CookieStore store, java.net.CookiePolicy cookiePolicy)
    get(java.net.URI uri, java.util.Map<java.lang.String,java.util.List<java.lang.String>> requestHeaders)
    put(java.net.URI uri, java.util.Map<java.lang.String,java.util.List<java.lang.String>> responseHeaders)
    setCookiePolicy(java.net.CookiePolicy cookiePolicy)
  interface CookiePolicy
    shouldAccept(java.net.URI uri, java.net.HttpCookie cookie)
  interface CookieStore
    add(java.net.URI uri, java.net.HttpCookie cookie)
    get(java.net.URI uri)
    remove(java.net.URI uri, java.net.HttpCookie cookie)
  class DatagramPacket
    #ctor(byte[] buf, int length)
    #ctor(byte[] buf, int offset, int length)
    #ctor(byte[] buf, int offset, int length, java.net.InetAddress address, int port)
    #ctor(byte[] buf, int offset, int length, java.net.SocketAddress address)
    #ctor(byte[] buf, int length, java.net.InetAddress address, int port)
    #ctor(byte[] buf, int length, java.net.SocketAddress address)
    setAddress(java.net.InetAddress iaddr)
    setData(byte[] buf)
    setData(byte[] buf, int offset, int length)
    setLength(int length)
    setPort(int iport)
    setSocketAddress(java.net.SocketAddress address)
  class DatagramSocket
    bind(java.net.SocketAddress addr)
    connect(java.net.InetAddress address, int port)
    connect(java.net.SocketAddress addr)
    #ctor(int port)
    #ctor(int port, java.net.InetAddress laddr)
    #ctor(java.net.DatagramSocketImpl impl)
    #ctor(java.net.SocketAddress bindaddr)
    receive(java.net.DatagramPacket p)
    send(java.net.DatagramPacket p)
    setBroadcast(boolean on)
    setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory fac)
    setReceiveBufferSize(int size)
    setReuseAddress(boolean on)
    setSendBufferSize(int size)
    setSoTimeout(int timeout)
    setTrafficClass(int tc)
  class DatagramSocketImpl
    bind(int lport, java.net.InetAddress laddr)
    connect(java.net.InetAddress address, int port)
    join(java.net.InetAddress inetaddr)
    joinGroup(java.net.SocketAddress mcastaddr, java.net.NetworkInterface netIf)
    leave(java.net.InetAddress inetaddr)
    leaveGroup(java.net.SocketAddress mcastaddr, java.net.NetworkInterface netIf)
    peek(java.net.InetAddress i)
    peekData(java.net.DatagramPacket p)
    receive(java.net.DatagramPacket p)
    send(java.net.DatagramPacket p)
    setTimeToLive(int ttl)
    setTTL(byte ttl)
  interface FileNameMap
    getContentTypeFor(java.lang.String fileName)
  class HttpCookie
    domainMatches(java.lang.String domain, java.lang.String host)
    equals(java.lang.Object obj)
    #ctor(java.lang.String name, java.lang.String value)
    parse(java.lang.String header)
    setComment(java.lang.String purpose)
    setCommentURL(java.lang.String purpose)
    setDiscard(boolean discard)
    setDomain(java.lang.String pattern)
    setHttpOnly(boolean httpOnly)
    setMaxAge(long expiry)
    setPath(java.lang.String uri)
    setPortlist(java.lang.String ports)
    setSecure(boolean flag)
    setValue(java.lang.String newValue)
    setVersion(int v)
  class HttpRetryException
    #ctor(java.lang.String detail, int code)
    #ctor(java.lang.String detail, int code, java.lang.String location)
  class HttpURLConnection
    getHeaderField(int n)
    getHeaderFieldDate(java.lang.String name, long Default)
    getHeaderFieldKey(int n)
    #ctor(java.net.URL u)
    setChunkedStreamingMode(int chunklen)
    setFixedLengthStreamingMode(int contentLength)
    setFixedLengthStreamingMode(long contentLength)
    setFollowRedirects(boolean set)
    setInstanceFollowRedirects(boolean followRedirects)
    setRequestMethod(java.lang.String method)
  class IDN
    toASCII(java.lang.String input)
    toASCII(java.lang.String input, int flag)
    toUnicode(java.lang.String input)
    toUnicode(java.lang.String input, int flag)
  class Inet4Address
    equals(java.lang.Object obj)
  class Inet6Address
    equals(java.lang.Object obj)
    getByAddress(java.lang.String host, byte[] addr, int scope_id)
    getByAddress(java.lang.String host, byte[] addr, java.net.NetworkInterface nif)
  class InetAddress
    equals(java.lang.Object obj)
    getAllByName(java.lang.String host)
    getByAddress(byte[] addr)
    getByAddress(java.lang.String host, byte[] addr)
    getByName(java.lang.String host)
    isReachable(int timeout)
    isReachable(java.net.NetworkInterface netif, int ttl, int timeout)
  class InetSocketAddress
    createUnresolved(java.lang.String host, int port)
    equals(java.lang.Object obj)
    #ctor(int port)
    #ctor(java.lang.String hostname, int port)
    #ctor(java.net.InetAddress addr, int port)
  class InterfaceAddress
    equals(java.lang.Object obj)
  class JarURLConnection
    #ctor(java.net.URL url)
  class MalformedURLException
    #ctor(java.lang.String msg)
  class MulticastSocket
    joinGroup(java.net.InetAddress mcastaddr)
    joinGroup(java.net.SocketAddress mcastaddr, java.net.NetworkInterface netIf)
    leaveGroup(java.net.InetAddress mcastaddr)
    leaveGroup(java.net.SocketAddress mcastaddr, java.net.NetworkInterface netIf)
    #ctor(int port)
    #ctor(java.net.SocketAddress bindaddr)
    send(java.net.DatagramPacket p, byte ttl)
    setInterface(java.net.InetAddress inf)
    setLoopbackMode(boolean disable)
    setNetworkInterface(java.net.NetworkInterface netIf)
    setTimeToLive(int ttl)
    setTTL(byte ttl)
  class NetPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class NetworkInterface
    equals(java.lang.Object obj)
    getByIndex(int index)
    getByInetAddress(java.net.InetAddress addr)
    getByName(java.lang.String name)
  class NoRouteToHostException
    #ctor(java.lang.String msg)
  class PasswordAuthentication
    #ctor(java.lang.String userName, char[] password)
  class PortUnreachableException
    #ctor(java.lang.String msg)
  class ProtocolException
    #ctor(java.lang.String host)
  class Proxy
    equals(java.lang.Object obj)
    #ctor(java.net.Proxy.Type type, java.net.SocketAddress sa)
  class Proxy.Type
    valueOf(java.lang.String name)
  class ProxySelector
    connectFailed(java.net.URI uri, java.net.SocketAddress sa, java.io.IOException ioe)
    select(java.net.URI uri)
    setDefault(java.net.ProxySelector ps)
  class ResponseCache
    get(java.net.URI uri, java.lang.String rqstMethod, java.util.Map<java.lang.String,java.util.List<java.lang.String>> rqstHeaders)
    put(java.net.URI uri, java.net.URLConnection conn)
    setDefault(java.net.ResponseCache responseCache)
  class ServerSocket
    bind(java.net.SocketAddress endpoint)
    bind(java.net.SocketAddress endpoint, int backlog)
    implAccept(java.net.Socket s)
    #ctor(int port)
    #ctor(int port, int backlog)
    #ctor(int port, int backlog, java.net.InetAddress bindAddr)
    setPerformancePreferences(int connectionTime, int latency, int bandwidth)
    setReceiveBufferSize(int size)
    setReuseAddress(boolean on)
    setSocketFactory(java.net.SocketImplFactory fac)
    setSoTimeout(int timeout)
  class Socket
    bind(java.net.SocketAddress bindpoint)
    connect(java.net.SocketAddress endpoint)
    connect(java.net.SocketAddress endpoint, int timeout)
    sendUrgentData(int data)
    setKeepAlive(boolean on)
    setOOBInline(boolean on)
    setPerformancePreferences(int connectionTime, int latency, int bandwidth)
    setReceiveBufferSize(int size)
    setReuseAddress(boolean on)
    setSendBufferSize(int size)
    setSocketImplFactory(java.net.SocketImplFactory fac)
    setSoLinger(boolean on, int linger)
    setSoTimeout(int timeout)
    setTcpNoDelay(boolean on)
    setTrafficClass(int tc)
    #ctor(java.lang.String host, int port)
    #ctor(java.lang.String host, int port, boolean stream)
    #ctor(java.lang.String host, int port, java.net.InetAddress localAddr, int localPort)
    #ctor(java.net.InetAddress address, int port)
    #ctor(java.net.InetAddress host, int port, boolean stream)
    #ctor(java.net.InetAddress address, int port, java.net.InetAddress localAddr, int localPort)
    #ctor(java.net.Proxy proxy)
    #ctor(java.net.SocketImpl impl)
  class SocketException
    #ctor(java.lang.String msg)
  class SocketImpl
    accept(java.net.SocketImpl s)
    bind(java.net.InetAddress host, int port)
    connect(java.lang.String host, int port)
    connect(java.net.InetAddress address, int port)
    connect(java.net.SocketAddress address, int timeout)
    create(boolean stream)
    listen(int backlog)
    sendUrgentData(int data)
    setPerformancePreferences(int connectionTime, int latency, int bandwidth)
  interface SocketOptions
    getOption(int optID)
    setOption(int optID, java.lang.Object value)
  class SocketPermission
    implies(java.security.Permission p)
    #ctor(java.lang.String host, java.lang.String action)
  class SocketTimeoutException
    #ctor(java.lang.String msg)
  class StandardProtocolFamily
    valueOf(java.lang.String name)
  class UnknownHostException
    #ctor(java.lang.String host)
  class UnknownServiceException
    #ctor(java.lang.String msg)
  class URI
    compareTo(java.net.URI that)
    create(java.lang.String str)
    equals(java.lang.Object ob)
    relativize(java.net.URI uri)
    resolve(java.lang.String str)
    resolve(java.net.URI uri)
    #ctor(java.lang.String str)
    #ctor(java.lang.String scheme, java.lang.String ssp, java.lang.String fragment)
    #ctor(java.lang.String scheme, java.lang.String userInfo, java.lang.String host, int port, java.lang.String path, java.lang.String query, java.lang.String fragment)
    #ctor(java.lang.String scheme, java.lang.String host, java.lang.String path, java.lang.String fragment)
    #ctor(java.lang.String scheme, java.lang.String authority, java.lang.String path, java.lang.String query, java.lang.String fragment)
  class URISyntaxException
    #ctor(java.lang.String input, java.lang.String reason)
    #ctor(java.lang.String input, java.lang.String reason, int index)
  class URL
    equals(java.lang.Object obj)
    getContent(java.lang.Class[] classes)
    openConnection(java.net.Proxy proxy)
    sameFile(java.net.URL other)
    setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory fac)
    #ctor(java.lang.String spec)
    #ctor(java.lang.String protocol, java.lang.String host, int port, java.lang.String file)
    #ctor(java.lang.String protocol, java.lang.String host, int port, java.lang.String file, java.net.URLStreamHandler handler)
    #ctor(java.lang.String protocol, java.lang.String host, java.lang.String file)
    #ctor(java.net.URL context, java.lang.String spec)
    #ctor(java.net.URL context, java.lang.String spec, java.net.URLStreamHandler handler)
  class URLClassLoader
    addURL(java.net.URL url)
    definePackage(java.lang.String name, java.util.jar.Manifest man, java.net.URL url)
    findClass(java.lang.String name)
    findResource(java.lang.String name)
    findResources(java.lang.String name)
    getPermissions(java.security.CodeSource codesource)
    getResourceAsStream(java.lang.String name)
    newInstance(java.net.URL[] urls)
    newInstance(java.net.URL[] urls, java.lang.ClassLoader parent)
    #ctor(java.net.URL[] urls)
    #ctor(java.net.URL[] urls, java.lang.ClassLoader parent)
    #ctor(java.net.URL[] urls, java.lang.ClassLoader parent, java.net.URLStreamHandlerFactory factory)
  class URLConnection
    addRequestProperty(java.lang.String key, java.lang.String value)
    getContent(java.lang.Class[] classes)
    getDefaultRequestProperty(java.lang.String key)
    getHeaderField(int n)
    getHeaderField(java.lang.String name)
    getHeaderFieldDate(java.lang.String name, long Default)
    getHeaderFieldInt(java.lang.String name, int Default)
    getHeaderFieldKey(int n)
    getHeaderFieldLong(java.lang.String name, long Default)
    getRequestProperty(java.lang.String key)
    guessContentTypeFromName(java.lang.String fname)
    guessContentTypeFromStream(java.io.InputStream is)
    setAllowUserInteraction(boolean allowuserinteraction)
    setConnectTimeout(int timeout)
    setContentHandlerFactory(java.net.ContentHandlerFactory fac)
    setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)
    setDefaultRequestProperty(java.lang.String key, java.lang.String value)
    setDefaultUseCaches(boolean defaultusecaches)
    setDoInput(boolean doinput)
    setDoOutput(boolean dooutput)
    setFileNameMap(java.net.FileNameMap map)
    setIfModifiedSince(long ifmodifiedsince)
    setReadTimeout(int timeout)
    setRequestProperty(java.lang.String key, java.lang.String value)
    setUseCaches(boolean usecaches)
    #ctor(java.net.URL url)
  class URLDecoder
    decode(java.lang.String s)
    decode(java.lang.String s, java.lang.String enc)
  class URLEncoder
    encode(java.lang.String s)
    encode(java.lang.String s, java.lang.String enc)
  class URLStreamHandler
    equals(java.net.URL u1, java.net.URL u2)
    getHostAddress(java.net.URL u)
    hashCode(java.net.URL u)
    hostsEqual(java.net.URL u1, java.net.URL u2)
    openConnection(java.net.URL u)
    openConnection(java.net.URL u, java.net.Proxy p)
    parseURL(java.net.URL u, java.lang.String spec, int start, int limit)
    sameFile(java.net.URL u1, java.net.URL u2)
    setURL(java.net.URL u, java.lang.String protocol, java.lang.String host, int port, java.lang.String file, java.lang.String ref)
    setURL(java.net.URL u, java.lang.String protocol, java.lang.String host, int port, java.lang.String authority, java.lang.String userInfo, java.lang.String path, java.lang.String query, java.lang.String ref)
    toExternalForm(java.net.URL u)
  interface URLStreamHandlerFactory
    createURLStreamHandler(java.lang.String protocol)

package java.nio
;---------------------------------------
  class Buffer
    limit(int newLimit)
    position(int newPosition)
  class ByteBuffer
    allocate(int capacity)
    allocateDirect(int capacity)
    compareTo(java.nio.ByteBuffer that)
    equals(java.lang.Object ob)
    get(byte[] dst)
    get(byte[] dst, int offset, int length)
    get(int index)
    getChar(int index)
    getDouble(int index)
    getFloat(int index)
    getInt(int index)
    getLong(int index)
    getShort(int index)
    order(java.nio.ByteOrder bo)
    put(byte b)
    put(byte[] src)
    put(byte[] src, int offset, int length)
    put(int index, byte b)
    put(java.nio.ByteBuffer src)
    putChar(char value)
    putChar(int index, char value)
    putDouble(double value)
    putDouble(int index, double value)
    putFloat(float value)
    putFloat(int index, float value)
    putInt(int value)
    putInt(int index, int value)
    putLong(int index, long value)
    putLong(long value)
    putShort(int index, short value)
    putShort(short value)
    wrap(byte[] array)
    wrap(byte[] array, int offset, int length)
  class CharBuffer
    allocate(int capacity)
    append(char c)
    append(java.lang.CharSequence csq)
    append(java.lang.CharSequence csq, int start, int end)
    charAt(int index)
    compareTo(java.nio.CharBuffer that)
    equals(java.lang.Object ob)
    get(char[] dst)
    get(char[] dst, int offset, int length)
    get(int index)
    put(char c)
    put(char[] src)
    put(char[] src, int offset, int length)
    put(int index, char c)
    put(java.lang.String src)
    put(java.lang.String src, int start, int end)
    put(java.nio.CharBuffer src)
    read(java.nio.CharBuffer target)
    subSequence(int start, int end)
    wrap(char[] array)
    wrap(char[] array, int offset, int length)
    wrap(java.lang.CharSequence csq)
    wrap(java.lang.CharSequence csq, int start, int end)
  class DoubleBuffer
    allocate(int capacity)
    compareTo(java.nio.DoubleBuffer that)
    equals(java.lang.Object ob)
    get(double[] dst)
    get(double[] dst, int offset, int length)
    get(int index)
    put(double d)
    put(double[] src)
    put(double[] src, int offset, int length)
    put(int index, double d)
    put(java.nio.DoubleBuffer src)
    wrap(double[] array)
    wrap(double[] array, int offset, int length)
  class FloatBuffer
    allocate(int capacity)
    compareTo(java.nio.FloatBuffer that)
    equals(java.lang.Object ob)
    get(float[] dst)
    get(float[] dst, int offset, int length)
    get(int index)
    put(float f)
    put(float[] src)
    put(float[] src, int offset, int length)
    put(int index, float f)
    put(java.nio.FloatBuffer src)
    wrap(float[] array)
    wrap(float[] array, int offset, int length)
  class IntBuffer
    allocate(int capacity)
    compareTo(java.nio.IntBuffer that)
    equals(java.lang.Object ob)
    get(int index)
    get(int[] dst)
    get(int[] dst, int offset, int length)
    put(int i)
    put(int index, int i)
    put(int[] src)
    put(int[] src, int offset, int length)
    put(java.nio.IntBuffer src)
    wrap(int[] array)
    wrap(int[] array, int offset, int length)
  class LongBuffer
    allocate(int capacity)
    compareTo(java.nio.LongBuffer that)
    equals(java.lang.Object ob)
    get(int index)
    get(long[] dst)
    get(long[] dst, int offset, int length)
    put(int index, long l)
    put(java.nio.LongBuffer src)
    put(long l)
    put(long[] src)
    put(long[] src, int offset, int length)
    wrap(long[] array)
    wrap(long[] array, int offset, int length)
  class ShortBuffer
    allocate(int capacity)
    compareTo(java.nio.ShortBuffer that)
    equals(java.lang.Object ob)
    get(int index)
    get(short[] dst)
    get(short[] dst, int offset, int length)
    put(int index, short s)
    put(java.nio.ShortBuffer src)
    put(short s)
    put(short[] src)
    put(short[] src, int offset, int length)
    wrap(short[] array)
    wrap(short[] array, int offset, int length)

package java.nio.channels
;---------------------------------------
  interface AsynchronousByteChannel
    read(java.nio.ByteBuffer dst)
    <A> read(java.nio.ByteBuffer dst, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    write(java.nio.ByteBuffer src)
    <A> write(java.nio.ByteBuffer src, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
  class AsynchronousChannelGroup
    #ctor(java.nio.channels.spi.AsynchronousChannelProvider provider)
    awaitTermination(long timeout, java.util.concurrent.TimeUnit unit)
    withCachedThreadPool(java.util.concurrent.ExecutorService executor, int initialSize)
    withFixedThreadPool(int nThreads, java.util.concurrent.ThreadFactory threadFactory)
    withThreadPool(java.util.concurrent.ExecutorService executor)
  class AsynchronousFileChannel
    force(boolean metaData)
    <A> lock(A attachment, java.nio.channels.CompletionHandler<java.nio.channels.FileLock,? super A> handler)
    lock(long position, long size, boolean shared)
    <A> lock(long position, long size, boolean shared, A attachment, java.nio.channels.CompletionHandler<java.nio.channels.FileLock,? super A> handler)
    open(java.nio.file.Path file, java.nio.file.OpenOption... options)
    open(java.nio.file.Path file, java.util.Set<? extends java.nio.file.OpenOption> options, java.util.concurrent.ExecutorService executor, java.nio.file.attribute.FileAttribute<?>... attrs)
    read(java.nio.ByteBuffer dst, long position)
    <A> read(java.nio.ByteBuffer dst, long position, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    truncate(long size)
    tryLock(long position, long size, boolean shared)
    write(java.nio.ByteBuffer src, long position)
    <A> write(java.nio.ByteBuffer src, long position, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
  class AsynchronousServerSocketChannel
    <A> accept(A attachment, java.nio.channels.CompletionHandler<java.nio.channels.AsynchronousSocketChannel,? super A> handler)
    #ctor(java.nio.channels.spi.AsynchronousChannelProvider provider)
    bind(java.net.SocketAddress local)
    bind(java.net.SocketAddress local, int backlog)
    open(java.nio.channels.AsynchronousChannelGroup group)
    <T> setOption(java.net.SocketOption<T> name, T value)
  class AsynchronousSocketChannel
    #ctor(java.nio.channels.spi.AsynchronousChannelProvider provider)
    bind(java.net.SocketAddress local)
    connect(java.net.SocketAddress remote)
    <A> connect(java.net.SocketAddress remote, A attachment, java.nio.channels.CompletionHandler<java.lang.Void,? super A> handler)
    open(java.nio.channels.AsynchronousChannelGroup group)
    read(java.nio.ByteBuffer dst)
    <A> read(java.nio.ByteBuffer dst, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    <A> read(java.nio.ByteBuffer dst, long timeout, java.util.concurrent.TimeUnit unit, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    <A> read(java.nio.ByteBuffer[] dsts, int offset, int length, long timeout, java.util.concurrent.TimeUnit unit, A attachment, java.nio.channels.CompletionHandler<java.lang.Long,? super A> handler)
    <T> setOption(java.net.SocketOption<T> name, T value)
    write(java.nio.ByteBuffer src)
    <A> write(java.nio.ByteBuffer src, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    <A> write(java.nio.ByteBuffer src, long timeout, java.util.concurrent.TimeUnit unit, A attachment, java.nio.channels.CompletionHandler<java.lang.Integer,? super A> handler)
    <A> write(java.nio.ByteBuffer[] srcs, int offset, int length, long timeout, java.util.concurrent.TimeUnit unit, A attachment, java.nio.channels.CompletionHandler<java.lang.Long,? super A> handler)
  class Channels
    newChannel(java.io.InputStream in)
    newChannel(java.io.OutputStream out)
    newInputStream(java.nio.channels.AsynchronousByteChannel ch)
    newInputStream(java.nio.channels.ReadableByteChannel ch)
    newOutputStream(java.nio.channels.AsynchronousByteChannel ch)
    newOutputStream(java.nio.channels.WritableByteChannel ch)
    newReader(java.nio.channels.ReadableByteChannel ch, java.lang.String csName)
    newReader(java.nio.channels.ReadableByteChannel ch, java.nio.charset.CharsetDecoder dec, int minBufferCap)
    newWriter(java.nio.channels.WritableByteChannel ch, java.lang.String csName)
    newWriter(java.nio.channels.WritableByteChannel ch, java.nio.charset.CharsetEncoder enc, int minBufferCap)
  interface CompletionHandler<V,A>
    completed(V result, A attachment)
    failed(java.lang.Throwable exc, A attachment)
  class DatagramChannel
    bind(java.net.SocketAddress local)
    connect(java.net.SocketAddress remote)
    #ctor(java.nio.channels.spi.SelectorProvider provider)
    open(java.net.ProtocolFamily family)
    read(java.nio.ByteBuffer dst)
    read(java.nio.ByteBuffer[] dsts)
    read(java.nio.ByteBuffer[] dsts, int offset, int length)
    receive(java.nio.ByteBuffer dst)
    send(java.nio.ByteBuffer src, java.net.SocketAddress target)
    <T> setOption(java.net.SocketOption<T> name, T value)
    write(java.nio.ByteBuffer src)
    write(java.nio.ByteBuffer[] srcs)
    write(java.nio.ByteBuffer[] srcs, int offset, int length)
  class FileChannel
    force(boolean metaData)
    lock(long position, long size, boolean shared)
    map(java.nio.channels.FileChannel.MapMode mode, long position, long size)
    open(java.nio.file.Path path, java.nio.file.OpenOption... options)
    open(java.nio.file.Path path, java.util.Set<? extends java.nio.file.OpenOption> options, java.nio.file.attribute.FileAttribute<?>... attrs)
    position(long newPosition)
    read(java.nio.ByteBuffer dst)
    read(java.nio.ByteBuffer dst, long position)
    read(java.nio.ByteBuffer[] dsts)
    read(java.nio.ByteBuffer[] dsts, int offset, int length)
    transferFrom(java.nio.channels.ReadableByteChannel src, long position, long count)
    transferTo(long position, long count, java.nio.channels.WritableByteChannel target)
    truncate(long size)
    tryLock(long position, long size, boolean shared)
    write(java.nio.ByteBuffer src)
    write(java.nio.ByteBuffer src, long position)
    write(java.nio.ByteBuffer[] srcs)
    write(java.nio.ByteBuffer[] srcs, int offset, int length)
  class FileLock
    #ctor(java.nio.channels.AsynchronousFileChannel channel, long position, long size, boolean shared)
    #ctor(java.nio.channels.FileChannel channel, long position, long size, boolean shared)
    overlaps(long position, long size)
  interface GatheringByteChannel
    write(java.nio.ByteBuffer[] srcs)
    write(java.nio.ByteBuffer[] srcs, int offset, int length)
  class MembershipKey
    block(java.net.InetAddress source)
    unblock(java.net.InetAddress source)
  interface MulticastChannel
    join(java.net.InetAddress group, java.net.NetworkInterface interf)
    join(java.net.InetAddress group, java.net.NetworkInterface interf, java.net.InetAddress source)
  interface NetworkChannel
    bind(java.net.SocketAddress local)
    <T> getOption(java.net.SocketOption<T> name)
    <T> setOption(java.net.SocketOption<T> name, T value)
  class Pipe.SinkChannel
    #ctor(java.nio.channels.spi.SelectorProvider provider)
  class Pipe.SourceChannel
    #ctor(java.nio.channels.spi.SelectorProvider provider)
  interface ReadableByteChannel
    read(java.nio.ByteBuffer dst)
  interface ScatteringByteChannel
    read(java.nio.ByteBuffer[] dsts)
    read(java.nio.ByteBuffer[] dsts, int offset, int length)
  interface SeekableByteChannel
    position(long newPosition)
    read(java.nio.ByteBuffer dst)
    truncate(long size)
    write(java.nio.ByteBuffer src)
  class SelectableChannel
    configureBlocking(boolean block)
    keyFor(java.nio.channels.Selector sel)
    register(java.nio.channels.Selector sel, int ops)
    register(java.nio.channels.Selector sel, int ops, java.lang.Object att)
  class SelectionKey
    attach(java.lang.Object ob)
    interestOps(int ops)
  class Selector
    select(long timeout)
  class ServerSocketChannel
    bind(java.net.SocketAddress local)
    bind(java.net.SocketAddress local, int backlog)
    #ctor(java.nio.channels.spi.SelectorProvider provider)
    <T> setOption(java.net.SocketOption<T> name, T value)
  class SocketChannel
    bind(java.net.SocketAddress local)
    connect(java.net.SocketAddress remote)
    open(java.net.SocketAddress remote)
    read(java.nio.ByteBuffer dst)
    read(java.nio.ByteBuffer[] dsts)
    read(java.nio.ByteBuffer[] dsts, int offset, int length)
    <T> setOption(java.net.SocketOption<T> name, T value)
    #ctor(java.nio.channels.spi.SelectorProvider provider)
    write(java.nio.ByteBuffer src)
    write(java.nio.ByteBuffer[] srcs)
    write(java.nio.ByteBuffer[] srcs, int offset, int length)
  interface WritableByteChannel
    write(java.nio.ByteBuffer src)

package java.nio.channels.spi
;---------------------------------------
  class AbstractInterruptibleChannel
    end(boolean completed)
  class AbstractSelectableChannel
    #ctor(java.nio.channels.spi.SelectorProvider provider)
    configureBlocking(boolean block)
    implConfigureBlocking(boolean block)
    keyFor(java.nio.channels.Selector sel)
    register(java.nio.channels.Selector sel, int ops, java.lang.Object att)
  class AbstractSelector
    #ctor(java.nio.channels.spi.SelectorProvider provider)
    deregister(java.nio.channels.spi.AbstractSelectionKey key)
    register(java.nio.channels.spi.AbstractSelectableChannel ch, int ops, java.lang.Object att)
  class AsynchronousChannelProvider
    openAsynchronousChannelGroup(int nThreads, java.util.concurrent.ThreadFactory threadFactory)
    openAsynchronousChannelGroup(java.util.concurrent.ExecutorService executor, int initialSize)
    openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup group)
    openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup group)
  class SelectorProvider
    openDatagramChannel(java.net.ProtocolFamily family)

package java.nio.charset
;---------------------------------------
  class Charset
    #ctor(java.lang.String canonicalName, java.lang.String[] aliases)
    compareTo(java.nio.charset.Charset that)
    contains(java.nio.charset.Charset cs)
    decode(java.nio.ByteBuffer bb)
    displayName(java.util.Locale locale)
    encode(java.lang.String str)
    encode(java.nio.CharBuffer cb)
    equals(java.lang.Object ob)
    forName(java.lang.String charsetName)
    isSupported(java.lang.String charsetName)
  class CharsetDecoder
    #ctor(java.nio.charset.Charset cs, float averageCharsPerByte, float maxCharsPerByte)
    decode(java.nio.ByteBuffer in)
    decode(java.nio.ByteBuffer in, java.nio.CharBuffer out, boolean endOfInput)
    decodeLoop(java.nio.ByteBuffer in, java.nio.CharBuffer out)
    flush(java.nio.CharBuffer out)
    implFlush(java.nio.CharBuffer out)
    implOnMalformedInput(java.nio.charset.CodingErrorAction newAction)
    implOnUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)
    implReplaceWith(java.lang.String newReplacement)
    onMalformedInput(java.nio.charset.CodingErrorAction newAction)
    onUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)
    replaceWith(java.lang.String newReplacement)
  class CharsetEncoder
    canEncode(char c)
    canEncode(java.lang.CharSequence cs)
    #ctor(java.nio.charset.Charset cs, float averageBytesPerChar, float maxBytesPerChar)
    #ctor(java.nio.charset.Charset cs, float averageBytesPerChar, float maxBytesPerChar, byte[] replacement)
    encode(java.nio.CharBuffer in)
    encode(java.nio.CharBuffer in, java.nio.ByteBuffer out, boolean endOfInput)
    encodeLoop(java.nio.CharBuffer in, java.nio.ByteBuffer out)
    flush(java.nio.ByteBuffer out)
    implFlush(java.nio.ByteBuffer out)
    implOnMalformedInput(java.nio.charset.CodingErrorAction newAction)
    implOnUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)
    implReplaceWith(byte[] newReplacement)
    isLegalReplacement(byte[] repl)
    onMalformedInput(java.nio.charset.CodingErrorAction newAction)
    onUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)
    replaceWith(byte[] newReplacement)
  class CoderMalfunctionError
    #ctor(java.lang.Exception cause)
  class CoderResult
    malformedForLength(int length)
    unmappableForLength(int length)
  class IllegalCharsetNameException
    #ctor(java.lang.String charsetName)
  class MalformedInputException
    #ctor(int inputLength)
  class UnmappableCharacterException
    #ctor(int inputLength)
  class UnsupportedCharsetException
    #ctor(java.lang.String charsetName)

package java.nio.charset.spi
;---------------------------------------
  class CharsetProvider
    charsetForName(java.lang.String charsetName)

package java.nio.file
;---------------------------------------
  class AccessDeniedException
    #ctor(java.lang.String file)
    #ctor(java.lang.String file, java.lang.String other, java.lang.String reason)
  class AccessMode
    valueOf(java.lang.String name)
  class AtomicMoveNotSupportedException
    #ctor(java.lang.String source, java.lang.String target, java.lang.String reason)
  class DirectoryIteratorException
    #ctor(java.io.IOException cause)
  class DirectoryNotEmptyException
    #ctor(java.lang.String dir)
  interface DirectoryStream.Filter<T>
    accept(T entry)
  class FileAlreadyExistsException
    #ctor(java.lang.String file)
    #ctor(java.lang.String file, java.lang.String other, java.lang.String reason)
  class Files
    copy(java.io.InputStream in, java.nio.file.Path target, java.nio.file.CopyOption... options)
    copy(java.nio.file.Path source, java.io.OutputStream out)
    copy(java.nio.file.Path source, java.nio.file.Path target, java.nio.file.CopyOption... options)
    createDirectories(java.nio.file.Path dir, java.nio.file.attribute.FileAttribute<?>... attrs)
    createDirectory(java.nio.file.Path dir, java.nio.file.attribute.FileAttribute<?>... attrs)
    createFile(java.nio.file.Path path, java.nio.file.attribute.FileAttribute<?>... attrs)
    createLink(java.nio.file.Path link, java.nio.file.Path existing)
    createSymbolicLink(java.nio.file.Path link, java.nio.file.Path target, java.nio.file.attribute.FileAttribute<?>... attrs)
    createTempDirectory(java.lang.String prefix, java.nio.file.attribute.FileAttribute<?>... attrs)
    createTempDirectory(java.nio.file.Path dir, java.lang.String prefix, java.nio.file.attribute.FileAttribute<?>... attrs)
    createTempFile(java.lang.String prefix, java.lang.String suffix, java.nio.file.attribute.FileAttribute<?>... attrs)
    createTempFile(java.nio.file.Path dir, java.lang.String prefix, java.lang.String suffix, java.nio.file.attribute.FileAttribute<?>... attrs)
    delete(java.nio.file.Path path)
    deleteIfExists(java.nio.file.Path path)
    exists(java.nio.file.Path path, java.nio.file.LinkOption... options)
    find(java.nio.file.Path start, int maxDepth, java.util.function.BiPredicate<java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes> matcher, java.nio.file.FileVisitOption... options)
    getAttribute(java.nio.file.Path path, java.lang.String attribute, java.nio.file.LinkOption... options)
    <V> getFileAttributeView(java.nio.file.Path path, java.lang.Class<V> type, java.nio.file.LinkOption... options)
    getFileStore(java.nio.file.Path path)
    getLastModifiedTime(java.nio.file.Path path, java.nio.file.LinkOption... options)
    getOwner(java.nio.file.Path path, java.nio.file.LinkOption... options)
    getPosixFilePermissions(java.nio.file.Path path, java.nio.file.LinkOption... options)
    isDirectory(java.nio.file.Path path, java.nio.file.LinkOption... options)
    isExecutable(java.nio.file.Path path)
    isHidden(java.nio.file.Path path)
    isReadable(java.nio.file.Path path)
    isRegularFile(java.nio.file.Path path, java.nio.file.LinkOption... options)
    isSameFile(java.nio.file.Path path, java.nio.file.Path path2)
    isSymbolicLink(java.nio.file.Path path)
    isWritable(java.nio.file.Path path)
    lines(java.nio.file.Path path)
    lines(java.nio.file.Path path, java.nio.charset.Charset cs)
    list(java.nio.file.Path dir)
    move(java.nio.file.Path source, java.nio.file.Path target, java.nio.file.CopyOption... options)
    newBufferedReader(java.nio.file.Path path)
    newBufferedReader(java.nio.file.Path path, java.nio.charset.Charset cs)
    newBufferedWriter(java.nio.file.Path path, java.nio.charset.Charset cs, java.nio.file.OpenOption... options)
    newBufferedWriter(java.nio.file.Path path, java.nio.file.OpenOption... options)
    newByteChannel(java.nio.file.Path path, java.nio.file.OpenOption... options)
    newByteChannel(java.nio.file.Path path, java.util.Set<? extends java.nio.file.OpenOption> options, java.nio.file.attribute.FileAttribute<?>... attrs)
    newDirectoryStream(java.nio.file.Path dir)
    newDirectoryStream(java.nio.file.Path dir, java.lang.String glob)
    newDirectoryStream(java.nio.file.Path dir, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path> filter)
    newInputStream(java.nio.file.Path path, java.nio.file.OpenOption... options)
    newOutputStream(java.nio.file.Path path, java.nio.file.OpenOption... options)
    notExists(java.nio.file.Path path, java.nio.file.LinkOption... options)
    probeContentType(java.nio.file.Path path)
    readAllBytes(java.nio.file.Path path)
    readAllLines(java.nio.file.Path path)
    readAllLines(java.nio.file.Path path, java.nio.charset.Charset cs)
    <A> readAttributes(java.nio.file.Path path, java.lang.Class<A> type, java.nio.file.LinkOption... options)
    readAttributes(java.nio.file.Path path, java.lang.String attributes, java.nio.file.LinkOption... options)
    readSymbolicLink(java.nio.file.Path link)
    setAttribute(java.nio.file.Path path, java.lang.String attribute, java.lang.Object value, java.nio.file.LinkOption... options)
    setLastModifiedTime(java.nio.file.Path path, java.nio.file.attribute.FileTime time)
    setOwner(java.nio.file.Path path, java.nio.file.attribute.UserPrincipal owner)
    setPosixFilePermissions(java.nio.file.Path path, java.util.Set<java.nio.file.attribute.PosixFilePermission> perms)
    size(java.nio.file.Path path)
    walk(java.nio.file.Path start, int maxDepth, java.nio.file.FileVisitOption... options)
    walk(java.nio.file.Path start, java.nio.file.FileVisitOption... options)
    walkFileTree(java.nio.file.Path start, java.nio.file.FileVisitor<? super java.nio.file.Path> visitor)
    walkFileTree(java.nio.file.Path start, java.util.Set<java.nio.file.FileVisitOption> options, int maxDepth, java.nio.file.FileVisitor<? super java.nio.file.Path> visitor)
    write(java.nio.file.Path path, byte[] bytes, java.nio.file.OpenOption... options)
    write(java.nio.file.Path path, java.lang.Iterable<? extends java.lang.CharSequence> lines, java.nio.charset.Charset cs, java.nio.file.OpenOption... options)
    write(java.nio.file.Path path, java.lang.Iterable<? extends java.lang.CharSequence> lines, java.nio.file.OpenOption... options)
  class FileStore
    getAttribute(java.lang.String attribute)
    <V> getFileStoreAttributeView(java.lang.Class<V> type)
    supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView> type)
    supportsFileAttributeView(java.lang.String name)
  class FileSystem
    getPath(java.lang.String first, java.lang.String... more)
    getPathMatcher(java.lang.String syntaxAndPattern)
  class FileSystemAlreadyExistsException
    #ctor(java.lang.String msg)
  class FileSystemException
    #ctor(java.lang.String file)
    #ctor(java.lang.String file, java.lang.String other, java.lang.String reason)
  class FileSystemLoopException
    #ctor(java.lang.String file)
  class FileSystemNotFoundException
    #ctor(java.lang.String msg)
  class FileSystems
    getFileSystem(java.net.URI uri)
    newFileSystem(java.net.URI uri, java.util.Map<java.lang.String,?> env)
    newFileSystem(java.net.URI uri, java.util.Map<java.lang.String,?> env, java.lang.ClassLoader loader)
    newFileSystem(java.nio.file.Path path, java.lang.ClassLoader loader)
  class FileVisitOption
    valueOf(java.lang.String name)
  interface FileVisitor<T>
    postVisitDirectory(T dir, java.io.IOException exc)
    preVisitDirectory(T dir, java.nio.file.attribute.BasicFileAttributes attrs)
    visitFile(T file, java.nio.file.attribute.BasicFileAttributes attrs)
    visitFileFailed(T file, java.io.IOException exc)
  class FileVisitResult
    valueOf(java.lang.String name)
  class InvalidPathException
    #ctor(java.lang.String input, java.lang.String reason)
    #ctor(java.lang.String input, java.lang.String reason, int index)
  class LinkOption
    valueOf(java.lang.String name)
  class LinkPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class NoSuchFileException
    #ctor(java.lang.String file)
    #ctor(java.lang.String file, java.lang.String other, java.lang.String reason)
  class NotDirectoryException
    #ctor(java.lang.String file)
  class NotLinkException
    #ctor(java.lang.String file)
    #ctor(java.lang.String file, java.lang.String other, java.lang.String reason)
  interface Path
    compareTo(java.nio.file.Path other)
    endsWith(java.lang.String other)
    endsWith(java.nio.file.Path other)
    equals(java.lang.Object other)
    getName(int index)
    register(java.nio.file.WatchService watcher, java.nio.file.WatchEvent.Kind<?>... events)
    register(java.nio.file.WatchService watcher, java.nio.file.WatchEvent.Kind<?>[] events, java.nio.file.WatchEvent.Modifier... modifiers)
    relativize(java.nio.file.Path other)
    resolve(java.lang.String other)
    resolve(java.nio.file.Path other)
    resolveSibling(java.lang.String other)
    resolveSibling(java.nio.file.Path other)
    startsWith(java.lang.String other)
    startsWith(java.nio.file.Path other)
    subpath(int beginIndex, int endIndex)
    toRealPath(java.nio.file.LinkOption... options)
  interface PathMatcher
    matches(java.nio.file.Path path)
  class Paths
    get(java.lang.String first, java.lang.String... more)
    get(java.net.URI uri)
  class ProviderMismatchException
    #ctor(java.lang.String msg)
  class ProviderNotFoundException
    #ctor(java.lang.String msg)
  interface SecureDirectoryStream<T>
    deleteDirectory(T path)
    deleteFile(T path)
    <V> getFileAttributeView(java.lang.Class<V> type)
    <V> getFileAttributeView(T path, java.lang.Class<V> type, java.nio.file.LinkOption... options)
    move(T srcpath, java.nio.file.SecureDirectoryStream<T> targetdir, T targetpath)
    newByteChannel(T path, java.util.Set<? extends java.nio.file.OpenOption> options, java.nio.file.attribute.FileAttribute<?>... attrs)
    newDirectoryStream(T path, java.nio.file.LinkOption... options)
  class SimpleFileVisitor<T>
    postVisitDirectory(T dir, java.io.IOException exc)
    preVisitDirectory(T dir, java.nio.file.attribute.BasicFileAttributes attrs)
    visitFile(T file, java.nio.file.attribute.BasicFileAttributes attrs)
    visitFileFailed(T file, java.io.IOException exc)
  class StandardCopyOption
    valueOf(java.lang.String name)
  class StandardOpenOption
    valueOf(java.lang.String name)
  interface Watchable
    register(java.nio.file.WatchService watcher, java.nio.file.WatchEvent.Kind<?>... events)
    register(java.nio.file.WatchService watcher, java.nio.file.WatchEvent.Kind<?>[] events, java.nio.file.WatchEvent.Modifier... modifiers)
  interface WatchService
    poll(long timeout, java.util.concurrent.TimeUnit unit)

package java.nio.file.attribute
;---------------------------------------
  class AclEntry
    equals(java.lang.Object ob)
    newBuilder(java.nio.file.attribute.AclEntry entry)
  class AclEntry.Builder
    setFlags(java.nio.file.attribute.AclEntryFlag... flags)
    setFlags(java.util.Set<java.nio.file.attribute.AclEntryFlag> flags)
    setPermissions(java.nio.file.attribute.AclEntryPermission... perms)
    setPermissions(java.util.Set<java.nio.file.attribute.AclEntryPermission> perms)
    setPrincipal(java.nio.file.attribute.UserPrincipal who)
    setType(java.nio.file.attribute.AclEntryType type)
  class AclEntryFlag
    valueOf(java.lang.String name)
  class AclEntryPermission
    valueOf(java.lang.String name)
  class AclEntryType
    valueOf(java.lang.String name)
  interface AclFileAttributeView
    setAcl(java.util.List<java.nio.file.attribute.AclEntry> acl)
  interface BasicFileAttributeView
    setTimes(java.nio.file.attribute.FileTime lastModifiedTime, java.nio.file.attribute.FileTime lastAccessTime, java.nio.file.attribute.FileTime createTime)
  interface DosFileAttributeView
    setArchive(boolean value)
    setHidden(boolean value)
    setReadOnly(boolean value)
    setSystem(boolean value)
  interface FileOwnerAttributeView
    setOwner(java.nio.file.attribute.UserPrincipal owner)
  class FileTime
    compareTo(java.nio.file.attribute.FileTime other)
    equals(java.lang.Object obj)
    from(java.time.Instant instant)
    from(long value, java.util.concurrent.TimeUnit unit)
    fromMillis(long value)
    to(java.util.concurrent.TimeUnit unit)
  interface PosixFileAttributeView
    setGroup(java.nio.file.attribute.GroupPrincipal group)
    setPermissions(java.util.Set<java.nio.file.attribute.PosixFilePermission> perms)
  class PosixFilePermission
    valueOf(java.lang.String name)
  class PosixFilePermissions
    asFileAttribute(java.util.Set<java.nio.file.attribute.PosixFilePermission> perms)
    fromString(java.lang.String perms)
    toString(java.util.Set<java.nio.file.attribute.PosixFilePermission> perms)
  interface UserDefinedFileAttributeView
    delete(java.lang.String name)
    read(java.lang.String name, java.nio.ByteBuffer dst)
    size(java.lang.String name)
    write(java.lang.String name, java.nio.ByteBuffer src)
  class UserPrincipalLookupService
    lookupPrincipalByGroupName(java.lang.String group)
    lookupPrincipalByName(java.lang.String name)
  class UserPrincipalNotFoundException
    #ctor(java.lang.String name)

package java.nio.file.spi
;---------------------------------------
  class FileSystemProvider
    checkAccess(java.nio.file.Path path, java.nio.file.AccessMode... modes)
    copy(java.nio.file.Path source, java.nio.file.Path target, java.nio.file.CopyOption... options)
    createDirectory(java.nio.file.Path dir, java.nio.file.attribute.FileAttribute<?>... attrs)
    createLink(java.nio.file.Path link, java.nio.file.Path existing)
    createSymbolicLink(java.nio.file.Path link, java.nio.file.Path target, java.nio.file.attribute.FileAttribute<?>... attrs)
    delete(java.nio.file.Path path)
    deleteIfExists(java.nio.file.Path path)
    <V> getFileAttributeView(java.nio.file.Path path, java.lang.Class<V> type, java.nio.file.LinkOption... options)
    getFileStore(java.nio.file.Path path)
    getFileSystem(java.net.URI uri)
    getPath(java.net.URI uri)
    isHidden(java.nio.file.Path path)
    isSameFile(java.nio.file.Path path, java.nio.file.Path path2)
    move(java.nio.file.Path source, java.nio.file.Path target, java.nio.file.CopyOption... options)
    newAsynchronousFileChannel(java.nio.file.Path path, java.util.Set<? extends java.nio.file.OpenOption> options, java.util.concurrent.ExecutorService executor, java.nio.file.attribute.FileAttribute<?>... attrs)
    newByteChannel(java.nio.file.Path path, java.util.Set<? extends java.nio.file.OpenOption> options, java.nio.file.attribute.FileAttribute<?>... attrs)
    newDirectoryStream(java.nio.file.Path dir, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path> filter)
    newFileChannel(java.nio.file.Path path, java.util.Set<? extends java.nio.file.OpenOption> options, java.nio.file.attribute.FileAttribute<?>... attrs)
    newFileSystem(java.net.URI uri, java.util.Map<java.lang.String,?> env)
    newFileSystem(java.nio.file.Path path, java.util.Map<java.lang.String,?> env)
    newInputStream(java.nio.file.Path path, java.nio.file.OpenOption... options)
    newOutputStream(java.nio.file.Path path, java.nio.file.OpenOption... options)
    <A> readAttributes(java.nio.file.Path path, java.lang.Class<A> type, java.nio.file.LinkOption... options)
    readAttributes(java.nio.file.Path path, java.lang.String attributes, java.nio.file.LinkOption... options)
    readSymbolicLink(java.nio.file.Path link)
    setAttribute(java.nio.file.Path path, java.lang.String attribute, java.lang.Object value, java.nio.file.LinkOption... options)
  class FileTypeDetector
    probeContentType(java.nio.file.Path path)

package java.security
;---------------------------------------
  class AccessControlContext
    #ctor(java.security.AccessControlContext acc, java.security.DomainCombiner combiner)
    #ctor(java.security.ProtectionDomain[] context)
    checkPermission(java.security.Permission perm)
  class AccessControlException
    #ctor(java.lang.String s)
    #ctor(java.lang.String s, java.security.Permission p)
  class AccessController
    checkPermission(java.security.Permission perm)
    <T> doPrivileged(java.security.PrivilegedAction<T> action)
    <T> doPrivileged(java.security.PrivilegedAction<T> action, java.security.AccessControlContext context)
    <T> doPrivileged(java.security.PrivilegedExceptionAction<T> action)
    <T> doPrivileged(java.security.PrivilegedExceptionAction<T> action, java.security.AccessControlContext context)
    <T> doPrivilegedWithCombiner(java.security.PrivilegedAction<T> action)
    <T> doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T> action)
  interface AlgorithmConstraints
    permits(java.util.Set<java.security.CryptoPrimitive> primitives, java.lang.String algorithm, java.security.AlgorithmParameters parameters)
    permits(java.util.Set<java.security.CryptoPrimitive> primitives, java.lang.String algorithm, java.security.Key key, java.security.AlgorithmParameters parameters)
    permits(java.util.Set<java.security.CryptoPrimitive> primitives, java.security.Key key)
  class AlgorithmParameterGenerator
    #ctor(java.security.AlgorithmParameterGeneratorSpi paramGenSpi, java.security.Provider provider, java.lang.String algorithm)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    init(int size)
    init(int size, java.security.SecureRandom random)
    init(java.security.spec.AlgorithmParameterSpec genParamSpec)
    init(java.security.spec.AlgorithmParameterSpec genParamSpec, java.security.SecureRandom random)
  class AlgorithmParameterGeneratorSpi
    engineInit(int size, java.security.SecureRandom random)
    engineInit(java.security.spec.AlgorithmParameterSpec genParamSpec, java.security.SecureRandom random)
  class AlgorithmParameters
    #ctor(java.security.AlgorithmParametersSpi paramSpi, java.security.Provider provider, java.lang.String algorithm)
    getEncoded(java.lang.String format)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    <T> getParameterSpec(java.lang.Class<T> paramSpec)
    init(byte[] params)
    init(byte[] params, java.lang.String format)
    init(java.security.spec.AlgorithmParameterSpec paramSpec)
  class AlgorithmParametersSpi
    engineGetEncoded(java.lang.String format)
    <T> engineGetParameterSpec(java.lang.Class<T> paramSpec)
    engineInit(byte[] params)
    engineInit(byte[] params, java.lang.String format)
    engineInit(java.security.spec.AlgorithmParameterSpec paramSpec)
  class AllPermission
    #ctor(java.lang.String name, java.lang.String actions)
    implies(java.security.Permission p)
  class AuthProvider
    #ctor(java.lang.String name, double version, java.lang.String info)
    login(javax.security.auth.Subject subject, javax.security.auth.callback.CallbackHandler handler)
    setCallbackHandler(javax.security.auth.callback.CallbackHandler handler)
  class BasicPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
    implies(java.security.Permission p)
  interface Certificate
    decode(java.io.InputStream stream)
    encode(java.io.OutputStream stream)
    toString(boolean detailed)
  class CodeSigner
    #ctor(java.security.cert.CertPath signerCertPath, java.security.Timestamp timestamp)
    equals(java.lang.Object obj)
  class CodeSource
    #ctor(java.net.URL url, java.security.cert.Certificate[] certs)
    #ctor(java.net.URL url, java.security.CodeSigner[] signers)
    implies(java.security.CodeSource codesource)
  class CryptoPrimitive
    valueOf(java.lang.String name)
  class DigestException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class DigestInputStream
    #ctor(java.io.InputStream stream, java.security.MessageDigest digest)
    on(boolean on)
    read(byte[] b, int off, int len)
    setMessageDigest(java.security.MessageDigest digest)
  class DigestOutputStream
    #ctor(java.io.OutputStream stream, java.security.MessageDigest digest)
    on(boolean on)
    setMessageDigest(java.security.MessageDigest digest)
    write(byte[] b, int off, int len)
    write(int b)
  interface DomainCombiner
    combine(java.security.ProtectionDomain[] currentDomains, java.security.ProtectionDomain[] assignedDomains)
  class DomainLoadStoreParameter
    #ctor(java.net.URI configuration, java.util.Map<java.lang.String,java.security.KeyStore.ProtectionParameter> protectionParams)
  class GeneralSecurityException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface Guard
    checkGuard(java.lang.Object object)
  class GuardedObject
    #ctor(java.lang.Object object, java.security.Guard guard)
  class Identity
    addCertificate(java.security.Certificate certificate)
    equals(java.lang.Object identity)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.security.IdentityScope scope)
    identityEquals(java.security.Identity identity)
    removeCertificate(java.security.Certificate certificate)
    setInfo(java.lang.String info)
    setPublicKey(java.security.PublicKey key)
    toString(boolean detailed)
  class IdentityScope
    addIdentity(java.security.Identity identity)
    getIdentity(java.lang.String name)
    getIdentity(java.security.Principal principal)
    getIdentity(java.security.PublicKey key)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.security.IdentityScope scope)
    removeIdentity(java.security.Identity identity)
    setSystemScope(java.security.IdentityScope scope)
  class InvalidAlgorithmParameterException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class InvalidKeyException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class InvalidParameterException
    #ctor(java.lang.String msg)
  class KeyException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class KeyFactory
    generatePrivate(java.security.spec.KeySpec keySpec)
    generatePublic(java.security.spec.KeySpec keySpec)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    <T> getKeySpec(java.security.Key key, java.lang.Class<T> keySpec)
    #ctor(java.security.KeyFactorySpi keyFacSpi, java.security.Provider provider, java.lang.String algorithm)
    translateKey(java.security.Key key)
  class KeyFactorySpi
    engineGeneratePrivate(java.security.spec.KeySpec keySpec)
    engineGeneratePublic(java.security.spec.KeySpec keySpec)
    <T> engineGetKeySpec(java.security.Key key, java.lang.Class<T> keySpec)
    engineTranslateKey(java.security.Key key)
  class KeyManagementException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class KeyPair
    #ctor(java.security.PublicKey publicKey, java.security.PrivateKey privateKey)
  class KeyPairGenerator
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    initialize(int keysize)
    initialize(int keysize, java.security.SecureRandom random)
    initialize(java.security.spec.AlgorithmParameterSpec params)
    initialize(java.security.spec.AlgorithmParameterSpec params, java.security.SecureRandom random)
    #ctor(java.lang.String algorithm)
  class KeyPairGeneratorSpi
    initialize(int keysize, java.security.SecureRandom random)
    initialize(java.security.spec.AlgorithmParameterSpec params, java.security.SecureRandom random)
  class KeyRep
    #ctor(java.security.KeyRep.Type type, java.lang.String algorithm, java.lang.String format, byte[] encoded)
  class KeyRep.Type
    valueOf(java.lang.String name)
  class KeyStore
    containsAlias(java.lang.String alias)
    deleteEntry(java.lang.String alias)
    entryInstanceOf(java.lang.String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass)
    getCertificate(java.lang.String alias)
    getCertificateAlias(java.security.cert.Certificate cert)
    getCertificateChain(java.lang.String alias)
    getCreationDate(java.lang.String alias)
    getEntry(java.lang.String alias, java.security.KeyStore.ProtectionParameter protParam)
    getInstance(java.lang.String type)
    getInstance(java.lang.String type, java.lang.String provider)
    getInstance(java.lang.String type, java.security.Provider provider)
    getKey(java.lang.String alias, char[] password)
    isCertificateEntry(java.lang.String alias)
    isKeyEntry(java.lang.String alias)
    #ctor(java.security.KeyStoreSpi keyStoreSpi, java.security.Provider provider, java.lang.String type)
    load(java.io.InputStream stream, char[] password)
    load(java.security.KeyStore.LoadStoreParameter param)
    setCertificateEntry(java.lang.String alias, java.security.cert.Certificate cert)
    setEntry(java.lang.String alias, java.security.KeyStore.Entry entry, java.security.KeyStore.ProtectionParameter protParam)
    setKeyEntry(java.lang.String alias, byte[] key, java.security.cert.Certificate[] chain)
    setKeyEntry(java.lang.String alias, java.security.Key key, char[] password, java.security.cert.Certificate[] chain)
    store(java.io.OutputStream stream, char[] password)
    store(java.security.KeyStore.LoadStoreParameter param)
  class KeyStore.Builder
    getProtectionParameter(java.lang.String alias)
    newInstance(java.lang.String type, java.security.Provider provider, java.io.File file, java.security.KeyStore.ProtectionParameter protection)
    newInstance(java.lang.String type, java.security.Provider provider, java.security.KeyStore.ProtectionParameter protection)
    newInstance(java.security.KeyStore keyStore, java.security.KeyStore.ProtectionParameter protectionParameter)
  class KeyStore.CallbackHandlerProtection
    #ctor(javax.security.auth.callback.CallbackHandler handler)
  class KeyStore.PasswordProtection
    #ctor(char[] password)
    #ctor(char[] password, java.lang.String protectionAlgorithm, java.security.spec.AlgorithmParameterSpec protectionParameters)
  class KeyStore.PrivateKeyEntry
    #ctor(java.security.PrivateKey privateKey, java.security.cert.Certificate[] chain)
    #ctor(java.security.PrivateKey privateKey, java.security.cert.Certificate[] chain, java.util.Set<java.security.KeyStore.Entry.Attribute> attributes)
  class KeyStore.SecretKeyEntry
    #ctor(javax.crypto.SecretKey secretKey)
    #ctor(javax.crypto.SecretKey secretKey, java.util.Set<java.security.KeyStore.Entry.Attribute> attributes)
  class KeyStore.TrustedCertificateEntry
    #ctor(java.security.cert.Certificate trustedCert)
    #ctor(java.security.cert.Certificate trustedCert, java.util.Set<java.security.KeyStore.Entry.Attribute> attributes)
  class KeyStoreException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class KeyStoreSpi
    engineContainsAlias(java.lang.String alias)
    engineDeleteEntry(java.lang.String alias)
    engineEntryInstanceOf(java.lang.String alias, java.lang.Class<? extends java.security.KeyStore.Entry> entryClass)
    engineGetCertificate(java.lang.String alias)
    engineGetCertificateAlias(java.security.cert.Certificate cert)
    engineGetCertificateChain(java.lang.String alias)
    engineGetCreationDate(java.lang.String alias)
    engineGetEntry(java.lang.String alias, java.security.KeyStore.ProtectionParameter protParam)
    engineGetKey(java.lang.String alias, char[] password)
    engineIsCertificateEntry(java.lang.String alias)
    engineIsKeyEntry(java.lang.String alias)
    engineLoad(java.io.InputStream stream, char[] password)
    engineLoad(java.security.KeyStore.LoadStoreParameter param)
    engineSetCertificateEntry(java.lang.String alias, java.security.cert.Certificate cert)
    engineSetEntry(java.lang.String alias, java.security.KeyStore.Entry entry, java.security.KeyStore.ProtectionParameter protParam)
    engineSetKeyEntry(java.lang.String alias, byte[] key, java.security.cert.Certificate[] chain)
    engineSetKeyEntry(java.lang.String alias, java.security.Key key, char[] password, java.security.cert.Certificate[] chain)
    engineStore(java.io.OutputStream stream, char[] password)
    engineStore(java.security.KeyStore.LoadStoreParameter param)
  class MessageDigest
    digest(byte[] input)
    digest(byte[] buf, int offset, int len)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    isEqual(byte[] digesta, byte[] digestb)
    #ctor(java.lang.String algorithm)
    update(byte input)
    update(byte[] input)
    update(byte[] input, int offset, int len)
    update(java.nio.ByteBuffer input)
  class MessageDigestSpi
    engineDigest(byte[] buf, int offset, int len)
    engineUpdate(byte input)
    engineUpdate(byte[] input, int offset, int len)
    engineUpdate(java.nio.ByteBuffer input)
  class NoSuchAlgorithmException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class NoSuchProviderException
    #ctor(java.lang.String msg)
  class Permission
    checkGuard(java.lang.Object object)
    implies(java.security.Permission permission)
    #ctor(java.lang.String name)
  class PermissionCollection
    add(java.security.Permission permission)
    implies(java.security.Permission permission)
  class Permissions
    add(java.security.Permission permission)
    implies(java.security.Permission permission)
  class PKCS12Attribute
    equals(java.lang.Object obj)
    #ctor(byte[] encoded)
    #ctor(java.lang.String name, java.lang.String value)
  class Policy
    getInstance(java.lang.String type, java.security.Policy.Parameters params)
    getInstance(java.lang.String type, java.security.Policy.Parameters params, java.lang.String provider)
    getInstance(java.lang.String type, java.security.Policy.Parameters params, java.security.Provider provider)
    getPermissions(java.security.CodeSource codesource)
    getPermissions(java.security.ProtectionDomain domain)
    implies(java.security.ProtectionDomain domain, java.security.Permission permission)
    setPolicy(java.security.Policy p)
  class PolicySpi
    engineGetPermissions(java.security.CodeSource codesource)
    engineGetPermissions(java.security.ProtectionDomain domain)
    engineImplies(java.security.ProtectionDomain domain, java.security.Permission permission)
  interface Principal
    equals(java.lang.Object another)
    implies(javax.security.auth.Subject subject)
  class PrivilegedActionException
    #ctor(java.lang.Exception exception)
  class ProtectionDomain
    implies(java.security.Permission permission)
    #ctor(java.security.CodeSource codesource, java.security.PermissionCollection permissions)
    #ctor(java.security.CodeSource codesource, java.security.PermissionCollection permissions, java.lang.ClassLoader classloader, java.security.Principal[] principals)
  class Provider
    compute(java.lang.Object key, java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object> remappingFunction)
    computeIfAbsent(java.lang.Object key, java.util.function.Function<? super java.lang.Object,? extends java.lang.Object> mappingFunction)
    computeIfPresent(java.lang.Object key, java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object> remappingFunction)
    forEach(java.util.function.BiConsumer<? super java.lang.Object,? super java.lang.Object> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, java.lang.Object defaultValue)
    getProperty(java.lang.String key)
    getService(java.lang.String type, java.lang.String algorithm)
    load(java.io.InputStream inStream)
    merge(java.lang.Object key, java.lang.Object value, java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object> remappingFunction)
    #ctor(java.lang.String name, double version, java.lang.String info)
    put(java.lang.Object key, java.lang.Object value)
    putAll(java.util.Map<?,?> t)
    putIfAbsent(java.lang.Object key, java.lang.Object value)
    putService(java.security.Provider.Service s)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    removeService(java.security.Provider.Service s)
    replace(java.lang.Object key, java.lang.Object value)
    replace(java.lang.Object key, java.lang.Object oldValue, java.lang.Object newValue)
    replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object> function)
  class Provider.Service
    getAttribute(java.lang.String name)
    newInstance(java.lang.Object constructorParameter)
    #ctor(java.security.Provider provider, java.lang.String type, java.lang.String algorithm, java.lang.String className, java.util.List<java.lang.String> aliases, java.util.Map<java.lang.String,java.lang.String> attributes)
    supportsParameter(java.lang.Object parameter)
  class ProviderException
    #ctor(java.lang.String s)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SecureClassLoader
    defineClass(java.lang.String name, byte[] b, int off, int len, java.security.CodeSource cs)
    defineClass(java.lang.String name, java.nio.ByteBuffer b, java.security.CodeSource cs)
    getPermissions(java.security.CodeSource codesource)
    #ctor(java.lang.ClassLoader parent)
  class SecureRandom
    generateSeed(int numBytes)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    getSeed(int numBytes)
    next(int numBits)
    nextBytes(byte[] bytes)
    #ctor(byte[] seed)
    #ctor(java.security.SecureRandomSpi secureRandomSpi, java.security.Provider provider)
    setSeed(byte[] seed)
    setSeed(long seed)
  class SecureRandomSpi
    engineGenerateSeed(int numBytes)
    engineNextBytes(byte[] bytes)
    engineSetSeed(byte[] seed)
  class Security
    addProvider(java.security.Provider provider)
    getAlgorithmProperty(java.lang.String algName, java.lang.String propName)
    getAlgorithms(java.lang.String serviceName)
    getProperty(java.lang.String key)
    getProvider(java.lang.String name)
    getProviders(java.lang.String filter)
    getProviders(java.util.Map<java.lang.String,java.lang.String> filter)
    insertProviderAt(java.security.Provider provider, int position)
    removeProvider(java.lang.String name)
    setProperty(java.lang.String key, java.lang.String datum)
  class SecurityPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class Signature
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    getParameter(java.lang.String param)
    initSign(java.security.PrivateKey privateKey)
    initSign(java.security.PrivateKey privateKey, java.security.SecureRandom random)
    initVerify(java.security.cert.Certificate certificate)
    initVerify(java.security.PublicKey publicKey)
    setParameter(java.lang.String param, java.lang.Object value)
    setParameter(java.security.spec.AlgorithmParameterSpec params)
    sign(byte[] outbuf, int offset, int len)
    #ctor(java.lang.String algorithm)
    update(byte b)
    update(byte[] data)
    update(byte[] data, int off, int len)
    update(java.nio.ByteBuffer data)
    verify(byte[] signature)
    verify(byte[] signature, int offset, int length)
  class SignatureException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SignatureSpi
    engineGetParameter(java.lang.String param)
    engineInitSign(java.security.PrivateKey privateKey)
    engineInitSign(java.security.PrivateKey privateKey, java.security.SecureRandom random)
    engineInitVerify(java.security.PublicKey publicKey)
    engineSetParameter(java.lang.String param, java.lang.Object value)
    engineSetParameter(java.security.spec.AlgorithmParameterSpec params)
    engineSign(byte[] outbuf, int offset, int len)
    engineUpdate(byte b)
    engineUpdate(byte[] b, int off, int len)
    engineUpdate(java.nio.ByteBuffer input)
    engineVerify(byte[] sigBytes)
    engineVerify(byte[] sigBytes, int offset, int length)
  class SignedObject
    #ctor(java.io.Serializable object, java.security.PrivateKey signingKey, java.security.Signature signingEngine)
    verify(java.security.PublicKey verificationKey, java.security.Signature verificationEngine)
  class Signer
    setKeyPair(java.security.KeyPair pair)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.security.IdentityScope scope)
  class Timestamp
    equals(java.lang.Object obj)
    #ctor(java.util.Date timestamp, java.security.cert.CertPath signerCertPath)
  class UnrecoverableEntryException
    #ctor(java.lang.String msg)
  class UnrecoverableKeyException
    #ctor(java.lang.String msg)
  class UnresolvedPermission
    implies(java.security.Permission p)
    #ctor(java.lang.String type, java.lang.String name, java.lang.String actions, java.security.cert.Certificate[] certs)

package java.security.acl
;---------------------------------------
  interface Acl
    addEntry(java.security.Principal caller, java.security.acl.AclEntry entry)
    checkPermission(java.security.Principal principal, java.security.acl.Permission permission)
    getPermissions(java.security.Principal user)
    removeEntry(java.security.Principal caller, java.security.acl.AclEntry entry)
    setName(java.security.Principal caller, java.lang.String name)
  interface AclEntry
    addPermission(java.security.acl.Permission permission)
    checkPermission(java.security.acl.Permission permission)
    removePermission(java.security.acl.Permission permission)
    setPrincipal(java.security.Principal user)
  interface Group
    addMember(java.security.Principal user)
    isMember(java.security.Principal member)
    removeMember(java.security.Principal user)
  interface Owner
    addOwner(java.security.Principal caller, java.security.Principal owner)
    deleteOwner(java.security.Principal caller, java.security.Principal owner)
    isOwner(java.security.Principal owner)

package java.security.cert
;---------------------------------------
  class Certificate
    #ctor(java.lang.String type)
    equals(java.lang.Object other)
    verify(java.security.PublicKey key)
    verify(java.security.PublicKey key, java.lang.String sigProvider)
    verify(java.security.PublicKey key, java.security.Provider sigProvider)
  class Certificate.CertificateRep
    #ctor(java.lang.String type, byte[] data)
  class CertificateEncodingException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CertificateException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CertificateExpiredException
    #ctor(java.lang.String message)
  class CertificateFactory
    #ctor(java.security.cert.CertificateFactorySpi certFacSpi, java.security.Provider provider, java.lang.String type)
    generateCertificate(java.io.InputStream inStream)
    generateCertificates(java.io.InputStream inStream)
    generateCertPath(java.io.InputStream inStream)
    generateCertPath(java.io.InputStream inStream, java.lang.String encoding)
    generateCertPath(java.util.List<? extends java.security.cert.Certificate> certificates)
    generateCRL(java.io.InputStream inStream)
    generateCRLs(java.io.InputStream inStream)
    getInstance(java.lang.String type)
    getInstance(java.lang.String type, java.lang.String provider)
    getInstance(java.lang.String type, java.security.Provider provider)
  class CertificateFactorySpi
    engineGenerateCertificate(java.io.InputStream inStream)
    engineGenerateCertificates(java.io.InputStream inStream)
    engineGenerateCertPath(java.io.InputStream inStream)
    engineGenerateCertPath(java.io.InputStream inStream, java.lang.String encoding)
    engineGenerateCertPath(java.util.List<? extends java.security.cert.Certificate> certificates)
    engineGenerateCRL(java.io.InputStream inStream)
    engineGenerateCRLs(java.io.InputStream inStream)
  class CertificateNotYetValidException
    #ctor(java.lang.String message)
  class CertificateParsingException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CertificateRevokedException
    #ctor(java.util.Date revocationDate, java.security.cert.CRLReason reason, javax.security.auth.x500.X500Principal authority, java.util.Map<java.lang.String,java.security.cert.Extension> extensions)
  class CertPath
    #ctor(java.lang.String type)
    equals(java.lang.Object other)
    getEncoded(java.lang.String encoding)
  class CertPath.CertPathRep
    #ctor(java.lang.String type, byte[] data)
  class CertPathBuilder
    build(java.security.cert.CertPathParameters params)
    #ctor(java.security.cert.CertPathBuilderSpi builderSpi, java.security.Provider provider, java.lang.String algorithm)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
  class CertPathBuilderException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String msg, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CertPathBuilderSpi
    engineBuild(java.security.cert.CertPathParameters params)
  interface CertPathChecker
    check(java.security.cert.Certificate cert)
    init(boolean forward)
  class CertPathValidator
    #ctor(java.security.cert.CertPathValidatorSpi validatorSpi, java.security.Provider provider, java.lang.String algorithm)
    getInstance(java.lang.String algorithm)
    getInstance(java.lang.String algorithm, java.lang.String provider)
    getInstance(java.lang.String algorithm, java.security.Provider provider)
    validate(java.security.cert.CertPath certPath, java.security.cert.CertPathParameters params)
  class CertPathValidatorException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String msg, java.lang.Throwable cause)
    #ctor(java.lang.String msg, java.lang.Throwable cause, java.security.cert.CertPath certPath, int index)
    #ctor(java.lang.String msg, java.lang.Throwable cause, java.security.cert.CertPath certPath, int index, java.security.cert.CertPathValidatorException.Reason reason)
    #ctor(java.lang.Throwable cause)
  class CertPathValidatorException.BasicReason
    valueOf(java.lang.String name)
  class CertPathValidatorSpi
    engineValidate(java.security.cert.CertPath certPath, java.security.cert.CertPathParameters params)
  interface CertSelector
    match(java.security.cert.Certificate cert)
  class CertStore
    #ctor(java.security.cert.CertStoreSpi storeSpi, java.security.Provider provider, java.lang.String type, java.security.cert.CertStoreParameters params)
    getCertificates(java.security.cert.CertSelector selector)
    getCRLs(java.security.cert.CRLSelector selector)
    getInstance(java.lang.String type, java.security.cert.CertStoreParameters params)
    getInstance(java.lang.String type, java.security.cert.CertStoreParameters params, java.lang.String provider)
    getInstance(java.lang.String type, java.security.cert.CertStoreParameters params, java.security.Provider provider)
  class CertStoreException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String msg, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CertStoreSpi
    #ctor(java.security.cert.CertStoreParameters params)
    engineGetCertificates(java.security.cert.CertSelector selector)
    engineGetCRLs(java.security.cert.CRLSelector selector)
  class CollectionCertStoreParameters
    #ctor(java.util.Collection<?> collection)
  class CRL
    #ctor(java.lang.String type)
    isRevoked(java.security.cert.Certificate cert)
  class CRLException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class CRLReason
    valueOf(java.lang.String name)
  interface CRLSelector
    match(java.security.cert.CRL crl)
  interface Extension
    encode(java.io.OutputStream out)
  class LDAPCertStoreParameters
    #ctor(java.lang.String serverName)
    #ctor(java.lang.String serverName, int port)
  class PKIXBuilderParameters
    #ctor(java.security.KeyStore keystore, java.security.cert.CertSelector targetConstraints)
    #ctor(java.util.Set<java.security.cert.TrustAnchor> trustAnchors, java.security.cert.CertSelector targetConstraints)
    setMaxPathLength(int maxPathLength)
  class PKIXCertPathBuilderResult
    #ctor(java.security.cert.CertPath certPath, java.security.cert.TrustAnchor trustAnchor, java.security.cert.PolicyNode policyTree, java.security.PublicKey subjectPublicKey)
  class PKIXCertPathChecker
    check(java.security.cert.Certificate cert)
    check(java.security.cert.Certificate cert, java.util.Collection<java.lang.String> unresolvedCritExts)
    init(boolean forward)
  class PKIXCertPathValidatorResult
    #ctor(java.security.cert.TrustAnchor trustAnchor, java.security.cert.PolicyNode policyTree, java.security.PublicKey subjectPublicKey)
  class PKIXParameters
    addCertPathChecker(java.security.cert.PKIXCertPathChecker checker)
    addCertStore(java.security.cert.CertStore store)
    #ctor(java.security.KeyStore keystore)
    #ctor(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
    setAnyPolicyInhibited(boolean val)
    setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker> checkers)
    setCertStores(java.util.List<java.security.cert.CertStore> stores)
    setDate(java.util.Date date)
    setExplicitPolicyRequired(boolean val)
    setInitialPolicies(java.util.Set<java.lang.String> initialPolicies)
    setPolicyMappingInhibited(boolean val)
    setPolicyQualifiersRejected(boolean qualifiersRejected)
    setRevocationEnabled(boolean val)
    setSigProvider(java.lang.String sigProvider)
    setTargetCertConstraints(java.security.cert.CertSelector selector)
    setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
  class PKIXReason
    valueOf(java.lang.String name)
  class PKIXRevocationChecker
    setOcspExtensions(java.util.List<java.security.cert.Extension> extensions)
    setOcspResponder(java.net.URI uri)
    setOcspResponderCert(java.security.cert.X509Certificate cert)
    setOcspResponses(java.util.Map<java.security.cert.X509Certificate,byte[]> responses)
    setOptions(java.util.Set<java.security.cert.PKIXRevocationChecker.Option> options)
  class PKIXRevocationChecker.Option
    valueOf(java.lang.String name)
  class PolicyQualifierInfo
    #ctor(byte[] encoded)
  class TrustAnchor
    #ctor(java.lang.String caName, java.security.PublicKey pubKey, byte[] nameConstraints)
    #ctor(java.security.cert.X509Certificate trustedCert, byte[] nameConstraints)
    #ctor(javax.security.auth.x500.X500Principal caPrincipal, java.security.PublicKey pubKey, byte[] nameConstraints)
  class X509Certificate
    checkValidity(java.util.Date date)
    verify(java.security.PublicKey key, java.security.Provider sigProvider)
  class X509CertSelector
    addPathToName(int type, byte[] name)
    addPathToName(int type, java.lang.String name)
    addSubjectAlternativeName(int type, byte[] name)
    addSubjectAlternativeName(int type, java.lang.String name)
    match(java.security.cert.Certificate cert)
    setAuthorityKeyIdentifier(byte[] authorityKeyID)
    setBasicConstraints(int minMaxPathLen)
    setCertificate(java.security.cert.X509Certificate cert)
    setCertificateValid(java.util.Date certValid)
    setExtendedKeyUsage(java.util.Set<java.lang.String> keyPurposeSet)
    setIssuer(byte[] issuerDN)
    setIssuer(java.lang.String issuerDN)
    setIssuer(javax.security.auth.x500.X500Principal issuer)
    setKeyUsage(boolean[] keyUsage)
    setMatchAllSubjectAltNames(boolean matchAllNames)
    setNameConstraints(byte[] bytes)
    setPathToNames(java.util.Collection<java.util.List<?>> names)
    setPolicy(java.util.Set<java.lang.String> certPolicySet)
    setPrivateKeyValid(java.util.Date privateKeyValid)
    setSerialNumber(java.math.BigInteger serial)
    setSubject(byte[] subjectDN)
    setSubject(java.lang.String subjectDN)
    setSubject(javax.security.auth.x500.X500Principal subject)
    setSubjectAlternativeNames(java.util.Collection<java.util.List<?>> names)
    setSubjectKeyIdentifier(byte[] subjectKeyID)
    setSubjectPublicKey(byte[] key)
    setSubjectPublicKey(java.security.PublicKey key)
    setSubjectPublicKeyAlgID(java.lang.String oid)
  class X509CRL
    equals(java.lang.Object other)
    getRevokedCertificate(java.math.BigInteger serialNumber)
    getRevokedCertificate(java.security.cert.X509Certificate certificate)
    verify(java.security.PublicKey key)
    verify(java.security.PublicKey key, java.lang.String sigProvider)
    verify(java.security.PublicKey key, java.security.Provider sigProvider)
  class X509CRLEntry
    equals(java.lang.Object other)
  class X509CRLSelector
    addIssuer(javax.security.auth.x500.X500Principal issuer)
    addIssuerName(byte[] name)
    addIssuerName(java.lang.String name)
    match(java.security.cert.CRL crl)
    setCertificateChecking(java.security.cert.X509Certificate cert)
    setDateAndTime(java.util.Date dateAndTime)
    setIssuerNames(java.util.Collection<?> names)
    setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal> issuers)
    setMaxCRLNumber(java.math.BigInteger maxCRL)
    setMinCRLNumber(java.math.BigInteger minCRL)
  interface X509Extension
    getExtensionValue(java.lang.String oid)

package java.security.interfaces
;---------------------------------------
  interface DSAKeyPairGenerator
    initialize(int modlen, boolean genParams, java.security.SecureRandom random)
    initialize(java.security.interfaces.DSAParams params, java.security.SecureRandom random)

package java.security.spec
;---------------------------------------
  class DSAParameterSpec
    #ctor(java.math.BigInteger p, java.math.BigInteger q, java.math.BigInteger g)
  class DSAPrivateKeySpec
    #ctor(java.math.BigInteger x, java.math.BigInteger p, java.math.BigInteger q, java.math.BigInteger g)
  class DSAPublicKeySpec
    #ctor(java.math.BigInteger y, java.math.BigInteger p, java.math.BigInteger q, java.math.BigInteger g)
  class ECFieldF2m
    #ctor(int m)
    #ctor(int m, int[] ks)
    #ctor(int m, java.math.BigInteger rp)
    equals(java.lang.Object obj)
  class ECFieldFp
    #ctor(java.math.BigInteger p)
    equals(java.lang.Object obj)
  class ECGenParameterSpec
    #ctor(java.lang.String stdName)
  class ECParameterSpec
    #ctor(java.security.spec.EllipticCurve curve, java.security.spec.ECPoint g, java.math.BigInteger n, int h)
  class ECPoint
    #ctor(java.math.BigInteger x, java.math.BigInteger y)
    equals(java.lang.Object obj)
  class ECPrivateKeySpec
    #ctor(java.math.BigInteger s, java.security.spec.ECParameterSpec params)
  class ECPublicKeySpec
    #ctor(java.security.spec.ECPoint w, java.security.spec.ECParameterSpec params)
  class EllipticCurve
    #ctor(java.security.spec.ECField field, java.math.BigInteger a, java.math.BigInteger b)
    #ctor(java.security.spec.ECField field, java.math.BigInteger a, java.math.BigInteger b, byte[] seed)
    equals(java.lang.Object obj)
  class EncodedKeySpec
    #ctor(byte[] encodedKey)
  class InvalidKeySpecException
    #ctor(java.lang.String msg)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class InvalidParameterSpecException
    #ctor(java.lang.String msg)
  class MGF1ParameterSpec
    #ctor(java.lang.String mdName)
  class PKCS8EncodedKeySpec
    #ctor(byte[] encodedKey)
  class PSSParameterSpec
    #ctor(int saltLen)
    #ctor(java.lang.String mdName, java.lang.String mgfName, java.security.spec.AlgorithmParameterSpec mgfSpec, int saltLen, int trailerField)
  class RSAKeyGenParameterSpec
    #ctor(int keysize, java.math.BigInteger publicExponent)
  class RSAMultiPrimePrivateCrtKeySpec
    #ctor(java.math.BigInteger modulus, java.math.BigInteger publicExponent, java.math.BigInteger privateExponent, java.math.BigInteger primeP, java.math.BigInteger primeQ, java.math.BigInteger primeExponentP, java.math.BigInteger primeExponentQ, java.math.BigInteger crtCoefficient, java.security.spec.RSAOtherPrimeInfo[] otherPrimeInfo)
  class RSAOtherPrimeInfo
    #ctor(java.math.BigInteger prime, java.math.BigInteger primeExponent, java.math.BigInteger crtCoefficient)
  class RSAPrivateCrtKeySpec
    #ctor(java.math.BigInteger modulus, java.math.BigInteger publicExponent, java.math.BigInteger privateExponent, java.math.BigInteger primeP, java.math.BigInteger primeQ, java.math.BigInteger primeExponentP, java.math.BigInteger primeExponentQ, java.math.BigInteger crtCoefficient)
  class RSAPrivateKeySpec
    #ctor(java.math.BigInteger modulus, java.math.BigInteger privateExponent)
  class RSAPublicKeySpec
    #ctor(java.math.BigInteger modulus, java.math.BigInteger publicExponent)
  class X509EncodedKeySpec
    #ctor(byte[] encodedKey)

package java.sql
;---------------------------------------
  interface Array
    getArray(java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getArray(long index, int count)
    getArray(long index, int count, java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getResultSet(java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getResultSet(long index, int count)
    getResultSet(long index, int count, java.util.Map<java.lang.String,java.lang.Class<?>> map)
  class BatchUpdateException
    #ctor(int[] updateCounts)
    #ctor(int[] updateCounts, java.lang.Throwable cause)
    #ctor(java.lang.String reason, int[] updateCounts)
    #ctor(java.lang.String reason, int[] updateCounts, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, int[] updateCounts)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, int[] updateCounts, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, int[] updateCounts)
    #ctor(java.lang.String reason, java.lang.String SQLState, int[] updateCounts, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface Blob
    getBinaryStream(long pos, long length)
    getBytes(long pos, int length)
    position(byte[] pattern, long start)
    position(java.sql.Blob pattern, long start)
    setBinaryStream(long pos)
    setBytes(long pos, byte[] bytes)
    setBytes(long pos, byte[] bytes, int offset, int len)
    truncate(long len)
  interface CallableStatement
    getArray(int parameterIndex)
    getArray(java.lang.String parameterName)
    getBigDecimal(int parameterIndex)
    getBigDecimal(int parameterIndex, int scale)
    getBigDecimal(java.lang.String parameterName)
    getBlob(int parameterIndex)
    getBlob(java.lang.String parameterName)
    getBoolean(int parameterIndex)
    getBoolean(java.lang.String parameterName)
    getByte(int parameterIndex)
    getByte(java.lang.String parameterName)
    getBytes(int parameterIndex)
    getBytes(java.lang.String parameterName)
    getCharacterStream(int parameterIndex)
    getCharacterStream(java.lang.String parameterName)
    getClob(int parameterIndex)
    getClob(java.lang.String parameterName)
    getDate(int parameterIndex)
    getDate(int parameterIndex, java.util.Calendar cal)
    getDate(java.lang.String parameterName)
    getDate(java.lang.String parameterName, java.util.Calendar cal)
    getDouble(int parameterIndex)
    getDouble(java.lang.String parameterName)
    getFloat(int parameterIndex)
    getFloat(java.lang.String parameterName)
    getInt(int parameterIndex)
    getInt(java.lang.String parameterName)
    getLong(int parameterIndex)
    getLong(java.lang.String parameterName)
    getNCharacterStream(int parameterIndex)
    getNCharacterStream(java.lang.String parameterName)
    getNClob(int parameterIndex)
    getNClob(java.lang.String parameterName)
    getNString(int parameterIndex)
    getNString(java.lang.String parameterName)
    getObject(int parameterIndex)
    getObject(int parameterIndex, java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getObject(java.lang.String parameterName)
    getObject(java.lang.String parameterName, java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getRef(int parameterIndex)
    getRef(java.lang.String parameterName)
    getRowId(int parameterIndex)
    getRowId(java.lang.String parameterName)
    getShort(int parameterIndex)
    getShort(java.lang.String parameterName)
    getSQLXML(int parameterIndex)
    getSQLXML(java.lang.String parameterName)
    getString(int parameterIndex)
    getString(java.lang.String parameterName)
    getTime(int parameterIndex)
    getTime(int parameterIndex, java.util.Calendar cal)
    getTime(java.lang.String parameterName)
    getTime(java.lang.String parameterName, java.util.Calendar cal)
    getTimestamp(int parameterIndex)
    getTimestamp(int parameterIndex, java.util.Calendar cal)
    getTimestamp(java.lang.String parameterName)
    getTimestamp(java.lang.String parameterName, java.util.Calendar cal)
    getURL(int parameterIndex)
    getURL(java.lang.String parameterName)
    registerOutParameter(int parameterIndex, int sqlType)
    registerOutParameter(int parameterIndex, int sqlType, int scale)
    registerOutParameter(int parameterIndex, int sqlType, java.lang.String typeName)
    registerOutParameter(java.lang.String parameterName, int sqlType)
    registerOutParameter(java.lang.String parameterName, int sqlType, int scale)
    registerOutParameter(java.lang.String parameterName, int sqlType, java.lang.String typeName)
    setAsciiStream(java.lang.String parameterName, java.io.InputStream x)
    setAsciiStream(java.lang.String parameterName, java.io.InputStream x, int length)
    setAsciiStream(java.lang.String parameterName, java.io.InputStream x, long length)
    setBigDecimal(java.lang.String parameterName, java.math.BigDecimal x)
    setBinaryStream(java.lang.String parameterName, java.io.InputStream x)
    setBinaryStream(java.lang.String parameterName, java.io.InputStream x, int length)
    setBinaryStream(java.lang.String parameterName, java.io.InputStream x, long length)
    setBlob(java.lang.String parameterName, java.io.InputStream inputStream)
    setBlob(java.lang.String parameterName, java.io.InputStream inputStream, long length)
    setBlob(java.lang.String parameterName, java.sql.Blob x)
    setBoolean(java.lang.String parameterName, boolean x)
    setByte(java.lang.String parameterName, byte x)
    setBytes(java.lang.String parameterName, byte[] x)
    setCharacterStream(java.lang.String parameterName, java.io.Reader reader)
    setCharacterStream(java.lang.String parameterName, java.io.Reader reader, int length)
    setCharacterStream(java.lang.String parameterName, java.io.Reader reader, long length)
    setClob(java.lang.String parameterName, java.io.Reader reader)
    setClob(java.lang.String parameterName, java.io.Reader reader, long length)
    setClob(java.lang.String parameterName, java.sql.Clob x)
    setDate(java.lang.String parameterName, java.sql.Date x)
    setDate(java.lang.String parameterName, java.sql.Date x, java.util.Calendar cal)
    setDouble(java.lang.String parameterName, double x)
    setFloat(java.lang.String parameterName, float x)
    setInt(java.lang.String parameterName, int x)
    setLong(java.lang.String parameterName, long x)
    setNCharacterStream(java.lang.String parameterName, java.io.Reader value)
    setNCharacterStream(java.lang.String parameterName, java.io.Reader value, long length)
    setNClob(java.lang.String parameterName, java.io.Reader reader)
    setNClob(java.lang.String parameterName, java.io.Reader reader, long length)
    setNClob(java.lang.String parameterName, java.sql.NClob value)
    setNString(java.lang.String parameterName, java.lang.String value)
    setNull(java.lang.String parameterName, int sqlType)
    setNull(java.lang.String parameterName, int sqlType, java.lang.String typeName)
    setObject(java.lang.String parameterName, java.lang.Object x)
    setObject(java.lang.String parameterName, java.lang.Object x, int targetSqlType)
    setObject(java.lang.String parameterName, java.lang.Object x, int targetSqlType, int scale)
    setRowId(java.lang.String parameterName, java.sql.RowId x)
    setShort(java.lang.String parameterName, short x)
    setSQLXML(java.lang.String parameterName, java.sql.SQLXML xmlObject)
    setString(java.lang.String parameterName, java.lang.String x)
    setTime(java.lang.String parameterName, java.sql.Time x)
    setTime(java.lang.String parameterName, java.sql.Time x, java.util.Calendar cal)
    setTimestamp(java.lang.String parameterName, java.sql.Timestamp x)
    setTimestamp(java.lang.String parameterName, java.sql.Timestamp x, java.util.Calendar cal)
    setURL(java.lang.String parameterName, java.net.URL val)
  class ClientInfoStatus
    valueOf(java.lang.String name)
  interface Clob
    getCharacterStream(long pos, long length)
    getSubString(long pos, int length)
    position(java.lang.String searchstr, long start)
    position(java.sql.Clob searchstr, long start)
    setAsciiStream(long pos)
    setCharacterStream(long pos)
    setString(long pos, java.lang.String str)
    setString(long pos, java.lang.String str, int offset, int len)
    truncate(long len)
  interface Connection
    createArrayOf(java.lang.String typeName, java.lang.Object[] elements)
    createStatement(int resultSetType, int resultSetConcurrency)
    createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    createStruct(java.lang.String typeName, java.lang.Object[] attributes)
    getClientInfo(java.lang.String name)
    isValid(int timeout)
    nativeSQL(java.lang.String sql)
    prepareCall(java.lang.String sql)
    prepareCall(java.lang.String sql, int resultSetType, int resultSetConcurrency)
    prepareCall(java.lang.String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    prepareStatement(java.lang.String sql)
    prepareStatement(java.lang.String sql, int autoGeneratedKeys)
    prepareStatement(java.lang.String sql, int resultSetType, int resultSetConcurrency)
    prepareStatement(java.lang.String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    prepareStatement(java.lang.String sql, int[] columnIndexes)
    prepareStatement(java.lang.String sql, java.lang.String[] columnNames)
    releaseSavepoint(java.sql.Savepoint savepoint)
    rollback(java.sql.Savepoint savepoint)
    setAutoCommit(boolean autoCommit)
    setCatalog(java.lang.String catalog)
    setClientInfo(java.lang.String name, java.lang.String value)
    setClientInfo(java.util.Properties properties)
    setHoldability(int holdability)
    setReadOnly(boolean readOnly)
    setSavepoint(java.lang.String name)
    setTransactionIsolation(int level)
    setTypeMap(java.util.Map<java.lang.String,java.lang.Class<?>> map)
  interface DatabaseMetaData
    deletesAreDetected(int type)
    getAttributes(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String typeNamePattern, java.lang.String attributeNamePattern)
    getBestRowIdentifier(java.lang.String catalog, java.lang.String schema, java.lang.String table, int scope, boolean nullable)
    getColumnPrivileges(java.lang.String catalog, java.lang.String schema, java.lang.String table, java.lang.String columnNamePattern)
    getColumns(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String tableNamePattern, java.lang.String columnNamePattern)
    getCrossReference(java.lang.String parentCatalog, java.lang.String parentSchema, java.lang.String parentTable, java.lang.String foreignCatalog, java.lang.String foreignSchema, java.lang.String foreignTable)
    getExportedKeys(java.lang.String catalog, java.lang.String schema, java.lang.String table)
    getFunctionColumns(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String functionNamePattern, java.lang.String columnNamePattern)
    getFunctions(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String functionNamePattern)
    getImportedKeys(java.lang.String catalog, java.lang.String schema, java.lang.String table)
    getIndexInfo(java.lang.String catalog, java.lang.String schema, java.lang.String table, boolean unique, boolean approximate)
    getPrimaryKeys(java.lang.String catalog, java.lang.String schema, java.lang.String table)
    getProcedureColumns(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String procedureNamePattern, java.lang.String columnNamePattern)
    getProcedures(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String procedureNamePattern)
    getSchemas(java.lang.String catalog, java.lang.String schemaPattern)
    getSuperTables(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String tableNamePattern)
    getSuperTypes(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String typeNamePattern)
    getTablePrivileges(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String tableNamePattern)
    getTables(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String tableNamePattern, java.lang.String[] types)
    getUDTs(java.lang.String catalog, java.lang.String schemaPattern, java.lang.String typeNamePattern, int[] types)
    getVersionColumns(java.lang.String catalog, java.lang.String schema, java.lang.String table)
    insertsAreDetected(int type)
    othersDeletesAreVisible(int type)
    othersInsertsAreVisible(int type)
    othersUpdatesAreVisible(int type)
    ownDeletesAreVisible(int type)
    ownInsertsAreVisible(int type)
    ownUpdatesAreVisible(int type)
    supportsConvert(int fromType, int toType)
    supportsResultSetConcurrency(int type, int concurrency)
    supportsResultSetHoldability(int holdability)
    supportsResultSetType(int type)
    supportsTransactionIsolationLevel(int level)
    updatesAreDetected(int type)
  class DataTruncation
    #ctor(int index, boolean parameter, boolean read, int dataSize, int transferSize)
    #ctor(int index, boolean parameter, boolean read, int dataSize, int transferSize, java.lang.Throwable cause)
  class Date
    #ctor(int year, int month, int day)
    #ctor(long date)
    setHours(int i)
    setMinutes(int i)
    setSeconds(int i)
    setTime(long date)
    valueOf(java.lang.String s)
  interface Driver
    acceptsURL(java.lang.String url)
    connect(java.lang.String url, java.util.Properties info)
    getPropertyInfo(java.lang.String url, java.util.Properties info)
  class DriverManager
    deregisterDriver(java.sql.Driver driver)
    getConnection(java.lang.String url)
    getConnection(java.lang.String url, java.lang.String user, java.lang.String password)
    getConnection(java.lang.String url, java.util.Properties info)
    getDriver(java.lang.String url)
    println(java.lang.String message)
    registerDriver(java.sql.Driver driver)
    setLoginTimeout(int seconds)
    setLogStream(java.io.PrintStream out)
    setLogWriter(java.io.PrintWriter out)
  class DriverPropertyInfo
    #ctor(java.lang.String name, java.lang.String value)
  interface ParameterMetaData
    getParameterClassName(int param)
    getParameterMode(int param)
    getParameterType(int param)
    getParameterTypeName(int param)
    getPrecision(int param)
    getScale(int param)
    isNullable(int param)
    isSigned(int param)
  interface PreparedStatement
    setArray(int parameterIndex, java.sql.Array x)
    setAsciiStream(int parameterIndex, java.io.InputStream x)
    setAsciiStream(int parameterIndex, java.io.InputStream x, int length)
    setAsciiStream(int parameterIndex, java.io.InputStream x, long length)
    setBigDecimal(int parameterIndex, java.math.BigDecimal x)
    setBinaryStream(int parameterIndex, java.io.InputStream x)
    setBinaryStream(int parameterIndex, java.io.InputStream x, int length)
    setBinaryStream(int parameterIndex, java.io.InputStream x, long length)
    setBlob(int parameterIndex, java.io.InputStream inputStream)
    setBlob(int parameterIndex, java.io.InputStream inputStream, long length)
    setBlob(int parameterIndex, java.sql.Blob x)
    setBoolean(int parameterIndex, boolean x)
    setByte(int parameterIndex, byte x)
    setBytes(int parameterIndex, byte[] x)
    setCharacterStream(int parameterIndex, java.io.Reader reader)
    setCharacterStream(int parameterIndex, java.io.Reader reader, int length)
    setCharacterStream(int parameterIndex, java.io.Reader reader, long length)
    setClob(int parameterIndex, java.io.Reader reader)
    setClob(int parameterIndex, java.io.Reader reader, long length)
    setClob(int parameterIndex, java.sql.Clob x)
    setDate(int parameterIndex, java.sql.Date x)
    setDate(int parameterIndex, java.sql.Date x, java.util.Calendar cal)
    setDouble(int parameterIndex, double x)
    setFloat(int parameterIndex, float x)
    setInt(int parameterIndex, int x)
    setLong(int parameterIndex, long x)
    setNCharacterStream(int parameterIndex, java.io.Reader value)
    setNCharacterStream(int parameterIndex, java.io.Reader value, long length)
    setNClob(int parameterIndex, java.io.Reader reader)
    setNClob(int parameterIndex, java.io.Reader reader, long length)
    setNClob(int parameterIndex, java.sql.NClob value)
    setNString(int parameterIndex, java.lang.String value)
    setNull(int parameterIndex, int sqlType)
    setNull(int parameterIndex, int sqlType, java.lang.String typeName)
    setObject(int parameterIndex, java.lang.Object x)
    setObject(int parameterIndex, java.lang.Object x, int targetSqlType)
    setObject(int parameterIndex, java.lang.Object x, int targetSqlType, int scaleOrLength)
    setRef(int parameterIndex, java.sql.Ref x)
    setRowId(int parameterIndex, java.sql.RowId x)
    setShort(int parameterIndex, short x)
    setSQLXML(int parameterIndex, java.sql.SQLXML xmlObject)
    setString(int parameterIndex, java.lang.String x)
    setTime(int parameterIndex, java.sql.Time x)
    setTime(int parameterIndex, java.sql.Time x, java.util.Calendar cal)
    setTimestamp(int parameterIndex, java.sql.Timestamp x)
    setTimestamp(int parameterIndex, java.sql.Timestamp x, java.util.Calendar cal)
    setUnicodeStream(int parameterIndex, java.io.InputStream x, int length)
    setURL(int parameterIndex, java.net.URL x)
  interface Ref
    getObject(java.util.Map<java.lang.String,java.lang.Class<?>> map)
    setObject(java.lang.Object value)
  interface ResultSet
    absolute(int row)
    findColumn(java.lang.String columnLabel)
    getArray(int columnIndex)
    getArray(java.lang.String columnLabel)
    getAsciiStream(int columnIndex)
    getAsciiStream(java.lang.String columnLabel)
    getBigDecimal(int columnIndex)
    getBigDecimal(int columnIndex, int scale)
    getBigDecimal(java.lang.String columnLabel)
    getBigDecimal(java.lang.String columnLabel, int scale)
    getBinaryStream(int columnIndex)
    getBinaryStream(java.lang.String columnLabel)
    getBlob(int columnIndex)
    getBlob(java.lang.String columnLabel)
    getBoolean(int columnIndex)
    getBoolean(java.lang.String columnLabel)
    getByte(int columnIndex)
    getByte(java.lang.String columnLabel)
    getBytes(int columnIndex)
    getBytes(java.lang.String columnLabel)
    getCharacterStream(int columnIndex)
    getCharacterStream(java.lang.String columnLabel)
    getClob(int columnIndex)
    getClob(java.lang.String columnLabel)
    getDate(int columnIndex)
    getDate(int columnIndex, java.util.Calendar cal)
    getDate(java.lang.String columnLabel)
    getDate(java.lang.String columnLabel, java.util.Calendar cal)
    getDouble(int columnIndex)
    getDouble(java.lang.String columnLabel)
    getFloat(int columnIndex)
    getFloat(java.lang.String columnLabel)
    getInt(int columnIndex)
    getInt(java.lang.String columnLabel)
    getLong(int columnIndex)
    getLong(java.lang.String columnLabel)
    getNCharacterStream(int columnIndex)
    getNCharacterStream(java.lang.String columnLabel)
    getNClob(int columnIndex)
    getNClob(java.lang.String columnLabel)
    getNString(int columnIndex)
    getNString(java.lang.String columnLabel)
    getObject(int columnIndex)
    getObject(int columnIndex, java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getObject(java.lang.String columnLabel)
    getObject(java.lang.String columnLabel, java.util.Map<java.lang.String,java.lang.Class<?>> map)
    getRef(int columnIndex)
    getRef(java.lang.String columnLabel)
    getRowId(int columnIndex)
    getRowId(java.lang.String columnLabel)
    getShort(int columnIndex)
    getShort(java.lang.String columnLabel)
    getSQLXML(int columnIndex)
    getSQLXML(java.lang.String columnLabel)
    getString(int columnIndex)
    getString(java.lang.String columnLabel)
    getTime(int columnIndex)
    getTime(int columnIndex, java.util.Calendar cal)
    getTime(java.lang.String columnLabel)
    getTime(java.lang.String columnLabel, java.util.Calendar cal)
    getTimestamp(int columnIndex)
    getTimestamp(int columnIndex, java.util.Calendar cal)
    getTimestamp(java.lang.String columnLabel)
    getTimestamp(java.lang.String columnLabel, java.util.Calendar cal)
    getUnicodeStream(int columnIndex)
    getUnicodeStream(java.lang.String columnLabel)
    getURL(int columnIndex)
    getURL(java.lang.String columnLabel)
    relative(int rows)
    setFetchDirection(int direction)
    setFetchSize(int rows)
    updateArray(int columnIndex, java.sql.Array x)
    updateArray(java.lang.String columnLabel, java.sql.Array x)
    updateAsciiStream(int columnIndex, java.io.InputStream x)
    updateAsciiStream(int columnIndex, java.io.InputStream x, int length)
    updateAsciiStream(int columnIndex, java.io.InputStream x, long length)
    updateAsciiStream(java.lang.String columnLabel, java.io.InputStream x)
    updateAsciiStream(java.lang.String columnLabel, java.io.InputStream x, int length)
    updateAsciiStream(java.lang.String columnLabel, java.io.InputStream x, long length)
    updateBigDecimal(int columnIndex, java.math.BigDecimal x)
    updateBigDecimal(java.lang.String columnLabel, java.math.BigDecimal x)
    updateBinaryStream(int columnIndex, java.io.InputStream x)
    updateBinaryStream(int columnIndex, java.io.InputStream x, int length)
    updateBinaryStream(int columnIndex, java.io.InputStream x, long length)
    updateBinaryStream(java.lang.String columnLabel, java.io.InputStream x)
    updateBinaryStream(java.lang.String columnLabel, java.io.InputStream x, int length)
    updateBinaryStream(java.lang.String columnLabel, java.io.InputStream x, long length)
    updateBlob(int columnIndex, java.io.InputStream inputStream)
    updateBlob(int columnIndex, java.io.InputStream inputStream, long length)
    updateBlob(int columnIndex, java.sql.Blob x)
    updateBlob(java.lang.String columnLabel, java.io.InputStream inputStream)
    updateBlob(java.lang.String columnLabel, java.io.InputStream inputStream, long length)
    updateBlob(java.lang.String columnLabel, java.sql.Blob x)
    updateBoolean(int columnIndex, boolean x)
    updateBoolean(java.lang.String columnLabel, boolean x)
    updateByte(int columnIndex, byte x)
    updateByte(java.lang.String columnLabel, byte x)
    updateBytes(int columnIndex, byte[] x)
    updateBytes(java.lang.String columnLabel, byte[] x)
    updateCharacterStream(int columnIndex, java.io.Reader x)
    updateCharacterStream(int columnIndex, java.io.Reader x, int length)
    updateCharacterStream(int columnIndex, java.io.Reader x, long length)
    updateCharacterStream(java.lang.String columnLabel, java.io.Reader reader)
    updateCharacterStream(java.lang.String columnLabel, java.io.Reader reader, int length)
    updateCharacterStream(java.lang.String columnLabel, java.io.Reader reader, long length)
    updateClob(int columnIndex, java.io.Reader reader)
    updateClob(int columnIndex, java.io.Reader reader, long length)
    updateClob(int columnIndex, java.sql.Clob x)
    updateClob(java.lang.String columnLabel, java.io.Reader reader)
    updateClob(java.lang.String columnLabel, java.io.Reader reader, long length)
    updateClob(java.lang.String columnLabel, java.sql.Clob x)
    updateDate(int columnIndex, java.sql.Date x)
    updateDate(java.lang.String columnLabel, java.sql.Date x)
    updateDouble(int columnIndex, double x)
    updateDouble(java.lang.String columnLabel, double x)
    updateFloat(int columnIndex, float x)
    updateFloat(java.lang.String columnLabel, float x)
    updateInt(int columnIndex, int x)
    updateInt(java.lang.String columnLabel, int x)
    updateLong(int columnIndex, long x)
    updateLong(java.lang.String columnLabel, long x)
    updateNCharacterStream(int columnIndex, java.io.Reader x)
    updateNCharacterStream(int columnIndex, java.io.Reader x, long length)
    updateNCharacterStream(java.lang.String columnLabel, java.io.Reader reader)
    updateNCharacterStream(java.lang.String columnLabel, java.io.Reader reader, long length)
    updateNClob(int columnIndex, java.io.Reader reader)
    updateNClob(int columnIndex, java.io.Reader reader, long length)
    updateNClob(int columnIndex, java.sql.NClob nClob)
    updateNClob(java.lang.String columnLabel, java.io.Reader reader)
    updateNClob(java.lang.String columnLabel, java.io.Reader reader, long length)
    updateNClob(java.lang.String columnLabel, java.sql.NClob nClob)
    updateNString(int columnIndex, java.lang.String nString)
    updateNString(java.lang.String columnLabel, java.lang.String nString)
    updateNull(int columnIndex)
    updateNull(java.lang.String columnLabel)
    updateObject(int columnIndex, java.lang.Object x)
    updateObject(int columnIndex, java.lang.Object x, int scaleOrLength)
    updateObject(java.lang.String columnLabel, java.lang.Object x)
    updateObject(java.lang.String columnLabel, java.lang.Object x, int scaleOrLength)
    updateRef(int columnIndex, java.sql.Ref x)
    updateRef(java.lang.String columnLabel, java.sql.Ref x)
    updateRowId(int columnIndex, java.sql.RowId x)
    updateRowId(java.lang.String columnLabel, java.sql.RowId x)
    updateShort(int columnIndex, short x)
    updateShort(java.lang.String columnLabel, short x)
    updateSQLXML(int columnIndex, java.sql.SQLXML xmlObject)
    updateSQLXML(java.lang.String columnLabel, java.sql.SQLXML xmlObject)
    updateString(int columnIndex, java.lang.String x)
    updateString(java.lang.String columnLabel, java.lang.String x)
    updateTime(int columnIndex, java.sql.Time x)
    updateTime(java.lang.String columnLabel, java.sql.Time x)
    updateTimestamp(int columnIndex, java.sql.Timestamp x)
    updateTimestamp(java.lang.String columnLabel, java.sql.Timestamp x)
  interface ResultSetMetaData
    getCatalogName(int column)
    getColumnClassName(int column)
    getColumnDisplaySize(int column)
    getColumnLabel(int column)
    getColumnName(int column)
    getColumnType(int column)
    getColumnTypeName(int column)
    getPrecision(int column)
    getScale(int column)
    getSchemaName(int column)
    getTableName(int column)
    isAutoIncrement(int column)
    isCaseSensitive(int column)
    isCurrency(int column)
    isDefinitelyWritable(int column)
    isNullable(int column)
    isReadOnly(int column)
    isSearchable(int column)
    isSigned(int column)
    isWritable(int column)
  interface RowId
    equals(java.lang.Object obj)
  class RowIdLifetime
    valueOf(java.lang.String name)
  class SQLClientInfoException
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties)
    #ctor(java.lang.String reason, java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties, java.lang.Throwable cause)
    #ctor(java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties)
    #ctor(java.util.Map<java.lang.String,java.sql.ClientInfoStatus> failedProperties, java.lang.Throwable cause)
  interface SQLData
    readSQL(java.sql.SQLInput stream, java.lang.String typeName)
    writeSQL(java.sql.SQLOutput stream)
  class SQLDataException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLException
    setNextException(java.sql.SQLException ex)
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String sqlState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String sqlState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLFeatureNotSupportedException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLIntegrityConstraintViolationException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLInvalidAuthorizationSpecException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLNonTransientConnectionException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLNonTransientException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface SQLOutput
    writeArray(java.sql.Array x)
    writeAsciiStream(java.io.InputStream x)
    writeBigDecimal(java.math.BigDecimal x)
    writeBinaryStream(java.io.InputStream x)
    writeBlob(java.sql.Blob x)
    writeBoolean(boolean x)
    writeByte(byte x)
    writeBytes(byte[] x)
    writeCharacterStream(java.io.Reader x)
    writeClob(java.sql.Clob x)
    writeDate(java.sql.Date x)
    writeDouble(double x)
    writeFloat(float x)
    writeInt(int x)
    writeLong(long x)
    writeNClob(java.sql.NClob x)
    writeNString(java.lang.String x)
    writeObject(java.sql.SQLData x)
    writeRef(java.sql.Ref x)
    writeRowId(java.sql.RowId x)
    writeShort(short x)
    writeSQLXML(java.sql.SQLXML x)
    writeString(java.lang.String x)
    writeStruct(java.sql.Struct x)
    writeTime(java.sql.Time x)
    writeTimestamp(java.sql.Timestamp x)
    writeURL(java.net.URL x)
  class SQLPermission
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.lang.String actions)
  class SQLRecoverableException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLSyntaxErrorException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLTimeoutException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLTransactionRollbackException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLTransientConnectionException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLTransientException
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class SQLWarning
    setNextWarning(java.sql.SQLWarning w)
    #ctor(java.lang.String reason)
    #ctor(java.lang.String reason, java.lang.String SQLState)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode)
    #ctor(java.lang.String reason, java.lang.String SQLState, int vendorCode, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.String SQLState, java.lang.Throwable cause)
    #ctor(java.lang.String reason, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface SQLXML
    <T> getSource(java.lang.Class<T> sourceClass)
    <T> setResult(java.lang.Class<T> resultClass)
    setString(java.lang.String value)
  interface Statement
    addBatch(java.lang.String sql)
    execute(java.lang.String sql)
    execute(java.lang.String sql, int autoGeneratedKeys)
    execute(java.lang.String sql, int[] columnIndexes)
    execute(java.lang.String sql, java.lang.String[] columnNames)
    executeQuery(java.lang.String sql)
    executeUpdate(java.lang.String sql)
    executeUpdate(java.lang.String sql, int autoGeneratedKeys)
    executeUpdate(java.lang.String sql, int[] columnIndexes)
    executeUpdate(java.lang.String sql, java.lang.String[] columnNames)
    getMoreResults(int current)
    setCursorName(java.lang.String name)
    setEscapeProcessing(boolean enable)
    setFetchDirection(int direction)
    setFetchSize(int rows)
    setMaxFieldSize(int max)
    setMaxRows(int max)
    setPoolable(boolean poolable)
    setQueryTimeout(int seconds)
  interface Struct
    getAttributes(java.util.Map<java.lang.String,java.lang.Class<?>> map)
  class Time
    setDate(int i)
    setMonth(int i)
    setTime(long time)
    setYear(int i)
    #ctor(int hour, int minute, int second)
    #ctor(long time)
    valueOf(java.lang.String s)
  class Timestamp
    after(java.sql.Timestamp ts)
    before(java.sql.Timestamp ts)
    compareTo(java.sql.Timestamp ts)
    compareTo(java.util.Date o)
    equals(java.lang.Object ts)
    equals(java.sql.Timestamp ts)
    setNanos(int n)
    setTime(long time)
    #ctor(int year, int month, int date, int hour, int minute, int second, int nano)
    #ctor(long time)
    valueOf(java.lang.String s)
  interface Wrapper
    isWrapperFor(java.lang.Class<?> iface)
    <T> unwrap(java.lang.Class<T> iface)

package java.text
;---------------------------------------
  class Annotation
    #ctor(java.lang.Object value)
  interface AttributedCharacterIterator
    getAttribute(java.text.AttributedCharacterIterator.Attribute attribute)
    getRunLimit(java.text.AttributedCharacterIterator.Attribute attribute)
    getRunLimit(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute> attributes)
    getRunStart(java.text.AttributedCharacterIterator.Attribute attribute)
    getRunStart(java.util.Set<? extends java.text.AttributedCharacterIterator.Attribute> attributes)
  class AttributedCharacterIterator.Attribute
    #ctor(java.lang.String name)
    equals(java.lang.Object obj)
  class AttributedString
    addAttribute(java.text.AttributedCharacterIterator.Attribute attribute, java.lang.Object value)
    addAttribute(java.text.AttributedCharacterIterator.Attribute attribute, java.lang.Object value, int beginIndex, int endIndex)
    addAttributes(java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute,?> attributes, int beginIndex, int endIndex)
    #ctor(java.lang.String text)
    #ctor(java.lang.String text, java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute,?> attributes)
    #ctor(java.text.AttributedCharacterIterator text)
    #ctor(java.text.AttributedCharacterIterator text, int beginIndex, int endIndex)
    #ctor(java.text.AttributedCharacterIterator text, int beginIndex, int endIndex, java.text.AttributedCharacterIterator.Attribute[] attributes)
    getIterator(java.text.AttributedCharacterIterator.Attribute[] attributes)
    getIterator(java.text.AttributedCharacterIterator.Attribute[] attributes, int beginIndex, int endIndex)
  class Bidi
    #ctor(char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags)
    #ctor(java.lang.String paragraph, int flags)
    #ctor(java.text.AttributedCharacterIterator paragraph)
    createLineBidi(int lineStart, int lineLimit)
    getLevelAt(int offset)
    getRunLevel(int run)
    getRunLimit(int run)
    getRunStart(int run)
    reorderVisually(byte[] levels, int levelStart, java.lang.Object[] objects, int objectStart, int count)
    requiresBidi(char[] text, int start, int limit)
  class BreakIterator
    following(int offset)
    getCharacterInstance(java.util.Locale locale)
    getLineInstance(java.util.Locale locale)
    getSentenceInstance(java.util.Locale locale)
    getWordInstance(java.util.Locale locale)
    isBoundary(int offset)
    next(int n)
    preceding(int offset)
    setText(java.lang.String newText)
    setText(java.text.CharacterIterator newText)
  interface CharacterIterator
    setIndex(int position)
  class ChoiceFormat
    applyPattern(java.lang.String newPattern)
    #ctor(double[] limits, java.lang.String[] formats)
    #ctor(java.lang.String newPattern)
    equals(java.lang.Object obj)
    format(double number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition status)
    format(long number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition status)
    nextDouble(double d)
    nextDouble(double d, boolean positive)
    parse(java.lang.String text, java.text.ParsePosition status)
    previousDouble(double d)
    setChoices(double[] limits, java.lang.String[] formats)
  class CollationElementIterator
    getMaxExpansion(int order)
    primaryOrder(int order)
    secondaryOrder(int order)
    setOffset(int newOffset)
    setText(java.lang.String source)
    setText(java.text.CharacterIterator source)
    tertiaryOrder(int order)
  class CollationKey
    #ctor(java.lang.String source)
    compareTo(java.text.CollationKey target)
  class Collator
    compare(java.lang.Object o1, java.lang.Object o2)
    compare(java.lang.String source, java.lang.String target)
    equals(java.lang.Object that)
    equals(java.lang.String source, java.lang.String target)
    getCollationKey(java.lang.String source)
    getInstance(java.util.Locale desiredLocale)
    setDecomposition(int decompositionMode)
    setStrength(int newStrength)
  class DateFormat
    equals(java.lang.Object obj)
    format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition)
    format(java.util.Date date)
    format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition fieldPosition)
    getDateInstance(int style)
    getDateInstance(int style, java.util.Locale aLocale)
    getDateTimeInstance(int dateStyle, int timeStyle)
    getDateTimeInstance(int dateStyle, int timeStyle, java.util.Locale aLocale)
    getTimeInstance(int style)
    getTimeInstance(int style, java.util.Locale aLocale)
    parse(java.lang.String source)
    parse(java.lang.String source, java.text.ParsePosition pos)
    parseObject(java.lang.String source, java.text.ParsePosition pos)
    setCalendar(java.util.Calendar newCalendar)
    setLenient(boolean lenient)
    setNumberFormat(java.text.NumberFormat newNumberFormat)
    setTimeZone(java.util.TimeZone zone)
  class DateFormat.Field
    #ctor(java.lang.String name, int calendarField)
    ofCalendarField(int calendarField)
  class DateFormatSymbols
    #ctor(java.util.Locale locale)
    equals(java.lang.Object obj)
    getInstance(java.util.Locale locale)
    setAmPmStrings(java.lang.String[] newAmpms)
    setEras(java.lang.String[] newEras)
    setLocalPatternChars(java.lang.String newLocalPatternChars)
    setMonths(java.lang.String[] newMonths)
    setShortMonths(java.lang.String[] newShortMonths)
    setShortWeekdays(java.lang.String[] newShortWeekdays)
    setWeekdays(java.lang.String[] newWeekdays)
    setZoneStrings(java.lang.String[][] newZoneStrings)
  class DecimalFormat
    applyLocalizedPattern(java.lang.String pattern)
    applyPattern(java.lang.String pattern)
    #ctor(java.lang.String pattern)
    #ctor(java.lang.String pattern, java.text.DecimalFormatSymbols symbols)
    equals(java.lang.Object obj)
    format(double number, java.lang.StringBuffer result, java.text.FieldPosition fieldPosition)
    format(java.lang.Object number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    format(long number, java.lang.StringBuffer result, java.text.FieldPosition fieldPosition)
    formatToCharacterIterator(java.lang.Object obj)
    parse(java.lang.String text, java.text.ParsePosition pos)
    setCurrency(java.util.Currency currency)
    setDecimalFormatSymbols(java.text.DecimalFormatSymbols newSymbols)
    setDecimalSeparatorAlwaysShown(boolean newValue)
    setGroupingSize(int newValue)
    setGroupingUsed(boolean newValue)
    setMaximumFractionDigits(int newValue)
    setMaximumIntegerDigits(int newValue)
    setMinimumFractionDigits(int newValue)
    setMinimumIntegerDigits(int newValue)
    setMultiplier(int newValue)
    setNegativePrefix(java.lang.String newValue)
    setNegativeSuffix(java.lang.String newValue)
    setParseBigDecimal(boolean newValue)
    setParseIntegerOnly(boolean value)
    setPositivePrefix(java.lang.String newValue)
    setPositiveSuffix(java.lang.String newValue)
    setRoundingMode(java.math.RoundingMode roundingMode)
  class DecimalFormatSymbols
    #ctor(java.util.Locale locale)
    equals(java.lang.Object obj)
    getInstance(java.util.Locale locale)
    setCurrency(java.util.Currency currency)
    setCurrencySymbol(java.lang.String currency)
    setDecimalSeparator(char decimalSeparator)
    setDigit(char digit)
    setExponentSeparator(java.lang.String exp)
    setGroupingSeparator(char groupingSeparator)
    setInfinity(java.lang.String infinity)
    setInternationalCurrencySymbol(java.lang.String currencyCode)
    setMinusSign(char minusSign)
    setMonetaryDecimalSeparator(char sep)
    setNaN(java.lang.String NaN)
    setPatternSeparator(char patternSeparator)
    setPercent(char percent)
    setPerMill(char perMill)
    setZeroDigit(char zeroDigit)
  class FieldPosition
    equals(java.lang.Object obj)
    #ctor(int field)
    #ctor(java.text.Format.Field attribute)
    #ctor(java.text.Format.Field attribute, int fieldID)
    setBeginIndex(int bi)
    setEndIndex(int ei)
  class Format
    format(java.lang.Object obj)
    format(java.lang.Object obj, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    formatToCharacterIterator(java.lang.Object obj)
    parseObject(java.lang.String source)
    parseObject(java.lang.String source, java.text.ParsePosition pos)
  class Format.Field
    #ctor(java.lang.String name)
  class MessageFormat
    applyPattern(java.lang.String pattern)
    equals(java.lang.Object obj)
    format(java.lang.Object arguments, java.lang.StringBuffer result, java.text.FieldPosition pos)
    format(java.lang.Object[] arguments, java.lang.StringBuffer result, java.text.FieldPosition pos)
    format(java.lang.String pattern, java.lang.Object... arguments)
    formatToCharacterIterator(java.lang.Object arguments)
    #ctor(java.lang.String pattern)
    #ctor(java.lang.String pattern, java.util.Locale locale)
    parse(java.lang.String source)
    parse(java.lang.String source, java.text.ParsePosition pos)
    parseObject(java.lang.String source, java.text.ParsePosition pos)
    setFormat(int formatElementIndex, java.text.Format newFormat)
    setFormatByArgumentIndex(int argumentIndex, java.text.Format newFormat)
    setFormats(java.text.Format[] newFormats)
    setFormatsByArgumentIndex(java.text.Format[] newFormats)
    setLocale(java.util.Locale locale)
  class MessageFormat.Field
    #ctor(java.lang.String name)
  class Normalizer
    isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form)
    normalize(java.lang.CharSequence src, java.text.Normalizer.Form form)
  class Normalizer.Form
    valueOf(java.lang.String name)
  class NumberFormat
    equals(java.lang.Object obj)
    format(double number)
    format(double number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    format(java.lang.Object number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    format(long number)
    format(long number, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    getCurrencyInstance(java.util.Locale inLocale)
    getInstance(java.util.Locale inLocale)
    getIntegerInstance(java.util.Locale inLocale)
    getNumberInstance(java.util.Locale inLocale)
    getPercentInstance(java.util.Locale inLocale)
    parse(java.lang.String source)
    parse(java.lang.String source, java.text.ParsePosition parsePosition)
    parseObject(java.lang.String source, java.text.ParsePosition pos)
    setCurrency(java.util.Currency currency)
    setGroupingUsed(boolean newValue)
    setMaximumFractionDigits(int newValue)
    setMaximumIntegerDigits(int newValue)
    setMinimumFractionDigits(int newValue)
    setMinimumIntegerDigits(int newValue)
    setParseIntegerOnly(boolean value)
    setRoundingMode(java.math.RoundingMode roundingMode)
  class NumberFormat.Field
    #ctor(java.lang.String name)
  class ParseException
    #ctor(java.lang.String s, int errorOffset)
  class ParsePosition
    equals(java.lang.Object obj)
    #ctor(int index)
    setErrorIndex(int ei)
    setIndex(int index)
  class RuleBasedCollator
    compare(java.lang.String source, java.lang.String target)
    equals(java.lang.Object obj)
    getCollationElementIterator(java.lang.String source)
    getCollationElementIterator(java.text.CharacterIterator source)
    getCollationKey(java.lang.String source)
    #ctor(java.lang.String rules)
  class SimpleDateFormat
    applyLocalizedPattern(java.lang.String pattern)
    applyPattern(java.lang.String pattern)
    equals(java.lang.Object obj)
    format(java.util.Date date, java.lang.StringBuffer toAppendTo, java.text.FieldPosition pos)
    formatToCharacterIterator(java.lang.Object obj)
    parse(java.lang.String text, java.text.ParsePosition pos)
    set2DigitYearStart(java.util.Date startDate)
    setDateFormatSymbols(java.text.DateFormatSymbols newFormatSymbols)
    #ctor(java.lang.String pattern)
    #ctor(java.lang.String pattern, java.text.DateFormatSymbols formatSymbols)
    #ctor(java.lang.String pattern, java.util.Locale locale)
  class StringCharacterIterator
    equals(java.lang.Object obj)
    setIndex(int p)
    setText(java.lang.String text)
    #ctor(java.lang.String text)
    #ctor(java.lang.String text, int pos)
    #ctor(java.lang.String text, int begin, int end, int pos)

package java.time
;---------------------------------------
  class Clock
    equals(java.lang.Object obj)
    fixed(java.time.Instant fixedInstant, java.time.ZoneId zone)
    offset(java.time.Clock baseClock, java.time.Duration offsetDuration)
    system(java.time.ZoneId zone)
    tick(java.time.Clock baseClock, java.time.Duration tickDuration)
    tickMinutes(java.time.ZoneId zone)
    tickSeconds(java.time.ZoneId zone)
    withZone(java.time.ZoneId zone)
  class DateTimeException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
  class DayOfWeek
    adjustInto(java.time.temporal.Temporal temporal)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    minus(long days)
    of(int dayOfWeek)
    plus(long days)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    valueOf(java.lang.String name)
  class Duration
    addTo(java.time.temporal.Temporal temporal)
    between(java.time.temporal.Temporal startInclusive, java.time.temporal.Temporal endExclusive)
    compareTo(java.time.Duration otherDuration)
    dividedBy(long divisor)
    equals(java.lang.Object otherDuration)
    from(java.time.temporal.TemporalAmount amount)
    get(java.time.temporal.TemporalUnit unit)
    minus(java.time.Duration duration)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusDays(long daysToSubtract)
    minusHours(long hoursToSubtract)
    minusMillis(long millisToSubtract)
    minusMinutes(long minutesToSubtract)
    minusNanos(long nanosToSubtract)
    minusSeconds(long secondsToSubtract)
    multipliedBy(long multiplicand)
    of(long amount, java.time.temporal.TemporalUnit unit)
    ofDays(long days)
    ofHours(long hours)
    ofMillis(long millis)
    ofMinutes(long minutes)
    ofNanos(long nanos)
    ofSeconds(long seconds)
    ofSeconds(long seconds, long nanoAdjustment)
    parse(java.lang.CharSequence text)
    plus(java.time.Duration duration)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusDays(long daysToAdd)
    plusHours(long hoursToAdd)
    plusMillis(long millisToAdd)
    plusMinutes(long minutesToAdd)
    plusNanos(long nanosToAdd)
    plusSeconds(long secondsToAdd)
    subtractFrom(java.time.temporal.Temporal temporal)
    withNanos(int nanoOfSecond)
    withSeconds(long seconds)
  class Instant
    adjustInto(java.time.temporal.Temporal temporal)
    atOffset(java.time.ZoneOffset offset)
    atZone(java.time.ZoneId zone)
    compareTo(java.time.Instant otherInstant)
    equals(java.lang.Object otherInstant)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.Instant otherInstant)
    isBefore(java.time.Instant otherInstant)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusMillis(long millisToSubtract)
    minusNanos(long nanosToSubtract)
    minusSeconds(long secondsToSubtract)
    now(java.time.Clock clock)
    ofEpochMilli(long epochMilli)
    ofEpochSecond(long epochSecond)
    ofEpochSecond(long epochSecond, long nanoAdjustment)
    parse(java.lang.CharSequence text)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusMillis(long millisToAdd)
    plusNanos(long nanosToAdd)
    plusSeconds(long secondsToAdd)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class LocalDate
    adjustInto(java.time.temporal.Temporal temporal)
    atStartOfDay(java.time.ZoneId zone)
    atTime(int hour, int minute)
    atTime(int hour, int minute, int second)
    atTime(int hour, int minute, int second, int nanoOfSecond)
    atTime(java.time.LocalTime time)
    atTime(java.time.OffsetTime time)
    compareTo(java.time.chrono.ChronoLocalDate other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.chrono.ChronoLocalDate other)
    isBefore(java.time.chrono.ChronoLocalDate other)
    isEqual(java.time.chrono.ChronoLocalDate other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusDays(long daysToSubtract)
    minusMonths(long monthsToSubtract)
    minusWeeks(long weeksToSubtract)
    minusYears(long yearsToSubtract)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int year, int month, int dayOfMonth)
    of(int year, java.time.Month month, int dayOfMonth)
    ofEpochDay(long epochDay)
    ofYearDay(int year, int dayOfYear)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusDays(long daysToAdd)
    plusMonths(long monthsToAdd)
    plusWeeks(long weeksToAdd)
    plusYears(long yearsToAdd)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    until(java.time.chrono.ChronoLocalDate endDateExclusive)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withDayOfMonth(int dayOfMonth)
    withDayOfYear(int dayOfYear)
    withMonth(int month)
    withYear(int year)
  class LocalDateTime
    adjustInto(java.time.temporal.Temporal temporal)
    atOffset(java.time.ZoneOffset offset)
    atZone(java.time.ZoneId zone)
    compareTo(java.time.chrono.ChronoLocalDateTime<?> other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.chrono.ChronoLocalDateTime<?> other)
    isBefore(java.time.chrono.ChronoLocalDateTime<?> other)
    isEqual(java.time.chrono.ChronoLocalDateTime<?> other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusDays(long days)
    minusHours(long hours)
    minusMinutes(long minutes)
    minusMonths(long months)
    minusNanos(long nanos)
    minusSeconds(long seconds)
    minusWeeks(long weeks)
    minusYears(long years)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int year, int month, int dayOfMonth, int hour, int minute)
    of(int year, int month, int dayOfMonth, int hour, int minute, int second)
    of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
    of(int year, java.time.Month month, int dayOfMonth, int hour, int minute)
    of(int year, java.time.Month month, int dayOfMonth, int hour, int minute, int second)
    of(int year, java.time.Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)
    of(java.time.LocalDate date, java.time.LocalTime time)
    ofEpochSecond(long epochSecond, int nanoOfSecond, java.time.ZoneOffset offset)
    ofInstant(java.time.Instant instant, java.time.ZoneId zone)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusDays(long days)
    plusHours(long hours)
    plusMinutes(long minutes)
    plusMonths(long months)
    plusNanos(long nanos)
    plusSeconds(long seconds)
    plusWeeks(long weeks)
    plusYears(long years)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withDayOfMonth(int dayOfMonth)
    withDayOfYear(int dayOfYear)
    withHour(int hour)
    withMinute(int minute)
    withMonth(int month)
    withNano(int nanoOfSecond)
    withSecond(int second)
    withYear(int year)
  class LocalTime
    adjustInto(java.time.temporal.Temporal temporal)
    atDate(java.time.LocalDate date)
    atOffset(java.time.ZoneOffset offset)
    compareTo(java.time.LocalTime other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.LocalTime other)
    isBefore(java.time.LocalTime other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusHours(long hoursToSubtract)
    minusMinutes(long minutesToSubtract)
    minusNanos(long nanosToSubtract)
    minusSeconds(long secondsToSubtract)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int hour, int minute)
    of(int hour, int minute, int second)
    of(int hour, int minute, int second, int nanoOfSecond)
    ofNanoOfDay(long nanoOfDay)
    ofSecondOfDay(long secondOfDay)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusHours(long hoursToAdd)
    plusMinutes(long minutesToAdd)
    plusNanos(long nanosToAdd)
    plusSeconds(long secondstoAdd)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withHour(int hour)
    withMinute(int minute)
    withNano(int nanoOfSecond)
    withSecond(int second)
  class Month
    adjustInto(java.time.temporal.Temporal temporal)
    firstDayOfYear(boolean leapYear)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    length(boolean leapYear)
    minus(long months)
    of(int month)
    plus(long months)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    valueOf(java.lang.String name)
  class MonthDay
    adjustInto(java.time.temporal.Temporal temporal)
    atYear(int year)
    compareTo(java.time.MonthDay other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.MonthDay other)
    isBefore(java.time.MonthDay other)
    isSupported(java.time.temporal.TemporalField field)
    isValidYear(int year)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int month, int dayOfMonth)
    of(java.time.Month month, int dayOfMonth)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    with(java.time.Month month)
    withDayOfMonth(int dayOfMonth)
    withMonth(int month)
  class OffsetDateTime
    adjustInto(java.time.temporal.Temporal temporal)
    atZoneSameInstant(java.time.ZoneId zone)
    atZoneSimilarLocal(java.time.ZoneId zone)
    compareTo(java.time.OffsetDateTime other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.OffsetDateTime other)
    isBefore(java.time.OffsetDateTime other)
    isEqual(java.time.OffsetDateTime other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusDays(long days)
    minusHours(long hours)
    minusMinutes(long minutes)
    minusMonths(long months)
    minusNanos(long nanos)
    minusSeconds(long seconds)
    minusWeeks(long weeks)
    minusYears(long years)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, java.time.ZoneOffset offset)
    of(java.time.LocalDate date, java.time.LocalTime time, java.time.ZoneOffset offset)
    of(java.time.LocalDateTime dateTime, java.time.ZoneOffset offset)
    ofInstant(java.time.Instant instant, java.time.ZoneId zone)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusDays(long days)
    plusHours(long hours)
    plusMinutes(long minutes)
    plusMonths(long months)
    plusNanos(long nanos)
    plusSeconds(long seconds)
    plusWeeks(long weeks)
    plusYears(long years)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withDayOfMonth(int dayOfMonth)
    withDayOfYear(int dayOfYear)
    withHour(int hour)
    withMinute(int minute)
    withMonth(int month)
    withNano(int nanoOfSecond)
    withOffsetSameInstant(java.time.ZoneOffset offset)
    withOffsetSameLocal(java.time.ZoneOffset offset)
    withSecond(int second)
    withYear(int year)
  class OffsetTime
    adjustInto(java.time.temporal.Temporal temporal)
    atDate(java.time.LocalDate date)
    compareTo(java.time.OffsetTime other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.OffsetTime other)
    isBefore(java.time.OffsetTime other)
    isEqual(java.time.OffsetTime other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusHours(long hours)
    minusMinutes(long minutes)
    minusNanos(long nanos)
    minusSeconds(long seconds)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int hour, int minute, int second, int nanoOfSecond, java.time.ZoneOffset offset)
    of(java.time.LocalTime time, java.time.ZoneOffset offset)
    ofInstant(java.time.Instant instant, java.time.ZoneId zone)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusHours(long hours)
    plusMinutes(long minutes)
    plusNanos(long nanos)
    plusSeconds(long seconds)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withHour(int hour)
    withMinute(int minute)
    withNano(int nanoOfSecond)
    withOffsetSameInstant(java.time.ZoneOffset offset)
    withOffsetSameLocal(java.time.ZoneOffset offset)
    withSecond(int second)
  class Period
    addTo(java.time.temporal.Temporal temporal)
    between(java.time.LocalDate startDateInclusive, java.time.LocalDate endDateExclusive)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAmount amount)
    get(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minusDays(long daysToSubtract)
    minusMonths(long monthsToSubtract)
    minusYears(long yearsToSubtract)
    multipliedBy(int scalar)
    of(int years, int months, int days)
    ofDays(int days)
    ofMonths(int months)
    ofWeeks(int weeks)
    ofYears(int years)
    parse(java.lang.CharSequence text)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plusDays(long daysToAdd)
    plusMonths(long monthsToAdd)
    plusYears(long yearsToAdd)
    subtractFrom(java.time.temporal.Temporal temporal)
    withDays(int days)
    withMonths(int months)
    withYears(int years)
  class Year
    adjustInto(java.time.temporal.Temporal temporal)
    atDay(int dayOfYear)
    atMonth(int month)
    atMonth(java.time.Month month)
    atMonthDay(java.time.MonthDay monthDay)
    compareTo(java.time.Year other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.Year other)
    isBefore(java.time.Year other)
    isLeap(long year)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    isValidMonthDay(java.time.MonthDay monthDay)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusYears(long yearsToSubtract)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int isoYear)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusYears(long yearsToAdd)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class YearMonth
    adjustInto(java.time.temporal.Temporal temporal)
    atDay(int dayOfMonth)
    compareTo(java.time.YearMonth other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.YearMonth other)
    isBefore(java.time.YearMonth other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    isValidDay(int dayOfMonth)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusMonths(long monthsToSubtract)
    minusYears(long yearsToSubtract)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int year, int month)
    of(int year, java.time.Month month)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusMonths(long monthsToAdd)
    plusYears(long yearsToAdd)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withMonth(int month)
    withYear(int year)
  class ZonedDateTime
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    minusDays(long days)
    minusHours(long hours)
    minusMinutes(long minutes)
    minusMonths(long months)
    minusNanos(long nanos)
    minusSeconds(long seconds)
    minusWeeks(long weeks)
    minusYears(long years)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, java.time.ZoneId zone)
    of(java.time.LocalDate date, java.time.LocalTime time, java.time.ZoneId zone)
    of(java.time.LocalDateTime localDateTime, java.time.ZoneId zone)
    ofInstant(java.time.Instant instant, java.time.ZoneId zone)
    ofInstant(java.time.LocalDateTime localDateTime, java.time.ZoneOffset offset, java.time.ZoneId zone)
    ofLocal(java.time.LocalDateTime localDateTime, java.time.ZoneId zone, java.time.ZoneOffset preferredOffset)
    ofStrict(java.time.LocalDateTime localDateTime, java.time.ZoneOffset offset, java.time.ZoneId zone)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.time.format.DateTimeFormatter formatter)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    plusDays(long days)
    plusHours(long hours)
    plusMinutes(long minutes)
    plusMonths(long months)
    plusNanos(long nanos)
    plusSeconds(long seconds)
    plusWeeks(long weeks)
    plusYears(long years)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    truncatedTo(java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withDayOfMonth(int dayOfMonth)
    withDayOfYear(int dayOfYear)
    withHour(int hour)
    withMinute(int minute)
    withMonth(int month)
    withNano(int nanoOfSecond)
    withSecond(int second)
    withYear(int year)
    withZoneSameInstant(java.time.ZoneId zone)
    withZoneSameLocal(java.time.ZoneId zone)
  class ZoneId
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
    of(java.lang.String zoneId)
    of(java.lang.String zoneId, java.util.Map<java.lang.String,java.lang.String> aliasMap)
    ofOffset(java.lang.String prefix, java.time.ZoneOffset offset)
  class ZoneOffset
    adjustInto(java.time.temporal.Temporal temporal)
    compareTo(java.time.ZoneOffset other)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    of(java.lang.String offsetId)
    ofHours(int hours)
    ofHoursMinutes(int hours, int minutes)
    ofHoursMinutesSeconds(int hours, int minutes, int seconds)
    ofTotalSeconds(int totalSeconds)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)

package java.time.chrono
;---------------------------------------
  class AbstractChronology
    compareTo(java.time.chrono.Chronology other)
    equals(java.lang.Object obj)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
  interface ChronoLocalDate
    adjustInto(java.time.temporal.Temporal temporal)
    atTime(java.time.LocalTime localTime)
    compareTo(java.time.chrono.ChronoLocalDate other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    isAfter(java.time.chrono.ChronoLocalDate other)
    isBefore(java.time.chrono.ChronoLocalDate other)
    isEqual(java.time.chrono.ChronoLocalDate other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    until(java.time.chrono.ChronoLocalDate endDateExclusive)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class ChronoLocalDateImpl<D>
    equals(java.lang.Object obj)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long value)
  interface ChronoLocalDateTime<D>
    adjustInto(java.time.temporal.Temporal temporal)
    atZone(java.time.ZoneId zone)
    compareTo(java.time.chrono.ChronoLocalDateTime<?> other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    isAfter(java.time.chrono.ChronoLocalDateTime<?> other)
    isBefore(java.time.chrono.ChronoLocalDateTime<?> other)
    isEqual(java.time.chrono.ChronoLocalDateTime<?> other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    toEpochSecond(java.time.ZoneOffset offset)
    toInstant(java.time.ZoneOffset offset)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  interface Chronology
    compareTo(java.time.chrono.Chronology other)
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    equals(java.lang.Object obj)
    eraOf(int eraValue)
    from(java.time.temporal.TemporalAccessor temporal)
    getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    of(java.lang.String id)
    ofLocale(java.util.Locale locale)
    period(int years, int months, int days)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  interface ChronoPeriod
    addTo(java.time.temporal.Temporal temporal)
    between(java.time.chrono.ChronoLocalDate startDateInclusive, java.time.chrono.ChronoLocalDate endDateExclusive)
    equals(java.lang.Object obj)
    get(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amountToSubtract)
    multipliedBy(int scalar)
    plus(java.time.temporal.TemporalAmount amountToAdd)
    subtractFrom(java.time.temporal.Temporal temporal)
  interface ChronoZonedDateTime<D>
    compareTo(java.time.chrono.ChronoZonedDateTime<?> other)
    equals(java.lang.Object obj)
    format(java.time.format.DateTimeFormatter formatter)
    from(java.time.temporal.TemporalAccessor temporal)
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isAfter(java.time.chrono.ChronoZonedDateTime<?> other)
    isBefore(java.time.chrono.ChronoZonedDateTime<?> other)
    isEqual(java.time.chrono.ChronoZonedDateTime<?> other)
    isSupported(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withZoneSameInstant(java.time.ZoneId zone)
    withZoneSameLocal(java.time.ZoneId zone)
  interface Era
    adjustInto(java.time.temporal.Temporal temporal)
    get(java.time.temporal.TemporalField field)
    getDisplayName(java.time.format.TextStyle style, java.util.Locale locale)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
  class HijrahChronology
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    eraOf(int eraValue)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  class HijrahDate
    atTime(java.time.LocalTime localTime)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    getLong(java.time.temporal.TemporalField field)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int prolepticYear, int month, int dayOfMonth)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    range(java.time.temporal.TemporalField field)
    until(java.time.chrono.ChronoLocalDate endDate)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
    withVariant(java.time.chrono.HijrahChronology chronology)
  class HijrahEra
    of(int hijrahEra)
    range(java.time.temporal.TemporalField field)
    valueOf(java.lang.String name)
  class IsoChronology
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    eraOf(int eraValue)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    period(int years, int months, int days)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  class IsoEra
    of(int isoEra)
    valueOf(java.lang.String name)
  class JapaneseChronology
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    eraOf(int eraValue)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  class JapaneseDate
    atTime(java.time.LocalTime localTime)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int prolepticYear, int month, int dayOfMonth)
    of(java.time.chrono.JapaneseEra era, int yearOfEra, int month, int dayOfMonth)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    range(java.time.temporal.TemporalField field)
    until(java.time.chrono.ChronoLocalDate endDate)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class JapaneseEra
    of(int japaneseEra)
    range(java.time.temporal.TemporalField field)
    valueOf(java.lang.String japaneseEra)
  class MinguoChronology
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    eraOf(int eraValue)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  class MinguoDate
    atTime(java.time.LocalTime localTime)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    getLong(java.time.temporal.TemporalField field)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int prolepticYear, int month, int dayOfMonth)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    range(java.time.temporal.TemporalField field)
    until(java.time.chrono.ChronoLocalDate endDate)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class MinguoEra
    of(int minguoEra)
    valueOf(java.lang.String name)
  class ThaiBuddhistChronology
    date(int prolepticYear, int month, int dayOfMonth)
    date(java.time.chrono.Era era, int yearOfEra, int month, int dayOfMonth)
    date(java.time.temporal.TemporalAccessor temporal)
    dateEpochDay(long epochDay)
    dateNow(java.time.Clock clock)
    dateNow(java.time.ZoneId zone)
    dateYearDay(int prolepticYear, int dayOfYear)
    dateYearDay(java.time.chrono.Era era, int yearOfEra, int dayOfYear)
    eraOf(int eraValue)
    isLeapYear(long prolepticYear)
    localDateTime(java.time.temporal.TemporalAccessor temporal)
    prolepticYear(java.time.chrono.Era era, int yearOfEra)
    range(java.time.temporal.ChronoField field)
    resolveDate(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.format.ResolverStyle resolverStyle)
    zonedDateTime(java.time.Instant instant, java.time.ZoneId zone)
    zonedDateTime(java.time.temporal.TemporalAccessor temporal)
  class ThaiBuddhistDate
    atTime(java.time.LocalTime localTime)
    equals(java.lang.Object obj)
    from(java.time.temporal.TemporalAccessor temporal)
    getLong(java.time.temporal.TemporalField field)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    now(java.time.Clock clock)
    now(java.time.ZoneId zone)
    of(int prolepticYear, int month, int dayOfMonth)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    range(java.time.temporal.TemporalField field)
    until(java.time.chrono.ChronoLocalDate endDate)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  class ThaiBuddhistEra
    of(int thaiBuddhistEra)
    valueOf(java.lang.String name)

package java.time.format
;---------------------------------------
  class DateTimeFormatter
    format(java.time.temporal.TemporalAccessor temporal)
    formatTo(java.time.temporal.TemporalAccessor temporal, java.lang.Appendable appendable)
    ofLocalizedDate(java.time.format.FormatStyle dateStyle)
    ofLocalizedDateTime(java.time.format.FormatStyle dateTimeStyle)
    ofLocalizedDateTime(java.time.format.FormatStyle dateStyle, java.time.format.FormatStyle timeStyle)
    ofLocalizedTime(java.time.format.FormatStyle timeStyle)
    ofPattern(java.lang.String pattern)
    ofPattern(java.lang.String pattern, java.util.Locale locale)
    parse(java.lang.CharSequence text)
    parse(java.lang.CharSequence text, java.text.ParsePosition position)
    <T> parse(java.lang.CharSequence text, java.time.temporal.TemporalQuery<T> query)
    parseBest(java.lang.CharSequence text, java.time.temporal.TemporalQuery<?>... queries)
    parseUnresolved(java.lang.CharSequence text, java.text.ParsePosition position)
    toFormat(java.time.temporal.TemporalQuery<?> parseQuery)
    withChronology(java.time.chrono.Chronology chrono)
    withDecimalStyle(java.time.format.DecimalStyle decimalStyle)
    withLocale(java.util.Locale locale)
    withResolverFields(java.time.temporal.TemporalField... resolverFields)
    withResolverFields(java.util.Set<java.time.temporal.TemporalField> resolverFields)
    withResolverStyle(java.time.format.ResolverStyle resolverStyle)
    withZone(java.time.ZoneId zone)
  class DateTimeFormatterBuilder
    append(java.time.format.DateTimeFormatter formatter)
    appendChronologyText(java.time.format.TextStyle textStyle)
    appendFraction(java.time.temporal.TemporalField field, int minWidth, int maxWidth, boolean decimalPoint)
    appendInstant(int fractionalDigits)
    appendLiteral(char literal)
    appendLiteral(java.lang.String literal)
    appendLocalized(java.time.format.FormatStyle dateStyle, java.time.format.FormatStyle timeStyle)
    appendLocalizedOffset(java.time.format.TextStyle style)
    appendOffset(java.lang.String pattern, java.lang.String noOffsetText)
    appendOptional(java.time.format.DateTimeFormatter formatter)
    appendPattern(java.lang.String pattern)
    appendText(java.time.temporal.TemporalField field)
    appendText(java.time.temporal.TemporalField field, java.time.format.TextStyle textStyle)
    appendText(java.time.temporal.TemporalField field, java.util.Map<java.lang.Long,java.lang.String> textLookup)
    appendValue(java.time.temporal.TemporalField field)
    appendValue(java.time.temporal.TemporalField field, int width)
    appendValue(java.time.temporal.TemporalField field, int minWidth, int maxWidth, java.time.format.SignStyle signStyle)
    appendValueReduced(java.time.temporal.TemporalField field, int width, int maxWidth, int baseValue)
    appendValueReduced(java.time.temporal.TemporalField field, int width, int maxWidth, java.time.chrono.ChronoLocalDate baseDate)
    appendZoneText(java.time.format.TextStyle textStyle)
    appendZoneText(java.time.format.TextStyle textStyle, java.util.Set<java.time.ZoneId> preferredZones)
    getLocalizedDateTimePattern(java.time.format.FormatStyle dateStyle, java.time.format.FormatStyle timeStyle, java.time.chrono.Chronology chrono, java.util.Locale locale)
    padNext(int padWidth)
    padNext(int padWidth, char padChar)
    parseDefaulting(java.time.temporal.TemporalField field, long value)
    toFormatter(java.util.Locale locale)
  class DateTimeParseException
    #ctor(java.lang.String message, java.lang.CharSequence parsedData, int errorIndex)
    #ctor(java.lang.String message, java.lang.CharSequence parsedData, int errorIndex, java.lang.Throwable cause)
  class DecimalStyle
    equals(java.lang.Object obj)
    of(java.util.Locale locale)
    withDecimalSeparator(char decimalSeparator)
    withNegativeSign(char negativeSign)
    withPositiveSign(char positiveSign)
    withZeroDigit(char zeroDigit)
  class FormatStyle
    valueOf(java.lang.String name)
  class ResolverStyle
    valueOf(java.lang.String name)
  class SignStyle
    valueOf(java.lang.String name)
  class TextStyle
    valueOf(java.lang.String name)

package java.time.temporal
;---------------------------------------
  class ChronoField
    <R> adjustInto(R temporal, long newValue)
    checkValidIntValue(long value)
    checkValidValue(long value)
    getDisplayName(java.util.Locale locale)
    getFrom(java.time.temporal.TemporalAccessor temporal)
    isSupportedBy(java.time.temporal.TemporalAccessor temporal)
    rangeRefinedBy(java.time.temporal.TemporalAccessor temporal)
    valueOf(java.lang.String name)
  class ChronoUnit
    <R> addTo(R temporal, long amount)
    between(java.time.temporal.Temporal temporal1Inclusive, java.time.temporal.Temporal temporal2Exclusive)
    isSupportedBy(java.time.temporal.Temporal temporal)
    valueOf(java.lang.String name)
  interface Temporal
    isSupported(java.time.temporal.TemporalUnit unit)
    minus(java.time.temporal.TemporalAmount amount)
    minus(long amountToSubtract, java.time.temporal.TemporalUnit unit)
    plus(java.time.temporal.TemporalAmount amount)
    plus(long amountToAdd, java.time.temporal.TemporalUnit unit)
    until(java.time.temporal.Temporal endExclusive, java.time.temporal.TemporalUnit unit)
    with(java.time.temporal.TemporalAdjuster adjuster)
    with(java.time.temporal.TemporalField field, long newValue)
  interface TemporalAccessor
    get(java.time.temporal.TemporalField field)
    getLong(java.time.temporal.TemporalField field)
    isSupported(java.time.temporal.TemporalField field)
    <R> query(java.time.temporal.TemporalQuery<R> query)
    range(java.time.temporal.TemporalField field)
  interface TemporalAdjuster
    adjustInto(java.time.temporal.Temporal temporal)
  class TemporalAdjusters
    dayOfWeekInMonth(int ordinal, java.time.DayOfWeek dayOfWeek)
    firstInMonth(java.time.DayOfWeek dayOfWeek)
    lastInMonth(java.time.DayOfWeek dayOfWeek)
    next(java.time.DayOfWeek dayOfWeek)
    nextOrSame(java.time.DayOfWeek dayOfWeek)
    ofDateAdjuster(java.util.function.UnaryOperator<java.time.LocalDate> dateBasedAdjuster)
    previous(java.time.DayOfWeek dayOfWeek)
    previousOrSame(java.time.DayOfWeek dayOfWeek)
  interface TemporalAmount
    addTo(java.time.temporal.Temporal temporal)
    get(java.time.temporal.TemporalUnit unit)
    subtractFrom(java.time.temporal.Temporal temporal)
  interface TemporalField
    <R> adjustInto(R temporal, long newValue)
    getDisplayName(java.util.Locale locale)
    getFrom(java.time.temporal.TemporalAccessor temporal)
    isSupportedBy(java.time.temporal.TemporalAccessor temporal)
    rangeRefinedBy(java.time.temporal.TemporalAccessor temporal)
    resolve(java.util.Map<java.time.temporal.TemporalField,java.lang.Long> fieldValues, java.time.temporal.TemporalAccessor partialTemporal, java.time.format.ResolverStyle resolverStyle)
  interface TemporalQuery<R>
    queryFrom(java.time.temporal.TemporalAccessor temporal)
  interface TemporalUnit
    <R> addTo(R temporal, long amount)
    between(java.time.temporal.Temporal temporal1Inclusive, java.time.temporal.Temporal temporal2Exclusive)
    isSupportedBy(java.time.temporal.Temporal temporal)
  class UnsupportedTemporalTypeException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
  class ValueRange
    checkValidIntValue(long value, java.time.temporal.TemporalField field)
    checkValidValue(long value, java.time.temporal.TemporalField field)
    equals(java.lang.Object obj)
    isValidIntValue(long value)
    isValidValue(long value)
    of(long min, long max)
    of(long min, long maxSmallest, long maxLargest)
    of(long minSmallest, long minLargest, long maxSmallest, long maxLargest)
  class WeekFields
    equals(java.lang.Object object)
    of(java.time.DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek)
    of(java.util.Locale locale)

package java.time.zone
;---------------------------------------
  class ZoneOffsetTransition
    compareTo(java.time.zone.ZoneOffsetTransition transition)
    equals(java.lang.Object other)
    isValidOffset(java.time.ZoneOffset offset)
    of(java.time.LocalDateTime transition, java.time.ZoneOffset offsetBefore, java.time.ZoneOffset offsetAfter)
  class ZoneOffsetTransitionRule
    createTransition(int year)
    equals(java.lang.Object otherRule)
    of(java.time.Month month, int dayOfMonthIndicator, java.time.DayOfWeek dayOfWeek, java.time.LocalTime time, boolean timeEndOfDay, java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefnition, java.time.ZoneOffset standardOffset, java.time.ZoneOffset offsetBefore, java.time.ZoneOffset offsetAfter)
  class ZoneOffsetTransitionRule.TimeDefinition
    createDateTime(java.time.LocalDateTime dateTime, java.time.ZoneOffset standardOffset, java.time.ZoneOffset wallOffset)
    valueOf(java.lang.String name)
  class ZoneRules
    equals(java.lang.Object otherRules)
    getDaylightSavings(java.time.Instant instant)
    getOffset(java.time.Instant instant)
    getOffset(java.time.LocalDateTime localDateTime)
    getStandardOffset(java.time.Instant instant)
    getTransition(java.time.LocalDateTime localDateTime)
    getValidOffsets(java.time.LocalDateTime localDateTime)
    isDaylightSavings(java.time.Instant instant)
    isValidOffset(java.time.LocalDateTime localDateTime, java.time.ZoneOffset offset)
    nextTransition(java.time.Instant instant)
    of(java.time.ZoneOffset offset)
    of(java.time.ZoneOffset baseStandardOffset, java.time.ZoneOffset baseWallOffset, java.util.List<java.time.zone.ZoneOffsetTransition> standardOffsetTransitionList, java.util.List<java.time.zone.ZoneOffsetTransition> transitionList, java.util.List<java.time.zone.ZoneOffsetTransitionRule> lastRules)
    previousTransition(java.time.Instant instant)
  class ZoneRulesException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)

package java.util
;---------------------------------------
  class AbstractCollection<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    retainAll(java.util.Collection<?> c)
    <T> toArray(T[] a)
  class AbstractList<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    equals(java.lang.Object o)
    get(int index)
    indexOf(java.lang.Object o)
    lastIndexOf(java.lang.Object o)
    listIterator(int index)
    remove(int index)
    removeRange(int fromIndex, int toIndex)
    set(int index, E element)
    subList(int fromIndex, int toIndex)
  class AbstractMap<K,V>
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    get(java.lang.Object key)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    remove(java.lang.Object key)
  class AbstractMap.SimpleEntry<K,V>
    #ctor(java.util.Map.Entry<? extends K,? extends V> entry)
    #ctor(K key, V value)
    equals(java.lang.Object o)
    setValue(V value)
  class AbstractMap.SimpleImmutableEntry<K,V>
    #ctor(java.util.Map.Entry<? extends K,? extends V> entry)
    #ctor(K key, V value)
    equals(java.lang.Object o)
    setValue(V value)
  class AbstractQueue<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
  class AbstractSequentialList<E>
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    get(int index)
    listIterator(int index)
    remove(int index)
    set(int index, E element)
  class AbstractSet<E>
    equals(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
  class ArrayDeque<E>
    add(E e)
    addFirst(E e)
    addLast(E e)
    #ctor(int numElements)
    #ctor(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    offer(E e)
    offerFirst(E e)
    offerLast(E e)
    push(E e)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
    <T> toArray(T[] a)
  class ArrayList<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    addAll(java.util.Collection<? extends E> c)
    #ctor(int initialCapacity)
    #ctor(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    ensureCapacity(int minCapacity)
    forEach(java.util.function.Consumer<? super E> action)
    get(int index)
    indexOf(java.lang.Object o)
    lastIndexOf(java.lang.Object o)
    listIterator(int index)
    remove(int index)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    removeIf(java.util.function.Predicate<? super E> filter)
    removeRange(int fromIndex, int toIndex)
    replaceAll(java.util.function.UnaryOperator<E> operator)
    retainAll(java.util.Collection<?> c)
    set(int index, E element)
    sort(java.util.Comparator<? super E> c)
    subList(int fromIndex, int toIndex)
    <T> toArray(T[] a)
  class Arrays
    <T> asList(T... a)
    binarySearch(byte[] a, byte key)
    binarySearch(byte[] a, int fromIndex, int toIndex, byte key)
    binarySearch(char[] a, char key)
    binarySearch(char[] a, int fromIndex, int toIndex, char key)
    binarySearch(double[] a, double key)
    binarySearch(double[] a, int fromIndex, int toIndex, double key)
    binarySearch(float[] a, float key)
    binarySearch(float[] a, int fromIndex, int toIndex, float key)
    binarySearch(int[] a, int key)
    binarySearch(int[] a, int fromIndex, int toIndex, int key)
    binarySearch(java.lang.Object[] a, int fromIndex, int toIndex, java.lang.Object key)
    binarySearch(java.lang.Object[] a, java.lang.Object key)
    binarySearch(long[] a, int fromIndex, int toIndex, long key)
    binarySearch(long[] a, long key)
    binarySearch(short[] a, int fromIndex, int toIndex, short key)
    binarySearch(short[] a, short key)
    <T> binarySearch(T[] a, int fromIndex, int toIndex, T key, java.util.Comparator<? super T> c)
    <T> binarySearch(T[] a, T key, java.util.Comparator<? super T> c)
    copyOf(boolean[] original, int newLength)
    copyOf(byte[] original, int newLength)
    copyOf(char[] original, int newLength)
    copyOf(double[] original, int newLength)
    copyOf(float[] original, int newLength)
    copyOf(int[] original, int newLength)
    copyOf(long[] original, int newLength)
    copyOf(short[] original, int newLength)
    <T> copyOf(T[] original, int newLength)
    <T,U> copyOf(U[] original, int newLength, java.lang.Class<? extends T[]> newType)
    copyOfRange(boolean[] original, int from, int to)
    copyOfRange(byte[] original, int from, int to)
    copyOfRange(char[] original, int from, int to)
    copyOfRange(double[] original, int from, int to)
    copyOfRange(float[] original, int from, int to)
    copyOfRange(int[] original, int from, int to)
    copyOfRange(long[] original, int from, int to)
    copyOfRange(short[] original, int from, int to)
    <T> copyOfRange(T[] original, int from, int to)
    <T,U> copyOfRange(U[] original, int from, int to, java.lang.Class<? extends T[]> newType)
    deepEquals(java.lang.Object[] a1, java.lang.Object[] a2)
    deepHashCode(java.lang.Object[] a)
    deepToString(java.lang.Object[] a)
    equals(boolean[] a, boolean[] a2)
    equals(byte[] a, byte[] a2)
    equals(char[] a, char[] a2)
    equals(double[] a, double[] a2)
    equals(float[] a, float[] a2)
    equals(int[] a, int[] a2)
    equals(java.lang.Object[] a, java.lang.Object[] a2)
    equals(long[] a, long[] a2)
    equals(short[] a, short[] a2)
    fill(boolean[] a, boolean val)
    fill(boolean[] a, int fromIndex, int toIndex, boolean val)
    fill(byte[] a, byte val)
    fill(byte[] a, int fromIndex, int toIndex, byte val)
    fill(char[] a, char val)
    fill(char[] a, int fromIndex, int toIndex, char val)
    fill(double[] a, double val)
    fill(double[] a, int fromIndex, int toIndex, double val)
    fill(float[] a, float val)
    fill(float[] a, int fromIndex, int toIndex, float val)
    fill(int[] a, int val)
    fill(int[] a, int fromIndex, int toIndex, int val)
    fill(java.lang.Object[] a, int fromIndex, int toIndex, java.lang.Object val)
    fill(java.lang.Object[] a, java.lang.Object val)
    fill(long[] a, int fromIndex, int toIndex, long val)
    fill(long[] a, long val)
    fill(short[] a, int fromIndex, int toIndex, short val)
    fill(short[] a, short val)
    hashCode(boolean[] a)
    hashCode(byte[] a)
    hashCode(char[] a)
    hashCode(double[] a)
    hashCode(float[] a)
    hashCode(int[] a)
    hashCode(java.lang.Object[] a)
    hashCode(long[] a)
    hashCode(short[] a)
    parallelPrefix(double[] array, int fromIndex, int toIndex, java.util.function.DoubleBinaryOperator op)
    parallelPrefix(double[] array, java.util.function.DoubleBinaryOperator op)
    parallelPrefix(int[] array, int fromIndex, int toIndex, java.util.function.IntBinaryOperator op)
    parallelPrefix(int[] array, java.util.function.IntBinaryOperator op)
    parallelPrefix(long[] array, int fromIndex, int toIndex, java.util.function.LongBinaryOperator op)
    parallelPrefix(long[] array, java.util.function.LongBinaryOperator op)
    <T> parallelPrefix(T[] array, int fromIndex, int toIndex, java.util.function.BinaryOperator<T> op)
    <T> parallelPrefix(T[] array, java.util.function.BinaryOperator<T> op)
    parallelSetAll(double[] array, java.util.function.IntToDoubleFunction generator)
    parallelSetAll(int[] array, java.util.function.IntUnaryOperator generator)
    parallelSetAll(long[] array, java.util.function.IntToLongFunction generator)
    <T> parallelSetAll(T[] array, java.util.function.IntFunction<? extends T> generator)
    parallelSort(byte[] a)
    parallelSort(byte[] a, int fromIndex, int toIndex)
    parallelSort(char[] a)
    parallelSort(char[] a, int fromIndex, int toIndex)
    parallelSort(double[] a)
    parallelSort(double[] a, int fromIndex, int toIndex)
    parallelSort(float[] a)
    parallelSort(float[] a, int fromIndex, int toIndex)
    parallelSort(int[] a)
    parallelSort(int[] a, int fromIndex, int toIndex)
    parallelSort(long[] a)
    parallelSort(long[] a, int fromIndex, int toIndex)
    parallelSort(short[] a)
    parallelSort(short[] a, int fromIndex, int toIndex)
    <T> parallelSort(T[] a)
    <T> parallelSort(T[] a, int fromIndex, int toIndex)
    <T> parallelSort(T[] a, int fromIndex, int toIndex, java.util.Comparator<? super T> cmp)
    <T> parallelSort(T[] a, java.util.Comparator<? super T> cmp)
    setAll(double[] array, java.util.function.IntToDoubleFunction generator)
    setAll(int[] array, java.util.function.IntUnaryOperator generator)
    setAll(long[] array, java.util.function.IntToLongFunction generator)
    <T> setAll(T[] array, java.util.function.IntFunction<? extends T> generator)
    sort(byte[] a)
    sort(byte[] a, int fromIndex, int toIndex)
    sort(char[] a)
    sort(char[] a, int fromIndex, int toIndex)
    sort(double[] a)
    sort(double[] a, int fromIndex, int toIndex)
    sort(float[] a)
    sort(float[] a, int fromIndex, int toIndex)
    sort(int[] a)
    sort(int[] a, int fromIndex, int toIndex)
    sort(java.lang.Object[] a)
    sort(java.lang.Object[] a, int fromIndex, int toIndex)
    sort(long[] a)
    sort(long[] a, int fromIndex, int toIndex)
    sort(short[] a)
    sort(short[] a, int fromIndex, int toIndex)
    <T> sort(T[] a, int fromIndex, int toIndex, java.util.Comparator<? super T> c)
    <T> sort(T[] a, java.util.Comparator<? super T> c)
    spliterator(double[] array)
    spliterator(double[] array, int startInclusive, int endExclusive)
    spliterator(int[] array)
    spliterator(int[] array, int startInclusive, int endExclusive)
    spliterator(long[] array)
    spliterator(long[] array, int startInclusive, int endExclusive)
    <T> spliterator(T[] array)
    <T> spliterator(T[] array, int startInclusive, int endExclusive)
    stream(double[] array)
    stream(double[] array, int startInclusive, int endExclusive)
    stream(int[] array)
    stream(int[] array, int startInclusive, int endExclusive)
    stream(long[] array)
    stream(long[] array, int startInclusive, int endExclusive)
    <T> stream(T[] array)
    <T> stream(T[] array, int startInclusive, int endExclusive)
    toString(boolean[] a)
    toString(byte[] a)
    toString(char[] a)
    toString(double[] a)
    toString(float[] a)
    toString(int[] a)
    toString(java.lang.Object[] a)
    toString(long[] a)
    toString(short[] a)
  class Base64
    getMimeEncoder(int lineLength, byte[] lineSeparator)
  class Base64.Decoder
    decode(byte[] src)
    decode(byte[] src, byte[] dst)
    decode(java.lang.String src)
    decode(java.nio.ByteBuffer buffer)
    wrap(java.io.InputStream is)
  class Base64.Encoder
    encode(byte[] src)
    encode(byte[] src, byte[] dst)
    encode(java.nio.ByteBuffer buffer)
    encodeToString(byte[] src)
    wrap(java.io.OutputStream os)
  class BitSet
    and(java.util.BitSet set)
    andNot(java.util.BitSet set)
    #ctor(int nbits)
    clear(int bitIndex)
    clear(int fromIndex, int toIndex)
    equals(java.lang.Object obj)
    flip(int bitIndex)
    flip(int fromIndex, int toIndex)
    get(int bitIndex)
    get(int fromIndex, int toIndex)
    intersects(java.util.BitSet set)
    nextClearBit(int fromIndex)
    nextSetBit(int fromIndex)
    or(java.util.BitSet set)
    previousClearBit(int fromIndex)
    previousSetBit(int fromIndex)
    set(int bitIndex)
    set(int bitIndex, boolean value)
    set(int fromIndex, int toIndex)
    set(int fromIndex, int toIndex, boolean value)
    valueOf(byte[] bytes)
    valueOf(java.nio.ByteBuffer bb)
    valueOf(java.nio.LongBuffer lb)
    valueOf(long[] longs)
    xor(java.util.BitSet set)
  class Calendar
    add(int field, int amount)
    after(java.lang.Object when)
    before(java.lang.Object when)
    #ctor(java.util.TimeZone zone, java.util.Locale aLocale)
    clear(int field)
    compareTo(java.util.Calendar anotherCalendar)
    equals(java.lang.Object obj)
    get(int field)
    getActualMaximum(int field)
    getActualMinimum(int field)
    getDisplayName(int field, int style, java.util.Locale locale)
    getDisplayNames(int field, int style, java.util.Locale locale)
    getGreatestMinimum(int field)
    getInstance(java.util.Locale aLocale)
    getInstance(java.util.TimeZone zone)
    getInstance(java.util.TimeZone zone, java.util.Locale aLocale)
    getLeastMaximum(int field)
    getMaximum(int field)
    getMinimum(int field)
    internalGet(int field)
    isSet(int field)
    roll(int field, boolean up)
    roll(int field, int amount)
    set(int field, int value)
    set(int year, int month, int date)
    set(int year, int month, int date, int hourOfDay, int minute)
    set(int year, int month, int date, int hourOfDay, int minute, int second)
    setFirstDayOfWeek(int value)
    setLenient(boolean lenient)
    setMinimalDaysInFirstWeek(int value)
    setTime(java.util.Date date)
    setTimeInMillis(long millis)
    setTimeZone(java.util.TimeZone value)
    setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
  class Calendar.Builder
    set(int field, int value)
    setCalendarType(java.lang.String type)
    setDate(int year, int month, int dayOfMonth)
    setFields(int... fieldValuePairs)
    setInstant(java.util.Date instant)
    setInstant(long instant)
    setLenient(boolean lenient)
    setLocale(java.util.Locale locale)
    setTimeOfDay(int hourOfDay, int minute, int second)
    setTimeOfDay(int hourOfDay, int minute, int second, int millis)
    setTimeZone(java.util.TimeZone zone)
    setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
    setWeekDefinition(int firstDayOfWeek, int minimalDaysInFirstWeek)
  interface Collection<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    equals(java.lang.Object o)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    removeIf(java.util.function.Predicate<? super E> filter)
    retainAll(java.util.Collection<?> c)
    <T> toArray(T[] a)
  class Collections
    <T> addAll(java.util.Collection<? super T> c, T... elements)
    <T> asLifoQueue(java.util.Deque<T> deque)
    <T> binarySearch(java.util.List<? extends java.lang.Comparable<? super T>> list, T key)
    <T> binarySearch(java.util.List<? extends T> list, T key, java.util.Comparator<? super T> c)
    <E> checkedCollection(java.util.Collection<E> c, java.lang.Class<E> type)
    <E> checkedList(java.util.List<E> list, java.lang.Class<E> type)
    <K,V> checkedMap(java.util.Map<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    <K,V> checkedNavigableMap(java.util.NavigableMap<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    <E> checkedNavigableSet(java.util.NavigableSet<E> s, java.lang.Class<E> type)
    <E> checkedQueue(java.util.Queue<E> queue, java.lang.Class<E> type)
    <E> checkedSet(java.util.Set<E> s, java.lang.Class<E> type)
    <K,V> checkedSortedMap(java.util.SortedMap<K,V> m, java.lang.Class<K> keyType, java.lang.Class<V> valueType)
    <E> checkedSortedSet(java.util.SortedSet<E> s, java.lang.Class<E> type)
    <T> copy(java.util.List<? super T> dest, java.util.List<? extends T> src)
    disjoint(java.util.Collection<?> c1, java.util.Collection<?> c2)
    <T> enumeration(java.util.Collection<T> c)
    <T> fill(java.util.List<? super T> list, T obj)
    frequency(java.util.Collection<?> c, java.lang.Object o)
    indexOfSubList(java.util.List<?> source, java.util.List<?> target)
    lastIndexOfSubList(java.util.List<?> source, java.util.List<?> target)
    <T> list(java.util.Enumeration<T> e)
    <T> max(java.util.Collection<? extends T> coll)
    <T> max(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
    <T> min(java.util.Collection<? extends T> coll)
    <T> min(java.util.Collection<? extends T> coll, java.util.Comparator<? super T> comp)
    <T> nCopies(int n, T o)
    <E> newSetFromMap(java.util.Map<E,java.lang.Boolean> map)
    <T> replaceAll(java.util.List<T> list, T oldVal, T newVal)
    reverse(java.util.List<?> list)
    <T> reverseOrder(java.util.Comparator<T> cmp)
    rotate(java.util.List<?> list, int distance)
    shuffle(java.util.List<?> list)
    shuffle(java.util.List<?> list, java.util.Random rnd)
    <T> singleton(T o)
    <T> singletonList(T o)
    <K,V> singletonMap(K key, V value)
    <T> sort(java.util.List<T> list)
    <T> sort(java.util.List<T> list, java.util.Comparator<? super T> c)
    swap(java.util.List<?> list, int i, int j)
    <T> synchronizedCollection(java.util.Collection<T> c)
    <T> synchronizedList(java.util.List<T> list)
    <K,V> synchronizedMap(java.util.Map<K,V> m)
    <K,V> synchronizedNavigableMap(java.util.NavigableMap<K,V> m)
    <T> synchronizedNavigableSet(java.util.NavigableSet<T> s)
    <T> synchronizedSet(java.util.Set<T> s)
    <K,V> synchronizedSortedMap(java.util.SortedMap<K,V> m)
    <T> synchronizedSortedSet(java.util.SortedSet<T> s)
    <T> unmodifiableCollection(java.util.Collection<? extends T> c)
    <T> unmodifiableList(java.util.List<? extends T> list)
    <K,V> unmodifiableMap(java.util.Map<? extends K,? extends V> m)
    <K,V> unmodifiableNavigableMap(java.util.NavigableMap<K,? extends V> m)
    <T> unmodifiableNavigableSet(java.util.NavigableSet<T> s)
    <T> unmodifiableSet(java.util.Set<? extends T> s)
    <K,V> unmodifiableSortedMap(java.util.SortedMap<K,? extends V> m)
    <T> unmodifiableSortedSet(java.util.SortedSet<T> s)
  interface Comparator<T>
    compare(T o1, T o2)
    <T,U> comparing(java.util.function.Function<? super T,? extends U> keyExtractor)
    <T,U> comparing(java.util.function.Function<? super T,? extends U> keyExtractor, java.util.Comparator<? super U> keyComparator)
    <T> comparingDouble(java.util.function.ToDoubleFunction<? super T> keyExtractor)
    <T> comparingInt(java.util.function.ToIntFunction<? super T> keyExtractor)
    <T> comparingLong(java.util.function.ToLongFunction<? super T> keyExtractor)
    equals(java.lang.Object obj)
    <T> nullsFirst(java.util.Comparator<? super T> comparator)
    <T> nullsLast(java.util.Comparator<? super T> comparator)
    thenComparing(java.util.Comparator<? super T> other)
    <U> thenComparing(java.util.function.Function<? super T,? extends U> keyExtractor)
    <U> thenComparing(java.util.function.Function<? super T,? extends U> keyExtractor, java.util.Comparator<? super U> keyComparator)
    thenComparingDouble(java.util.function.ToDoubleFunction<? super T> keyExtractor)
    thenComparingInt(java.util.function.ToIntFunction<? super T> keyExtractor)
    thenComparingLong(java.util.function.ToLongFunction<? super T> keyExtractor)
  class ConcurrentModificationException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class Currency
    getDisplayName(java.util.Locale locale)
    getInstance(java.lang.String currencyCode)
    getInstance(java.util.Locale locale)
    getSymbol(java.util.Locale locale)
  class Date
    after(java.util.Date when)
    before(java.util.Date when)
    compareTo(java.util.Date anotherDate)
    #ctor(int year, int month, int date)
    #ctor(int year, int month, int date, int hrs, int min)
    #ctor(int year, int month, int date, int hrs, int min, int sec)
    #ctor(java.lang.String s)
    #ctor(long date)
    equals(java.lang.Object obj)
    from(java.time.Instant instant)
    parse(java.lang.String s)
    setDate(int date)
    setHours(int hours)
    setMinutes(int minutes)
    setMonth(int month)
    setSeconds(int seconds)
    setTime(long time)
    setYear(int year)
    UTC(int year, int month, int date, int hrs, int min, int sec)
  interface Deque<E>
    add(E e)
    addFirst(E e)
    addLast(E e)
    contains(java.lang.Object o)
    offer(E e)
    offerFirst(E e)
    offerLast(E e)
    push(E e)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
  class Dictionary<K,V>
    get(java.lang.Object key)
    put(K key, V value)
    remove(java.lang.Object key)
  class DoubleSummaryStatistics
    accept(double value)
    combine(java.util.DoubleSummaryStatistics other)
  class DuplicateFormatFlagsException
    #ctor(java.lang.String f)
  class EnumMap<K,V>
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    #ctor(java.lang.Class<K> keyType)
    #ctor(java.util.EnumMap<K,? extends V> m)
    #ctor(java.util.Map<K,? extends V> m)
    equals(java.lang.Object o)
    get(java.lang.Object key)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    remove(java.lang.Object key)
  class EnumSet<E>
    <E> allOf(java.lang.Class<E> elementType)
    <E> complementOf(java.util.EnumSet<E> s)
    <E> copyOf(java.util.Collection<E> c)
    <E> copyOf(java.util.EnumSet<E> s)
    <E> noneOf(java.lang.Class<E> elementType)
    <E> of(E e)
    <E> of(E e1, E e2)
    <E> of(E e1, E e2, E e3)
    <E> of(E e1, E e2, E e3, E e4)
    <E> of(E e1, E e2, E e3, E e4, E e5)
    <E> of(E first, E... rest)
    <E> range(E from, E to)
  class EventListenerProxy<T>
    #ctor(T listener)
  class EventObject
    #ctor(java.lang.Object source)
  class FormatFlagsConversionMismatchException
    #ctor(java.lang.String f, char c)
  interface Formattable
    formatTo(java.util.Formatter formatter, int flags, int width, int precision)
  class Formatter
    format(java.lang.String format, java.lang.Object... args)
    format(java.util.Locale l, java.lang.String format, java.lang.Object... args)
    #ctor(java.io.File file)
    #ctor(java.io.File file, java.lang.String csn)
    #ctor(java.io.File file, java.lang.String csn, java.util.Locale l)
    #ctor(java.io.OutputStream os)
    #ctor(java.io.OutputStream os, java.lang.String csn)
    #ctor(java.io.OutputStream os, java.lang.String csn, java.util.Locale l)
    #ctor(java.io.PrintStream ps)
    #ctor(java.lang.Appendable a)
    #ctor(java.lang.Appendable a, java.util.Locale l)
    #ctor(java.lang.String fileName)
    #ctor(java.lang.String fileName, java.lang.String csn)
    #ctor(java.lang.String fileName, java.lang.String csn, java.util.Locale l)
    #ctor(java.util.Locale l)
  class Formatter.BigDecimalLayoutForm
    valueOf(java.lang.String name)
  class GregorianCalendar
    add(int field, int amount)
    equals(java.lang.Object obj)
    from(java.time.ZonedDateTime zdt)
    getActualMaximum(int field)
    getActualMinimum(int field)
    getGreatestMinimum(int field)
    getLeastMaximum(int field)
    getMaximum(int field)
    getMinimum(int field)
    #ctor(int year, int month, int dayOfMonth)
    #ctor(int year, int month, int dayOfMonth, int hourOfDay, int minute)
    #ctor(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)
    #ctor(java.util.Locale aLocale)
    #ctor(java.util.TimeZone zone)
    #ctor(java.util.TimeZone zone, java.util.Locale aLocale)
    isLeapYear(int year)
    roll(int field, boolean up)
    roll(int field, int amount)
    setGregorianChange(java.util.Date date)
    setTimeZone(java.util.TimeZone zone)
    setWeekDate(int weekYear, int weekOfYear, int dayOfWeek)
  class HashMap<K,V>
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(java.util.Map<? extends K,? extends V> m)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    putIfAbsent(K key, V value)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  class HashSet<E>
    add(E e)
    contains(java.lang.Object o)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(java.util.Collection<? extends E> c)
    remove(java.lang.Object o)
  class Hashtable<K,V>
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    contains(java.lang.Object value)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(java.util.Map<? extends K,? extends V> t)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> t)
    putIfAbsent(K key, V value)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  class IdentityHashMap<K,V>
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    #ctor(int expectedMaxSize)
    #ctor(java.util.Map<? extends K,? extends V> m)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    remove(java.lang.Object key)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  class IllegalFormatCodePointException
    #ctor(int c)
  class IllegalFormatConversionException
    #ctor(char c, java.lang.Class<?> arg)
  class IllegalFormatFlagsException
    #ctor(java.lang.String f)
  class IllegalFormatPrecisionException
    #ctor(int p)
  class IllegalFormatWidthException
    #ctor(int w)
  class IllformedLocaleException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, int errorIndex)
  class InputMismatchException
    #ctor(java.lang.String s)
  class IntSummaryStatistics
    accept(int value)
    combine(java.util.IntSummaryStatistics other)
  class InvalidPropertiesFormatException
    #ctor(java.lang.String message)
    #ctor(java.lang.Throwable cause)
  interface Iterator<E>
    forEachRemaining(java.util.function.Consumer<? super E> action)
  class LinkedHashMap<K,V>
    containsValue(java.lang.Object value)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(int initialCapacity, float loadFactor, boolean accessOrder)
    #ctor(java.util.Map<? extends K,? extends V> m)
    removeEldestEntry(java.util.Map.Entry<K,V> eldest)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  class LinkedHashSet<E>
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(java.util.Collection<? extends E> c)
  class LinkedList<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    addAll(java.util.Collection<? extends E> c)
    addFirst(E e)
    addLast(E e)
    contains(java.lang.Object o)
    get(int index)
    indexOf(java.lang.Object o)
    lastIndexOf(java.lang.Object o)
    #ctor(java.util.Collection<? extends E> c)
    listIterator(int index)
    offer(E e)
    offerFirst(E e)
    offerLast(E e)
    push(E e)
    remove(int index)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
    set(int index, E element)
    <T> toArray(T[] a)
  interface List<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    addAll(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    equals(java.lang.Object o)
    get(int index)
    indexOf(java.lang.Object o)
    lastIndexOf(java.lang.Object o)
    listIterator(int index)
    remove(int index)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    replaceAll(java.util.function.UnaryOperator<E> operator)
    retainAll(java.util.Collection<?> c)
    set(int index, E element)
    sort(java.util.Comparator<? super E> c)
    subList(int fromIndex, int toIndex)
    <T> toArray(T[] a)
  interface ListIterator<E>
    add(E e)
    set(E e)
  class ListResourceBundle
    handleGetObject(java.lang.String key)
  class Locale
    equals(java.lang.Object obj)
    filter(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.util.Locale> locales)
    filter(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.util.Locale> locales, java.util.Locale.FilteringMode mode)
    filterTags(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.lang.String> tags)
    filterTags(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.lang.String> tags, java.util.Locale.FilteringMode mode)
    forLanguageTag(java.lang.String languageTag)
    getDefault(java.util.Locale.Category category)
    getDisplayCountry(java.util.Locale locale)
    getDisplayLanguage(java.util.Locale locale)
    getDisplayName(java.util.Locale locale)
    getDisplayScript(java.util.Locale inLocale)
    getDisplayVariant(java.util.Locale inLocale)
    getExtension(char key)
    getUnicodeLocaleType(java.lang.String key)
    #ctor(java.lang.String language)
    #ctor(java.lang.String language, java.lang.String country)
    #ctor(java.lang.String language, java.lang.String country, java.lang.String variant)
    lookup(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.util.Locale> locales)
    lookupTag(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Collection<java.lang.String> tags)
    setDefault(java.util.Locale newLocale)
    setDefault(java.util.Locale.Category category, java.util.Locale newLocale)
  class Locale.Builder
    addUnicodeLocaleAttribute(java.lang.String attribute)
    removeUnicodeLocaleAttribute(java.lang.String attribute)
    setExtension(char key, java.lang.String value)
    setLanguage(java.lang.String language)
    setLanguageTag(java.lang.String languageTag)
    setLocale(java.util.Locale locale)
    setRegion(java.lang.String region)
    setScript(java.lang.String script)
    setUnicodeLocaleKeyword(java.lang.String key, java.lang.String type)
    setVariant(java.lang.String variant)
  class Locale.Category
    valueOf(java.lang.String name)
  class Locale.FilteringMode
    valueOf(java.lang.String name)
  class Locale.LanguageRange
    equals(java.lang.Object obj)
    #ctor(java.lang.String range)
    #ctor(java.lang.String range, double weight)
    mapEquivalents(java.util.List<java.util.Locale.LanguageRange> priorityList, java.util.Map<java.lang.String,java.util.List<java.lang.String>> map)
    parse(java.lang.String ranges)
    parse(java.lang.String ranges, java.util.Map<java.lang.String,java.util.List<java.lang.String>> map)
  class LongSummaryStatistics
    accept(int value)
    accept(long value)
    combine(java.util.LongSummaryStatistics other)
  interface Map<K,V>
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    putIfAbsent(K key, V value)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  interface Map.Entry<K,V>
    <K,V> comparingByKey(java.util.Comparator<? super K> cmp)
    <K,V> comparingByValue(java.util.Comparator<? super V> cmp)
    equals(java.lang.Object o)
    setValue(V value)
  class MissingFormatArgumentException
    #ctor(java.lang.String s)
  class MissingFormatWidthException
    #ctor(java.lang.String s)
  class MissingResourceException
    #ctor(java.lang.String s, java.lang.String className, java.lang.String key)
  interface NavigableMap<K,V>
    ceilingEntry(K key)
    ceilingKey(K key)
    floorEntry(K key)
    floorKey(K key)
    headMap(K toKey)
    headMap(K toKey, boolean inclusive)
    higherEntry(K key)
    higherKey(K key)
    lowerEntry(K key)
    lowerKey(K key)
    subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
    subMap(K fromKey, K toKey)
    tailMap(K fromKey)
    tailMap(K fromKey, boolean inclusive)
  interface NavigableSet<E>
    ceiling(E e)
    floor(E e)
    headSet(E toElement)
    headSet(E toElement, boolean inclusive)
    higher(E e)
    lower(E e)
    subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
    subSet(E fromElement, E toElement)
    tailSet(E fromElement)
    tailSet(E fromElement, boolean inclusive)
  class NoSuchElementException
    #ctor(java.lang.String s)
  class Objects
    <T> compare(T a, T b, java.util.Comparator<? super T> c)
    deepEquals(java.lang.Object a, java.lang.Object b)
    equals(java.lang.Object a, java.lang.Object b)
    hash(java.lang.Object... values)
    hashCode(java.lang.Object o)
    isNull(java.lang.Object obj)
    nonNull(java.lang.Object obj)
    <T> requireNonNull(T obj)
    <T> requireNonNull(T obj, java.lang.String message)
    <T> requireNonNull(T obj, java.util.function.Supplier<java.lang.String> messageSupplier)
    toString(java.lang.Object o)
    toString(java.lang.Object o, java.lang.String nullDefault)
  class Observable
    addObserver(java.util.Observer o)
    deleteObserver(java.util.Observer o)
    notifyObservers(java.lang.Object arg)
  interface Observer
    update(java.util.Observable o, java.lang.Object arg)
  class Optional<T>
    equals(java.lang.Object obj)
    filter(java.util.function.Predicate<? super T> predicate)
    <U> flatMap(java.util.function.Function<? super T,java.util.Optional<U>> mapper)
    ifPresent(java.util.function.Consumer<? super T> consumer)
    <U> map(java.util.function.Function<? super T,? extends U> mapper)
    <T> of(T value)
    <T> ofNullable(T value)
    orElse(T other)
    orElseGet(java.util.function.Supplier<? extends T> other)
    <X> orElseThrow(java.util.function.Supplier<? extends X> exceptionSupplier)
  class OptionalDouble
    equals(java.lang.Object obj)
    ifPresent(java.util.function.DoubleConsumer consumer)
    of(double value)
    orElse(double other)
    orElseGet(java.util.function.DoubleSupplier other)
    <X> orElseThrow(java.util.function.Supplier<X> exceptionSupplier)
  class OptionalInt
    equals(java.lang.Object obj)
    ifPresent(java.util.function.IntConsumer consumer)
    of(int value)
    orElse(int other)
    orElseGet(java.util.function.IntSupplier other)
    <X> orElseThrow(java.util.function.Supplier<X> exceptionSupplier)
  class OptionalLong
    equals(java.lang.Object obj)
    ifPresent(java.util.function.LongConsumer consumer)
    of(long value)
    orElse(long other)
    orElseGet(java.util.function.LongSupplier other)
    <X> orElseThrow(java.util.function.Supplier<X> exceptionSupplier)
  interface PrimitiveIterator<T,T_CONS>
    forEachRemaining(T_CONS action)
  interface PrimitiveIterator.OfDouble
    forEachRemaining(java.util.function.Consumer<? super java.lang.Double> action)
    forEachRemaining(java.util.function.DoubleConsumer action)
  interface PrimitiveIterator.OfInt
    forEachRemaining(java.util.function.Consumer<? super java.lang.Integer> action)
    forEachRemaining(java.util.function.IntConsumer action)
  interface PrimitiveIterator.OfLong
    forEachRemaining(java.util.function.Consumer<? super java.lang.Long> action)
    forEachRemaining(java.util.function.LongConsumer action)
  class PriorityQueue<E>
    add(E e)
    contains(java.lang.Object o)
    offer(E e)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, java.util.Comparator<? super E> comparator)
    #ctor(java.util.Collection<? extends E> c)
    #ctor(java.util.Comparator<? super E> comparator)
    #ctor(java.util.PriorityQueue<? extends E> c)
    #ctor(java.util.SortedSet<? extends E> c)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  class Properties
    getProperty(java.lang.String key)
    getProperty(java.lang.String key, java.lang.String defaultValue)
    list(java.io.PrintStream out)
    list(java.io.PrintWriter out)
    load(java.io.InputStream inStream)
    load(java.io.Reader reader)
    loadFromXML(java.io.InputStream in)
    #ctor(java.util.Properties defaults)
    save(java.io.OutputStream out, java.lang.String comments)
    setProperty(java.lang.String key, java.lang.String value)
    store(java.io.OutputStream out, java.lang.String comments)
    store(java.io.Writer writer, java.lang.String comments)
    storeToXML(java.io.OutputStream os, java.lang.String comment)
    storeToXML(java.io.OutputStream os, java.lang.String comment, java.lang.String encoding)
  class PropertyPermission
    #ctor(java.lang.String name, java.lang.String actions)
  class PropertyResourceBundle
    handleGetObject(java.lang.String key)
    #ctor(java.io.InputStream stream)
    #ctor(java.io.Reader reader)
  interface Queue<E>
    add(E e)
    offer(E e)
  class Random
    doubles(double randomNumberOrigin, double randomNumberBound)
    doubles(long streamSize)
    doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)
    ints(int randomNumberOrigin, int randomNumberBound)
    ints(long streamSize)
    ints(long streamSize, int randomNumberOrigin, int randomNumberBound)
    longs(long streamSize)
    longs(long randomNumberOrigin, long randomNumberBound)
    longs(long streamSize, long randomNumberOrigin, long randomNumberBound)
    next(int bits)
    nextBytes(byte[] bytes)
    nextInt(int bound)
    #ctor(long seed)
    setSeed(long seed)
  class ResourceBundle
    clearCache(java.lang.ClassLoader loader)
    containsKey(java.lang.String key)
    getBundle(java.lang.String baseName)
    getBundle(java.lang.String baseName, java.util.Locale locale)
    getBundle(java.lang.String baseName, java.util.Locale locale, java.lang.ClassLoader loader)
    getBundle(java.lang.String baseName, java.util.Locale targetLocale, java.lang.ClassLoader loader, java.util.ResourceBundle.Control control)
    getBundle(java.lang.String baseName, java.util.Locale targetLocale, java.util.ResourceBundle.Control control)
    getBundle(java.lang.String baseName, java.util.ResourceBundle.Control control)
    getObject(java.lang.String key)
    getString(java.lang.String key)
    getStringArray(java.lang.String key)
    handleGetObject(java.lang.String key)
    setParent(java.util.ResourceBundle parent)
  class ResourceBundle.Control
    getCandidateLocales(java.lang.String baseName, java.util.Locale locale)
    getControl(java.util.List<java.lang.String> formats)
    getFallbackLocale(java.lang.String baseName, java.util.Locale locale)
    getFormats(java.lang.String baseName)
    getNoFallbackControl(java.util.List<java.lang.String> formats)
    getTimeToLive(java.lang.String baseName, java.util.Locale locale)
    needsReload(java.lang.String baseName, java.util.Locale locale, java.lang.String format, java.lang.ClassLoader loader, java.util.ResourceBundle bundle, long loadTime)
    newBundle(java.lang.String baseName, java.util.Locale locale, java.lang.String format, java.lang.ClassLoader loader, boolean reload)
    toBundleName(java.lang.String baseName, java.util.Locale locale)
    toResourceName(java.lang.String bundleName, java.lang.String suffix)
  class Scanner
    findInLine(java.lang.String pattern)
    findInLine(java.util.regex.Pattern pattern)
    findWithinHorizon(java.lang.String pattern, int horizon)
    findWithinHorizon(java.util.regex.Pattern pattern, int horizon)
    hasNext(java.lang.String pattern)
    hasNext(java.util.regex.Pattern pattern)
    hasNextBigInteger(int radix)
    hasNextByte(int radix)
    hasNextInt(int radix)
    hasNextLong(int radix)
    hasNextShort(int radix)
    next(java.lang.String pattern)
    next(java.util.regex.Pattern pattern)
    nextBigInteger(int radix)
    nextByte(int radix)
    nextInt(int radix)
    nextLong(int radix)
    nextShort(int radix)
    #ctor(java.io.File source)
    #ctor(java.io.File source, java.lang.String charsetName)
    #ctor(java.io.InputStream source)
    #ctor(java.io.InputStream source, java.lang.String charsetName)
    #ctor(java.lang.Readable source)
    #ctor(java.lang.String source)
    #ctor(java.nio.channels.ReadableByteChannel source)
    #ctor(java.nio.channels.ReadableByteChannel source, java.lang.String charsetName)
    #ctor(java.nio.file.Path source)
    #ctor(java.nio.file.Path source, java.lang.String charsetName)
    skip(java.lang.String pattern)
    skip(java.util.regex.Pattern pattern)
    useDelimiter(java.lang.String pattern)
    useDelimiter(java.util.regex.Pattern pattern)
    useLocale(java.util.Locale locale)
    useRadix(int radix)
  class ServiceConfigurationError
    #ctor(java.lang.String msg)
    #ctor(java.lang.String msg, java.lang.Throwable cause)
  class ServiceLoader<S>
    <S> load(java.lang.Class<S> service)
    <S> load(java.lang.Class<S> service, java.lang.ClassLoader loader)
    <S> loadInstalled(java.lang.Class<S> service)
  interface Set<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    equals(java.lang.Object o)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    retainAll(java.util.Collection<?> c)
    <T> toArray(T[] a)
  class SimpleTimeZone
    equals(java.lang.Object obj)
    getOffset(int era, int year, int month, int day, int dayOfWeek, int millis)
    getOffset(long date)
    hasSameRules(java.util.TimeZone other)
    inDaylightTime(java.util.Date date)
    setDSTSavings(int millisSavedDuringDST)
    setEndRule(int endMonth, int endDay, int endTime)
    setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime)
    setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)
    setRawOffset(int offsetMillis)
    setStartRule(int startMonth, int startDay, int startTime)
    setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime)
    setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)
    setStartYear(int year)
    #ctor(int rawOffset, java.lang.String ID)
    #ctor(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime)
    #ctor(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime, int dstSavings)
    #ctor(int rawOffset, java.lang.String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int startTimeMode, int endMonth, int endDay, int endDayOfWeek, int endTime, int endTimeMode, int dstSavings)
  interface SortedMap<K,V>
    headMap(K toKey)
    subMap(K fromKey, K toKey)
    tailMap(K fromKey)
  interface SortedSet<E>
    headSet(E toElement)
    subSet(E fromElement, E toElement)
    tailSet(E fromElement)
  interface Spliterator<T>
    forEachRemaining(java.util.function.Consumer<? super T> action)
    hasCharacteristics(int characteristics)
    tryAdvance(java.util.function.Consumer<? super T> action)
  interface Spliterator.OfDouble
    forEachRemaining(java.util.function.Consumer<? super java.lang.Double> action)
    forEachRemaining(java.util.function.DoubleConsumer action)
    tryAdvance(java.util.function.Consumer<? super java.lang.Double> action)
    tryAdvance(java.util.function.DoubleConsumer action)
  interface Spliterator.OfInt
    forEachRemaining(java.util.function.Consumer<? super java.lang.Integer> action)
    forEachRemaining(java.util.function.IntConsumer action)
    tryAdvance(java.util.function.Consumer<? super java.lang.Integer> action)
    tryAdvance(java.util.function.IntConsumer action)
  interface Spliterator.OfLong
    forEachRemaining(java.util.function.Consumer<? super java.lang.Long> action)
    forEachRemaining(java.util.function.LongConsumer action)
    tryAdvance(java.util.function.Consumer<? super java.lang.Long> action)
    tryAdvance(java.util.function.LongConsumer action)
  interface Spliterator.OfPrimitive<T,T_CONS,T_SPLITR>
    forEachRemaining(T_CONS action)
    tryAdvance(T_CONS action)
  class Spliterators
    iterator(java.util.Spliterator.OfDouble spliterator)
    iterator(java.util.Spliterator.OfInt spliterator)
    iterator(java.util.Spliterator.OfLong spliterator)
    <T> iterator(java.util.Spliterator<? extends T> spliterator)
    spliterator(double[] array, int additionalCharacteristics)
    spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)
    spliterator(int[] array, int additionalCharacteristics)
    spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)
    <T> spliterator(java.lang.Object[] array, int additionalCharacteristics)
    <T> spliterator(java.lang.Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)
    <T> spliterator(java.util.Collection<? extends T> c, int characteristics)
    <T> spliterator(java.util.Iterator<? extends T> iterator, long size, int characteristics)
    spliterator(java.util.PrimitiveIterator.OfDouble iterator, long size, int characteristics)
    spliterator(java.util.PrimitiveIterator.OfInt iterator, long size, int characteristics)
    spliterator(java.util.PrimitiveIterator.OfLong iterator, long size, int characteristics)
    spliterator(long[] array, int additionalCharacteristics)
    spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)
    <T> spliteratorUnknownSize(java.util.Iterator<? extends T> iterator, int characteristics)
    spliteratorUnknownSize(java.util.PrimitiveIterator.OfDouble iterator, int characteristics)
    spliteratorUnknownSize(java.util.PrimitiveIterator.OfInt iterator, int characteristics)
    spliteratorUnknownSize(java.util.PrimitiveIterator.OfLong iterator, int characteristics)
  class Spliterators.AbstractDoubleSpliterator
    #ctor(long est, int additionalCharacteristics)
  class Spliterators.AbstractIntSpliterator
    #ctor(long est, int additionalCharacteristics)
  class Spliterators.AbstractLongSpliterator
    #ctor(long est, int additionalCharacteristics)
  class Spliterators.AbstractSpliterator<T>
    #ctor(long est, int additionalCharacteristics)
  class SplittableRandom
    doubles(double randomNumberOrigin, double randomNumberBound)
    doubles(long streamSize)
    doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)
    ints(int randomNumberOrigin, int randomNumberBound)
    ints(long streamSize)
    ints(long streamSize, int randomNumberOrigin, int randomNumberBound)
    longs(long streamSize)
    longs(long randomNumberOrigin, long randomNumberBound)
    longs(long streamSize, long randomNumberOrigin, long randomNumberBound)
    nextDouble(double bound)
    nextDouble(double origin, double bound)
    nextInt(int bound)
    nextInt(int origin, int bound)
    nextLong(long bound)
    nextLong(long origin, long bound)
    #ctor(long seed)
  class Stack<E>
    push(E item)
    search(java.lang.Object o)
  class StringJoiner
    add(java.lang.CharSequence newElement)
    merge(java.util.StringJoiner other)
    setEmptyValue(java.lang.CharSequence emptyValue)
    #ctor(java.lang.CharSequence delimiter)
    #ctor(java.lang.CharSequence delimiter, java.lang.CharSequence prefix, java.lang.CharSequence suffix)
  class StringTokenizer
    nextToken(java.lang.String delim)
    #ctor(java.lang.String str)
    #ctor(java.lang.String str, java.lang.String delim)
    #ctor(java.lang.String str, java.lang.String delim, boolean returnDelims)
  class Timer
    schedule(java.util.TimerTask task, java.util.Date time)
    schedule(java.util.TimerTask task, java.util.Date firstTime, long period)
    schedule(java.util.TimerTask task, long delay)
    schedule(java.util.TimerTask task, long delay, long period)
    scheduleAtFixedRate(java.util.TimerTask task, java.util.Date firstTime, long period)
    scheduleAtFixedRate(java.util.TimerTask task, long delay, long period)
    #ctor(boolean isDaemon)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, boolean isDaemon)
  class TimeZone
    getAvailableIDs(int rawOffset)
    getDisplayName(boolean daylight, int style)
    getDisplayName(boolean daylightTime, int style, java.util.Locale locale)
    getDisplayName(java.util.Locale locale)
    getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)
    getOffset(long date)
    getTimeZone(java.lang.String id)
    getTimeZone(java.time.ZoneId zoneId)
    hasSameRules(java.util.TimeZone other)
    inDaylightTime(java.util.Date date)
    setDefault(java.util.TimeZone timeZone)
    setID(java.lang.String ID)
    setRawOffset(int offsetMillis)
  class TooManyListenersException
    #ctor(java.lang.String s)
  class TreeMap<K,V>
    ceilingEntry(K key)
    ceilingKey(K key)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    floorEntry(K key)
    floorKey(K key)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    headMap(K toKey)
    headMap(K toKey, boolean inclusive)
    higherEntry(K key)
    higherKey(K key)
    lowerEntry(K key)
    lowerKey(K key)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> map)
    remove(java.lang.Object key)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
    subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
    subMap(K fromKey, K toKey)
    tailMap(K fromKey)
    tailMap(K fromKey, boolean inclusive)
    #ctor(java.util.Comparator<? super K> comparator)
    #ctor(java.util.Map<? extends K,? extends V> m)
    #ctor(java.util.SortedMap<K,? extends V> m)
  class TreeSet<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    ceiling(E e)
    contains(java.lang.Object o)
    floor(E e)
    headSet(E toElement)
    headSet(E toElement, boolean inclusive)
    higher(E e)
    lower(E e)
    remove(java.lang.Object o)
    subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
    subSet(E fromElement, E toElement)
    tailSet(E fromElement)
    tailSet(E fromElement, boolean inclusive)
    #ctor(java.util.Collection<? extends E> c)
    #ctor(java.util.Comparator<? super E> comparator)
    #ctor(java.util.SortedSet<E> s)
  class UnknownFormatConversionException
    #ctor(java.lang.String s)
  class UnknownFormatFlagsException
    #ctor(java.lang.String f)
  class UUID
    compareTo(java.util.UUID val)
    equals(java.lang.Object obj)
    fromString(java.lang.String name)
    nameUUIDFromBytes(byte[] name)
    #ctor(long mostSigBits, long leastSigBits)
  class Vector<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    addAll(java.util.Collection<? extends E> c)
    addElement(E obj)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    copyInto(java.lang.Object[] anArray)
    elementAt(int index)
    ensureCapacity(int minCapacity)
    equals(java.lang.Object o)
    forEach(java.util.function.Consumer<? super E> action)
    get(int index)
    indexOf(java.lang.Object o)
    indexOf(java.lang.Object o, int index)
    insertElementAt(E obj, int index)
    lastIndexOf(java.lang.Object o)
    lastIndexOf(java.lang.Object o, int index)
    listIterator(int index)
    remove(int index)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    removeElement(java.lang.Object obj)
    removeElementAt(int index)
    removeIf(java.util.function.Predicate<? super E> filter)
    removeRange(int fromIndex, int toIndex)
    replaceAll(java.util.function.UnaryOperator<E> operator)
    retainAll(java.util.Collection<?> c)
    set(int index, E element)
    setElementAt(E obj, int index)
    setSize(int newSize)
    sort(java.util.Comparator<? super E> c)
    subList(int fromIndex, int toIndex)
    <T> toArray(T[] a)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, int capacityIncrement)
    #ctor(java.util.Collection<? extends E> c)
  class WeakHashMap<K,V>
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    remove(java.lang.Object key)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(java.util.Map<? extends K,? extends V> m)

package java.util.concurrent
;---------------------------------------
  class AbstractExecutorService
    <T> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks)
    <T> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, java.util.concurrent.TimeUnit unit)
    <T> invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks)
    <T> invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, java.util.concurrent.TimeUnit unit)
    <T> newTaskFor(java.lang.Runnable runnable, T value)
    <T> newTaskFor(java.util.concurrent.Callable<T> callable)
    submit(java.lang.Runnable task)
    <T> submit(java.lang.Runnable task, T result)
    <T> submit(java.util.concurrent.Callable<T> task)
  class ArrayBlockingQueue<E>
    add(E e)
    #ctor(int capacity)
    #ctor(int capacity, boolean fair)
    #ctor(int capacity, boolean fair, java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  interface BlockingDeque<E>
    add(E e)
    addFirst(E e)
    addLast(E e)
    contains(java.lang.Object o)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    offerFirst(E e)
    offerFirst(E e, long timeout, java.util.concurrent.TimeUnit unit)
    offerLast(E e)
    offerLast(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    pollFirst(long timeout, java.util.concurrent.TimeUnit unit)
    pollLast(long timeout, java.util.concurrent.TimeUnit unit)
    push(E e)
    put(E e)
    putFirst(E e)
    putLast(E e)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
  interface BlockingQueue<E>
    add(E e)
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
  class BrokenBarrierException
    #ctor(java.lang.String message)
  class CancellationException
    #ctor(java.lang.String message)
  class CompletableFuture<T>
    acceptEither(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action)
    acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action)
    acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action, java.util.concurrent.Executor executor)
    allOf(java.util.concurrent.CompletableFuture<?>... cfs)
    anyOf(java.util.concurrent.CompletableFuture<?>... cfs)
    <U> applyToEither(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn)
    <U> applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn)
    <U> applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn, java.util.concurrent.Executor executor)
    cancel(boolean mayInterruptIfRunning)
    complete(T value)
    <U> completedFuture(U value)
    completeExceptionally(java.lang.Throwable ex)
    exceptionally(java.util.function.Function<java.lang.Throwable,? extends T> fn)
    get(long timeout, java.util.concurrent.TimeUnit unit)
    getNow(T valueIfAbsent)
    <U> handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn)
    <U> handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn)
    <U> handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn, java.util.concurrent.Executor executor)
    obtrudeException(java.lang.Throwable ex)
    obtrudeValue(T value)
    runAfterBoth(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterBothAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterBothAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action, java.util.concurrent.Executor executor)
    runAfterEither(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterEitherAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterEitherAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action, java.util.concurrent.Executor executor)
    runAsync(java.lang.Runnable runnable)
    runAsync(java.lang.Runnable runnable, java.util.concurrent.Executor executor)
    <U> supplyAsync(java.util.function.Supplier<U> supplier)
    <U> supplyAsync(java.util.function.Supplier<U> supplier, java.util.concurrent.Executor executor)
    thenAccept(java.util.function.Consumer<? super T> action)
    thenAcceptAsync(java.util.function.Consumer<? super T> action)
    thenAcceptAsync(java.util.function.Consumer<? super T> action, java.util.concurrent.Executor executor)
    <U> thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action)
    <U> thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action)
    <U> thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action, java.util.concurrent.Executor executor)
    <U> thenApply(java.util.function.Function<? super T,? extends U> fn)
    <U> thenApplyAsync(java.util.function.Function<? super T,? extends U> fn)
    <U> thenApplyAsync(java.util.function.Function<? super T,? extends U> fn, java.util.concurrent.Executor executor)
    <U,V> thenCombine(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn)
    <U,V> thenCombineAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn)
    <U,V> thenCombineAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn, java.util.concurrent.Executor executor)
    <U> thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn)
    <U> thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn)
    <U> thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn, java.util.concurrent.Executor executor)
    thenRun(java.lang.Runnable action)
    thenRunAsync(java.lang.Runnable action)
    thenRunAsync(java.lang.Runnable action, java.util.concurrent.Executor executor)
    whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action)
    whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action)
    whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action, java.util.concurrent.Executor executor)
  class CompletionException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface CompletionService<V>
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    submit(java.lang.Runnable task, V result)
    submit(java.util.concurrent.Callable<V> task)
  interface CompletionStage<T>
    acceptEither(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action)
    acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action)
    acceptEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Consumer<? super T> action, java.util.concurrent.Executor executor)
    <U> applyToEither(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn)
    <U> applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn)
    <U> applyToEitherAsync(java.util.concurrent.CompletionStage<? extends T> other, java.util.function.Function<? super T,U> fn, java.util.concurrent.Executor executor)
    exceptionally(java.util.function.Function<java.lang.Throwable,? extends T> fn)
    <U> handle(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn)
    <U> handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn)
    <U> handleAsync(java.util.function.BiFunction<? super T,java.lang.Throwable,? extends U> fn, java.util.concurrent.Executor executor)
    runAfterBoth(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterBothAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterBothAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action, java.util.concurrent.Executor executor)
    runAfterEither(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterEitherAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action)
    runAfterEitherAsync(java.util.concurrent.CompletionStage<?> other, java.lang.Runnable action, java.util.concurrent.Executor executor)
    thenAccept(java.util.function.Consumer<? super T> action)
    thenAcceptAsync(java.util.function.Consumer<? super T> action)
    thenAcceptAsync(java.util.function.Consumer<? super T> action, java.util.concurrent.Executor executor)
    <U> thenAcceptBoth(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action)
    <U> thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action)
    <U> thenAcceptBothAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiConsumer<? super T,? super U> action, java.util.concurrent.Executor executor)
    <U> thenApply(java.util.function.Function<? super T,? extends U> fn)
    <U> thenApplyAsync(java.util.function.Function<? super T,? extends U> fn)
    <U> thenApplyAsync(java.util.function.Function<? super T,? extends U> fn, java.util.concurrent.Executor executor)
    <U,V> thenCombine(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn)
    <U,V> thenCombineAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn)
    <U,V> thenCombineAsync(java.util.concurrent.CompletionStage<? extends U> other, java.util.function.BiFunction<? super T,? super U,? extends V> fn, java.util.concurrent.Executor executor)
    <U> thenCompose(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn)
    <U> thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn)
    <U> thenComposeAsync(java.util.function.Function<? super T,? extends java.util.concurrent.CompletionStage<U>> fn, java.util.concurrent.Executor executor)
    thenRun(java.lang.Runnable action)
    thenRunAsync(java.lang.Runnable action)
    thenRunAsync(java.lang.Runnable action, java.util.concurrent.Executor executor)
    whenComplete(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action)
    whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action)
    whenCompleteAsync(java.util.function.BiConsumer<? super T,? super java.lang.Throwable> action, java.util.concurrent.Executor executor)
  class ConcurrentHashMap<K,V>
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, float loadFactor)
    #ctor(int initialCapacity, float loadFactor, int concurrencyLevel)
    #ctor(java.util.Map<? extends K,? extends V> m)
    contains(java.lang.Object value)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    forEach(long parallelismThreshold, java.util.function.BiConsumer<? super K,? super V> action)
    <U> forEach(long parallelismThreshold, java.util.function.BiFunction<? super K,? super V,? extends U> transformer, java.util.function.Consumer<? super U> action)
    forEachEntry(long parallelismThreshold, java.util.function.Consumer<? super java.util.Map.Entry<K,V>> action)
    <U> forEachEntry(long parallelismThreshold, java.util.function.Function<java.util.Map.Entry<K,V>,? extends U> transformer, java.util.function.Consumer<? super U> action)
    forEachKey(long parallelismThreshold, java.util.function.Consumer<? super K> action)
    <U> forEachKey(long parallelismThreshold, java.util.function.Function<? super K,? extends U> transformer, java.util.function.Consumer<? super U> action)
    forEachValue(long parallelismThreshold, java.util.function.Consumer<? super V> action)
    <U> forEachValue(long parallelismThreshold, java.util.function.Function<? super V,? extends U> transformer, java.util.function.Consumer<? super U> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    keySet(V mappedValue)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    <K> newKeySet(int initialCapacity)
    put(K key, V value)
    putAll(java.util.Map<? extends K,? extends V> m)
    putIfAbsent(K key, V value)
    <U> reduce(long parallelismThreshold, java.util.function.BiFunction<? super K,? super V,? extends U> transformer, java.util.function.BiFunction<? super U,? super U,? extends U> reducer)
    reduceEntries(long parallelismThreshold, java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,? extends java.util.Map.Entry<K,V>> reducer)
    <U> reduceEntries(long parallelismThreshold, java.util.function.Function<java.util.Map.Entry<K,V>,? extends U> transformer, java.util.function.BiFunction<? super U,? super U,? extends U> reducer)
    reduceEntriesToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>> transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
    reduceEntriesToInt(long parallelismThreshold, java.util.function.ToIntFunction<java.util.Map.Entry<K,V>> transformer, int basis, java.util.function.IntBinaryOperator reducer)
    reduceEntriesToLong(long parallelismThreshold, java.util.function.ToLongFunction<java.util.Map.Entry<K,V>> transformer, long basis, java.util.function.LongBinaryOperator reducer)
    reduceKeys(long parallelismThreshold, java.util.function.BiFunction<? super K,? super K,? extends K> reducer)
    <U> reduceKeys(long parallelismThreshold, java.util.function.Function<? super K,? extends U> transformer, java.util.function.BiFunction<? super U,? super U,? extends U> reducer)
    reduceKeysToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction<? super K> transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
    reduceKeysToInt(long parallelismThreshold, java.util.function.ToIntFunction<? super K> transformer, int basis, java.util.function.IntBinaryOperator reducer)
    reduceKeysToLong(long parallelismThreshold, java.util.function.ToLongFunction<? super K> transformer, long basis, java.util.function.LongBinaryOperator reducer)
    reduceToDouble(long parallelismThreshold, java.util.function.ToDoubleBiFunction<? super K,? super V> transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
    reduceToInt(long parallelismThreshold, java.util.function.ToIntBiFunction<? super K,? super V> transformer, int basis, java.util.function.IntBinaryOperator reducer)
    reduceToLong(long parallelismThreshold, java.util.function.ToLongBiFunction<? super K,? super V> transformer, long basis, java.util.function.LongBinaryOperator reducer)
    reduceValues(long parallelismThreshold, java.util.function.BiFunction<? super V,? super V,? extends V> reducer)
    <U> reduceValues(long parallelismThreshold, java.util.function.Function<? super V,? extends U> transformer, java.util.function.BiFunction<? super U,? super U,? extends U> reducer)
    reduceValuesToDouble(long parallelismThreshold, java.util.function.ToDoubleFunction<? super V> transformer, double basis, java.util.function.DoubleBinaryOperator reducer)
    reduceValuesToInt(long parallelismThreshold, java.util.function.ToIntFunction<? super V> transformer, int basis, java.util.function.IntBinaryOperator reducer)
    reduceValuesToLong(long parallelismThreshold, java.util.function.ToLongFunction<? super V> transformer, long basis, java.util.function.LongBinaryOperator reducer)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
    <U> search(long parallelismThreshold, java.util.function.BiFunction<? super K,? super V,? extends U> searchFunction)
    <U> searchEntries(long parallelismThreshold, java.util.function.Function<java.util.Map.Entry<K,V>,? extends U> searchFunction)
    <U> searchKeys(long parallelismThreshold, java.util.function.Function<? super K,? extends U> searchFunction)
    <U> searchValues(long parallelismThreshold, java.util.function.Function<? super V,? extends U> searchFunction)
  class ConcurrentHashMap.CollectionView<K,V,E>
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    retainAll(java.util.Collection<?> c)
    <T> toArray(T[] a)
  class ConcurrentHashMap.KeySetView<K,V>
    add(K e)
    addAll(java.util.Collection<? extends K> c)
    contains(java.lang.Object o)
    equals(java.lang.Object o)
    forEach(java.util.function.Consumer<? super K> action)
    remove(java.lang.Object o)
  class ConcurrentLinkedDeque<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    addFirst(E e)
    addLast(E e)
    #ctor(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    offer(E e)
    offerFirst(E e)
    offerLast(E e)
    push(E e)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
    <T> toArray(T[] a)
  class ConcurrentLinkedQueue<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    #ctor(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    offer(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  interface ConcurrentMap<K,V>
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    getOrDefault(java.lang.Object key, V defaultValue)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    putIfAbsent(K key, V value)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
  interface ConcurrentNavigableMap<K,V>
    headMap(K toKey)
    headMap(K toKey, boolean inclusive)
    subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
    subMap(K fromKey, K toKey)
    tailMap(K fromKey)
    tailMap(K fromKey, boolean inclusive)
  class ConcurrentSkipListMap<K,V>
    ceilingEntry(K key)
    ceilingKey(K key)
    compute(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    computeIfAbsent(K key, java.util.function.Function<? super K,? extends V> mappingFunction)
    computeIfPresent(K key, java.util.function.BiFunction<? super K,? super V,? extends V> remappingFunction)
    #ctor(java.util.Comparator<? super K> comparator)
    #ctor(java.util.Map<? extends K,? extends V> m)
    #ctor(java.util.SortedMap<K,? extends V> m)
    containsKey(java.lang.Object key)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    floorEntry(K key)
    floorKey(K key)
    forEach(java.util.function.BiConsumer<? super K,? super V> action)
    get(java.lang.Object key)
    getOrDefault(java.lang.Object key, V defaultValue)
    headMap(K toKey)
    headMap(K toKey, boolean inclusive)
    higherEntry(K key)
    higherKey(K key)
    lowerEntry(K key)
    lowerKey(K key)
    merge(K key, V value, java.util.function.BiFunction<? super V,? super V,? extends V> remappingFunction)
    put(K key, V value)
    putIfAbsent(K key, V value)
    remove(java.lang.Object key)
    remove(java.lang.Object key, java.lang.Object value)
    replace(K key, V value)
    replace(K key, V oldValue, V newValue)
    replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V> function)
    subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
    subMap(K fromKey, K toKey)
    tailMap(K fromKey)
    tailMap(K fromKey, boolean inclusive)
  class ConcurrentSkipListSet<E>
    add(E e)
    ceiling(E e)
    #ctor(java.util.Collection<? extends E> c)
    #ctor(java.util.Comparator<? super E> comparator)
    #ctor(java.util.SortedSet<E> s)
    contains(java.lang.Object o)
    equals(java.lang.Object o)
    floor(E e)
    headSet(E toElement)
    headSet(E toElement, boolean inclusive)
    higher(E e)
    lower(E e)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
    subSet(E fromElement, E toElement)
    tailSet(E fromElement)
    tailSet(E fromElement, boolean inclusive)
  class CopyOnWriteArrayList<E>
    add(E e)
    add(int index, E element)
    addAll(int index, java.util.Collection<? extends E> c)
    addAll(java.util.Collection<? extends E> c)
    addAllAbsent(java.util.Collection<? extends E> c)
    addIfAbsent(E e)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    #ctor(E[] toCopyIn)
    #ctor(java.util.Collection<? extends E> c)
    equals(java.lang.Object o)
    forEach(java.util.function.Consumer<? super E> action)
    get(int index)
    indexOf(E e, int index)
    indexOf(java.lang.Object o)
    lastIndexOf(E e, int index)
    lastIndexOf(java.lang.Object o)
    listIterator(int index)
    remove(int index)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    removeIf(java.util.function.Predicate<? super E> filter)
    replaceAll(java.util.function.UnaryOperator<E> operator)
    retainAll(java.util.Collection<?> c)
    set(int index, E element)
    sort(java.util.Comparator<? super E> c)
    subList(int fromIndex, int toIndex)
    <T> toArray(T[] a)
  class CopyOnWriteArraySet<E>
    add(E e)
    addAll(java.util.Collection<? extends E> c)
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    #ctor(java.util.Collection<? extends E> c)
    equals(java.lang.Object o)
    forEach(java.util.function.Consumer<? super E> action)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    removeIf(java.util.function.Predicate<? super E> filter)
    retainAll(java.util.Collection<?> c)
    <T> toArray(T[] a)
  class CountDownLatch
    await(long timeout, java.util.concurrent.TimeUnit unit)
    #ctor(int count)
  class CountedCompleter<T>
    addToPendingCount(int delta)
    compareAndSetPendingCount(int expected, int count)
    complete(T rawResult)
    #ctor(java.util.concurrent.CountedCompleter<?> completer)
    #ctor(java.util.concurrent.CountedCompleter<?> completer, int initialPendingCount)
    helpComplete(int maxTasks)
    onCompletion(java.util.concurrent.CountedCompleter<?> caller)
    onExceptionalCompletion(java.lang.Throwable ex, java.util.concurrent.CountedCompleter<?> caller)
    setPendingCount(int count)
    setRawResult(T t)
  class CyclicBarrier
    await(long timeout, java.util.concurrent.TimeUnit unit)
    #ctor(int parties)
    #ctor(int parties, java.lang.Runnable barrierAction)
  interface Delayed
    getDelay(java.util.concurrent.TimeUnit unit)
  class DelayQueue<E>
    add(E e)
    #ctor(java.util.Collection<? extends E> c)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  class Exchanger<V>
    exchange(V x)
    exchange(V x, long timeout, java.util.concurrent.TimeUnit unit)
  class ExecutionException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface Executor
    execute(java.lang.Runnable command)
  class ExecutorCompletionService<V>
    #ctor(java.util.concurrent.Executor executor)
    #ctor(java.util.concurrent.Executor executor, java.util.concurrent.BlockingQueue<java.util.concurrent.Future<V>> completionQueue)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    submit(java.lang.Runnable task, V result)
    submit(java.util.concurrent.Callable<V> task)
  class Executors
    callable(java.lang.Runnable task)
    <T> callable(java.lang.Runnable task, T result)
    callable(java.security.PrivilegedAction<?> action)
    callable(java.security.PrivilegedExceptionAction<?> action)
    newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
    newFixedThreadPool(int nThreads)
    newFixedThreadPool(int nThreads, java.util.concurrent.ThreadFactory threadFactory)
    newScheduledThreadPool(int corePoolSize)
    newScheduledThreadPool(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory)
    newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
    newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
    newWorkStealingPool(int parallelism)
    <T> privilegedCallable(java.util.concurrent.Callable<T> callable)
    <T> privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable<T> callable)
    unconfigurableExecutorService(java.util.concurrent.ExecutorService executor)
    unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService executor)
  interface ExecutorService
    awaitTermination(long timeout, java.util.concurrent.TimeUnit unit)
    <T> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks)
    <T> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, java.util.concurrent.TimeUnit unit)
    <T> invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks)
    <T> invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks, long timeout, java.util.concurrent.TimeUnit unit)
    submit(java.lang.Runnable task)
    <T> submit(java.lang.Runnable task, T result)
    <T> submit(java.util.concurrent.Callable<T> task)
  class ForkJoinPool
    awaitQuiescence(long timeout, java.util.concurrent.TimeUnit unit)
    awaitTermination(long timeout, java.util.concurrent.TimeUnit unit)
    drainTasksTo(java.util.Collection<? super java.util.concurrent.ForkJoinTask<?>> c)
    execute(java.lang.Runnable task)
    execute(java.util.concurrent.ForkJoinTask<?> task)
    #ctor(int parallelism)
    #ctor(int parallelism, java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory factory, java.lang.Thread.UncaughtExceptionHandler handler, boolean asyncMode)
    <T> invoke(java.util.concurrent.ForkJoinTask<T> task)
    <T> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>> tasks)
    managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker blocker)
    <T> newTaskFor(java.lang.Runnable runnable, T value)
    <T> newTaskFor(java.util.concurrent.Callable<T> callable)
    submit(java.lang.Runnable task)
    <T> submit(java.lang.Runnable task, T result)
    <T> submit(java.util.concurrent.Callable<T> task)
    <T> submit(java.util.concurrent.ForkJoinTask<T> task)
  interface ForkJoinPool.ForkJoinWorkerThreadFactory
    newThread(java.util.concurrent.ForkJoinPool pool)
  class ForkJoinTask<V>
    adapt(java.lang.Runnable runnable)
    <T> adapt(java.lang.Runnable runnable, T result)
    <T> adapt(java.util.concurrent.Callable<? extends T> callable)
    cancel(boolean mayInterruptIfRunning)
    compareAndSetForkJoinTaskTag(short expect, short update)
    complete(V value)
    completeExceptionally(java.lang.Throwable ex)
    get(long timeout, java.util.concurrent.TimeUnit unit)
    <T> invokeAll(java.util.Collection<T> tasks)
    invokeAll(java.util.concurrent.ForkJoinTask<?> t1, java.util.concurrent.ForkJoinTask<?> t2)
    invokeAll(java.util.concurrent.ForkJoinTask<?>... tasks)
    setForkJoinTaskTag(short newValue)
    setRawResult(V value)
  class ForkJoinWorkerThread
    #ctor(java.util.concurrent.ForkJoinPool pool)
    onTermination(java.lang.Throwable exception)
  interface Future<V>
    cancel(boolean mayInterruptIfRunning)
    get(long timeout, java.util.concurrent.TimeUnit unit)
  class FutureTask<V>
    cancel(boolean mayInterruptIfRunning)
    #ctor(java.lang.Runnable runnable, V result)
    #ctor(java.util.concurrent.Callable<V> callable)
    get(long timeout, java.util.concurrent.TimeUnit unit)
    set(V v)
    setException(java.lang.Throwable t)
  class LinkedBlockingDeque<E>
    add(E e)
    addFirst(E e)
    addLast(E e)
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    #ctor(int capacity)
    #ctor(java.util.Collection<? extends E> c)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    offerFirst(E e)
    offerFirst(E e, long timeout, java.util.concurrent.TimeUnit unit)
    offerLast(E e)
    offerLast(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    pollFirst(long timeout, java.util.concurrent.TimeUnit unit)
    pollLast(long timeout, java.util.concurrent.TimeUnit unit)
    push(E e)
    put(E e)
    putFirst(E e)
    putLast(E e)
    remove(java.lang.Object o)
    removeFirstOccurrence(java.lang.Object o)
    removeLastOccurrence(java.lang.Object o)
    <T> toArray(T[] a)
  class LinkedBlockingQueue<E>
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    #ctor(int capacity)
    #ctor(java.util.Collection<? extends E> c)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  class LinkedTransferQueue<E>
    add(E e)
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    #ctor(java.util.Collection<? extends E> c)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
    transfer(E e)
    tryTransfer(E e)
    tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)
  class Phaser
    awaitAdvance(int phase)
    awaitAdvanceInterruptibly(int phase)
    awaitAdvanceInterruptibly(int phase, long timeout, java.util.concurrent.TimeUnit unit)
    bulkRegister(int parties)
    onAdvance(int phase, int registeredParties)
    #ctor(int parties)
    #ctor(java.util.concurrent.Phaser parent)
    #ctor(java.util.concurrent.Phaser parent, int parties)
  class PriorityBlockingQueue<E>
    add(E e)
    contains(java.lang.Object o)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    #ctor(int initialCapacity)
    #ctor(int initialCapacity, java.util.Comparator<? super E> comparator)
    #ctor(java.util.Collection<? extends E> c)
    put(E e)
    remove(java.lang.Object o)
    <T> toArray(T[] a)
  class RecursiveAction
    setRawResult(java.lang.Void mustBeNull)
  class RecursiveTask<V>
    setRawResult(V value)
  class RejectedExecutionException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  interface RejectedExecutionHandler
    rejectedExecution(java.lang.Runnable r, java.util.concurrent.ThreadPoolExecutor executor)
  interface ScheduledExecutorService
    schedule(java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)
    <V> schedule(java.util.concurrent.Callable<V> callable, long delay, java.util.concurrent.TimeUnit unit)
    scheduleAtFixedRate(java.lang.Runnable command, long initialDelay, long period, java.util.concurrent.TimeUnit unit)
    scheduleWithFixedDelay(java.lang.Runnable command, long initialDelay, long delay, java.util.concurrent.TimeUnit unit)
  class ScheduledThreadPoolExecutor
    <V> decorateTask(java.lang.Runnable runnable, java.util.concurrent.RunnableScheduledFuture<V> task)
    <V> decorateTask(java.util.concurrent.Callable<V> callable, java.util.concurrent.RunnableScheduledFuture<V> task)
    execute(java.lang.Runnable command)
    schedule(java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)
    <V> schedule(java.util.concurrent.Callable<V> callable, long delay, java.util.concurrent.TimeUnit unit)
    scheduleAtFixedRate(java.lang.Runnable command, long initialDelay, long period, java.util.concurrent.TimeUnit unit)
    #ctor(int corePoolSize)
    #ctor(int corePoolSize, java.util.concurrent.RejectedExecutionHandler handler)
    #ctor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory)
    #ctor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory, java.util.concurrent.RejectedExecutionHandler handler)
    scheduleWithFixedDelay(java.lang.Runnable command, long initialDelay, long delay, java.util.concurrent.TimeUnit unit)
    setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)
    setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)
    setRemoveOnCancelPolicy(boolean value)
    submit(java.lang.Runnable task)
    <T> submit(java.lang.Runnable task, T result)
    <T> submit(java.util.concurrent.Callable<T> task)
  class Semaphore
    acquire(int permits)
    acquireUninterruptibly(int permits)
    reducePermits(int reduction)
    release(int permits)
    #ctor(int permits)
    #ctor(int permits, boolean fair)
    tryAcquire(int permits)
    tryAcquire(int permits, long timeout, java.util.concurrent.TimeUnit unit)
    tryAcquire(long timeout, java.util.concurrent.TimeUnit unit)
  class SynchronousQueue<E>
    contains(java.lang.Object o)
    containsAll(java.util.Collection<?> c)
    drainTo(java.util.Collection<? super E> c)
    drainTo(java.util.Collection<? super E> c, int maxElements)
    offer(E e)
    offer(E e, long timeout, java.util.concurrent.TimeUnit unit)
    poll(long timeout, java.util.concurrent.TimeUnit unit)
    put(E e)
    remove(java.lang.Object o)
    removeAll(java.util.Collection<?> c)
    retainAll(java.util.Collection<?> c)
    #ctor(boolean fair)
    <T> toArray(T[] a)
  interface ThreadFactory
    newThread(java.lang.Runnable r)
  class ThreadLocalRandom
    doubles(double randomNumberOrigin, double randomNumberBound)
    doubles(long streamSize)
    doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)
    ints(int randomNumberOrigin, int randomNumberBound)
    ints(long streamSize)
    ints(long streamSize, int randomNumberOrigin, int randomNumberBound)
    longs(long streamSize)
    longs(long randomNumberOrigin, long randomNumberBound)
    longs(long streamSize, long randomNumberOrigin, long randomNumberBound)
    next(int bits)
    nextDouble(double bound)
    nextDouble(double origin, double bound)
    nextInt(int bound)
    nextInt(int origin, int bound)
    nextLong(long bound)
    nextLong(long origin, long bound)
    setSeed(long seed)
  class ThreadPoolExecutor
    afterExecute(java.lang.Runnable r, java.lang.Throwable t)
    allowCoreThreadTimeOut(boolean value)
    awaitTermination(long timeout, java.util.concurrent.TimeUnit unit)
    beforeExecute(java.lang.Thread t, java.lang.Runnable r)
    execute(java.lang.Runnable command)
    getKeepAliveTime(java.util.concurrent.TimeUnit unit)
    remove(java.lang.Runnable task)
    setCorePoolSize(int corePoolSize)
    setKeepAliveTime(long time, java.util.concurrent.TimeUnit unit)
    setMaximumPoolSize(int maximumPoolSize)
    setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler handler)
    setThreadFactory(java.util.concurrent.ThreadFactory threadFactory)
    #ctor(int corePoolSize, int maximumPoolSize, long keepAliveTime, java.util.concurrent.TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue)
    #ctor(int corePoolSize, int maximumPoolSize, long keepAliveTime, java.util.concurrent.TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, java.util.concurrent.RejectedExecutionHandler handler)
    #ctor(int corePoolSize, int maximumPoolSize, long keepAliveTime, java.util.concurrent.TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, java.util.concurrent.ThreadFactory threadFactory)
    #ctor(int corePoolSize, int maximumPoolSize, long keepAliveTime, java.util.concurrent.TimeUnit unit, java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, java.util.concurrent.ThreadFactory threadFactory, java.util.concurrent.RejectedExecutionHandler handler)
  class ThreadPoolExecutor.AbortPolicy
    rejectedExecution(java.lang.Runnable r, java.util.concurrent.ThreadPoolExecutor e)
  class ThreadPoolExecutor.CallerRunsPolicy
    rejectedExecution(java.lang.Runnable r, java.util.concurrent.ThreadPoolExecutor e)
  class ThreadPoolExecutor.DiscardOldestPolicy
    rejectedExecution(java.lang.Runnable r, java.util.concurrent.ThreadPoolExecutor e)
  class ThreadPoolExecutor.DiscardPolicy
    rejectedExecution(java.lang.Runnable r, java.util.concurrent.ThreadPoolExecutor e)
  class TimeoutException
    #ctor(java.lang.String message)
  class TimeUnit
    convert(long sourceDuration, java.util.concurrent.TimeUnit sourceUnit)
    sleep(long timeout)
    timedJoin(java.lang.Thread thread, long timeout)
    timedWait(java.lang.Object obj, long timeout)
    toDays(long duration)
    toHours(long duration)
    toMicros(long duration)
    toMillis(long duration)
    toMinutes(long duration)
    toNanos(long duration)
    toSeconds(long duration)
    valueOf(java.lang.String name)
  interface TransferQueue<E>
    transfer(E e)
    tryTransfer(E e)
    tryTransfer(E e, long timeout, java.util.concurrent.TimeUnit unit)

package java.util.concurrent.atomic
;---------------------------------------
  class AtomicBoolean
    #ctor(boolean initialValue)
    compareAndSet(boolean expect, boolean update)
    getAndSet(boolean newValue)
    lazySet(boolean newValue)
    set(boolean newValue)
    weakCompareAndSet(boolean expect, boolean update)
  class AtomicInteger
    accumulateAndGet(int x, java.util.function.IntBinaryOperator accumulatorFunction)
    addAndGet(int delta)
    #ctor(int initialValue)
    compareAndSet(int expect, int update)
    getAndAccumulate(int x, java.util.function.IntBinaryOperator accumulatorFunction)
    getAndAdd(int delta)
    getAndSet(int newValue)
    getAndUpdate(java.util.function.IntUnaryOperator updateFunction)
    lazySet(int newValue)
    set(int newValue)
    updateAndGet(java.util.function.IntUnaryOperator updateFunction)
    weakCompareAndSet(int expect, int update)
  class AtomicIntegerArray
    accumulateAndGet(int i, int x, java.util.function.IntBinaryOperator accumulatorFunction)
    addAndGet(int i, int delta)
    #ctor(int length)
    #ctor(int[] array)
    compareAndSet(int i, int expect, int update)
    decrementAndGet(int i)
    get(int i)
    getAndAccumulate(int i, int x, java.util.function.IntBinaryOperator accumulatorFunction)
    getAndAdd(int i, int delta)
    getAndDecrement(int i)
    getAndIncrement(int i)
    getAndSet(int i, int newValue)
    getAndUpdate(int i, java.util.function.IntUnaryOperator updateFunction)
    incrementAndGet(int i)
    lazySet(int i, int newValue)
    set(int i, int newValue)
    updateAndGet(int i, java.util.function.IntUnaryOperator updateFunction)
    weakCompareAndSet(int i, int expect, int update)
  class AtomicIntegerFieldUpdater<T>
    accumulateAndGet(T obj, int x, java.util.function.IntBinaryOperator accumulatorFunction)
    addAndGet(T obj, int delta)
    compareAndSet(T obj, int expect, int update)
    decrementAndGet(T obj)
    get(T obj)
    getAndAccumulate(T obj, int x, java.util.function.IntBinaryOperator accumulatorFunction)
    getAndAdd(T obj, int delta)
    getAndDecrement(T obj)
    getAndIncrement(T obj)
    getAndSet(T obj, int newValue)
    getAndUpdate(T obj, java.util.function.IntUnaryOperator updateFunction)
    incrementAndGet(T obj)
    lazySet(T obj, int newValue)
    <U> newUpdater(java.lang.Class<U> tclass, java.lang.String fieldName)
    set(T obj, int newValue)
    updateAndGet(T obj, java.util.function.IntUnaryOperator updateFunction)
    weakCompareAndSet(T obj, int expect, int update)
  class AtomicLong
    accumulateAndGet(long x, java.util.function.LongBinaryOperator accumulatorFunction)
    addAndGet(long delta)
    #ctor(long initialValue)
    compareAndSet(long expect, long update)
    getAndAccumulate(long x, java.util.function.LongBinaryOperator accumulatorFunction)
    getAndAdd(long delta)
    getAndSet(long newValue)
    getAndUpdate(java.util.function.LongUnaryOperator updateFunction)
    lazySet(long newValue)
    set(long newValue)
    updateAndGet(java.util.function.LongUnaryOperator updateFunction)
    weakCompareAndSet(long expect, long update)
  class AtomicLongArray
    accumulateAndGet(int i, long x, java.util.function.LongBinaryOperator accumulatorFunction)
    addAndGet(int i, long delta)
    #ctor(int length)
    #ctor(long[] array)
    compareAndSet(int i, long expect, long update)
    decrementAndGet(int i)
    get(int i)
    getAndAccumulate(int i, long x, java.util.function.LongBinaryOperator accumulatorFunction)
    getAndAdd(int i, long delta)
    getAndDecrement(int i)
    getAndIncrement(int i)
    getAndSet(int i, long newValue)
    getAndUpdate(int i, java.util.function.LongUnaryOperator updateFunction)
    incrementAndGet(int i)
    lazySet(int i, long newValue)
    set(int i, long newValue)
    updateAndGet(int i, java.util.function.LongUnaryOperator updateFunction)
    weakCompareAndSet(int i, long expect, long update)
  class AtomicLongFieldUpdater<T>
    accumulateAndGet(T obj, long x, java.util.function.LongBinaryOperator accumulatorFunction)
    addAndGet(T obj, long delta)
    compareAndSet(T obj, long expect, long update)
    decrementAndGet(T obj)
    get(T obj)
    getAndAccumulate(T obj, long x, java.util.function.LongBinaryOperator accumulatorFunction)
    getAndAdd(T obj, long delta)
    getAndDecrement(T obj)
    getAndIncrement(T obj)
    getAndSet(T obj, long newValue)
    getAndUpdate(T obj, java.util.function.LongUnaryOperator updateFunction)
    incrementAndGet(T obj)
    lazySet(T obj, long newValue)
    <U> newUpdater(java.lang.Class<U> tclass, java.lang.String fieldName)
    set(T obj, long newValue)
    updateAndGet(T obj, java.util.function.LongUnaryOperator updateFunction)
    weakCompareAndSet(T obj, long expect, long update)
  class AtomicMarkableReference<V>
    #ctor(V initialRef, boolean initialMark)
    attemptMark(V expectedReference, boolean newMark)
    compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
    get(boolean[] markHolder)
    set(V newReference, boolean newMark)
    weakCompareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)
  class AtomicReference<V>
    accumulateAndGet(V x, java.util.function.BinaryOperator<V> accumulatorFunction)
    #ctor(V initialValue)
    compareAndSet(V expect, V update)
    getAndAccumulate(V x, java.util.function.BinaryOperator<V> accumulatorFunction)
    getAndSet(V newValue)
    getAndUpdate(java.util.function.UnaryOperator<V> updateFunction)
    lazySet(V newValue)
    set(V newValue)
    updateAndGet(java.util.function.UnaryOperator<V> updateFunction)
    weakCompareAndSet(V expect, V update)
  class AtomicReferenceArray<E>
    accumulateAndGet(int i, E x, java.util.function.BinaryOperator<E> accumulatorFunction)
    #ctor(E[] array)
    #ctor(int length)
    compareAndSet(int i, E expect, E update)
    get(int i)
    getAndAccumulate(int i, E x, java.util.function.BinaryOperator<E> accumulatorFunction)
    getAndSet(int i, E newValue)
    getAndUpdate(int i, java.util.function.UnaryOperator<E> updateFunction)
    lazySet(int i, E newValue)
    set(int i, E newValue)
    updateAndGet(int i, java.util.function.UnaryOperator<E> updateFunction)
    weakCompareAndSet(int i, E expect, E update)
  class AtomicReferenceFieldUpdater<T,V>
    accumulateAndGet(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)
    compareAndSet(T obj, V expect, V update)
    get(T obj)
    getAndAccumulate(T obj, V x, java.util.function.BinaryOperator<V> accumulatorFunction)
    getAndSet(T obj, V newValue)
    getAndUpdate(T obj, java.util.function.UnaryOperator<V> updateFunction)
    lazySet(T obj, V newValue)
    <U,W> newUpdater(java.lang.Class<U> tclass, java.lang.Class<W> vclass, java.lang.String fieldName)
    set(T obj, V newValue)
    updateAndGet(T obj, java.util.function.UnaryOperator<V> updateFunction)
    weakCompareAndSet(T obj, V expect, V update)
  class AtomicStampedReference<V>
    #ctor(V initialRef, int initialStamp)
    attemptStamp(V expectedReference, int newStamp)
    compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)
    get(int[] stampHolder)
    set(V newReference, int newStamp)
    weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)
  class DoubleAccumulator
    accumulate(double x)
    #ctor(java.util.function.DoubleBinaryOperator accumulatorFunction, double identity)
  class DoubleAdder
    add(double x)
  class LongAccumulator
    accumulate(long x)
    #ctor(java.util.function.LongBinaryOperator accumulatorFunction, long identity)
  class LongAdder
    add(long x)

package java.util.concurrent.locks
;---------------------------------------
  class AbstractOwnableSynchronizer
    setExclusiveOwnerThread(java.lang.Thread thread)
  class AbstractQueuedLongSynchronizer
    acquire(long arg)
    acquireInterruptibly(long arg)
    acquireShared(long arg)
    acquireSharedInterruptibly(long arg)
    compareAndSetState(long expect, long update)
    getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)
    getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)
    hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)
    isQueued(java.lang.Thread thread)
    owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)
    release(long arg)
    releaseShared(long arg)
    setState(long newState)
    tryAcquire(long arg)
    tryAcquireNanos(long arg, long nanosTimeout)
    tryAcquireShared(long arg)
    tryAcquireSharedNanos(long arg, long nanosTimeout)
    tryRelease(long arg)
    tryReleaseShared(long arg)
  class AbstractQueuedLongSynchronizer.ConditionObject
    await(long time, java.util.concurrent.TimeUnit unit)
    awaitNanos(long nanosTimeout)
    awaitUntil(java.util.Date deadline)
  class AbstractQueuedSynchronizer
    acquire(int arg)
    acquireInterruptibly(int arg)
    acquireShared(int arg)
    acquireSharedInterruptibly(int arg)
    compareAndSetState(int expect, int update)
    getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject condition)
    getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject condition)
    hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject condition)
    isQueued(java.lang.Thread thread)
    owns(java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject condition)
    release(int arg)
    releaseShared(int arg)
    setState(int newState)
    tryAcquire(int arg)
    tryAcquireNanos(int arg, long nanosTimeout)
    tryAcquireShared(int arg)
    tryAcquireSharedNanos(int arg, long nanosTimeout)
    tryRelease(int arg)
    tryReleaseShared(int arg)
  class AbstractQueuedSynchronizer.ConditionObject
    await(long time, java.util.concurrent.TimeUnit unit)
    awaitNanos(long nanosTimeout)
    awaitUntil(java.util.Date deadline)
  interface Condition
    await(long time, java.util.concurrent.TimeUnit unit)
    awaitNanos(long nanosTimeout)
    awaitUntil(java.util.Date deadline)
  interface Lock
    tryLock(long time, java.util.concurrent.TimeUnit unit)
  class LockSupport
    getBlocker(java.lang.Thread t)
    park(java.lang.Object blocker)
    parkNanos(java.lang.Object blocker, long nanos)
    parkNanos(long nanos)
    parkUntil(java.lang.Object blocker, long deadline)
    parkUntil(long deadline)
    unpark(java.lang.Thread thread)
  class ReentrantLock
    getWaitingThreads(java.util.concurrent.locks.Condition condition)
    getWaitQueueLength(java.util.concurrent.locks.Condition condition)
    hasQueuedThread(java.lang.Thread thread)
    hasWaiters(java.util.concurrent.locks.Condition condition)
    #ctor(boolean fair)
    tryLock(long timeout, java.util.concurrent.TimeUnit unit)
  class ReentrantReadWriteLock
    getWaitingThreads(java.util.concurrent.locks.Condition condition)
    getWaitQueueLength(java.util.concurrent.locks.Condition condition)
    hasQueuedThread(java.lang.Thread thread)
    hasWaiters(java.util.concurrent.locks.Condition condition)
    #ctor(boolean fair)
  class ReentrantReadWriteLock.ReadLock
    #ctor(java.util.concurrent.locks.ReentrantReadWriteLock lock)
    tryLock(long timeout, java.util.concurrent.TimeUnit unit)
  class ReentrantReadWriteLock.WriteLock
    #ctor(java.util.concurrent.locks.ReentrantReadWriteLock lock)
    tryLock(long timeout, java.util.concurrent.TimeUnit unit)
  class StampedLock
    tryConvertToOptimisticRead(long stamp)
    tryConvertToReadLock(long stamp)
    tryConvertToWriteLock(long stamp)
    tryReadLock(long time, java.util.concurrent.TimeUnit unit)
    tryWriteLock(long time, java.util.concurrent.TimeUnit unit)
    unlock(long stamp)
    unlockRead(long stamp)
    unlockWrite(long stamp)
    validate(long stamp)

package java.util.function
;---------------------------------------
  interface BiConsumer<T,U>
    accept(T t, U u)
    andThen(java.util.function.BiConsumer<? super T,? super U> after)
  interface BiFunction<T,U,R>
    <V> andThen(java.util.function.Function<? super R,? extends V> after)
    apply(T t, U u)
  interface BinaryOperator<T>
    <T> maxBy(java.util.Comparator<? super T> comparator)
    <T> minBy(java.util.Comparator<? super T> comparator)
  interface BiPredicate<T,U>
    and(java.util.function.BiPredicate<? super T,? super U> other)
    or(java.util.function.BiPredicate<? super T,? super U> other)
    test(T t, U u)
  interface Consumer<T>
    accept(T t)
    andThen(java.util.function.Consumer<? super T> after)
  interface DoubleBinaryOperator
    applyAsDouble(double left, double right)
  interface DoubleConsumer
    accept(double value)
    andThen(java.util.function.DoubleConsumer after)
  interface DoubleFunction<R>
    apply(double value)
  interface DoublePredicate
    and(java.util.function.DoublePredicate other)
    or(java.util.function.DoublePredicate other)
    test(double value)
  interface DoubleToIntFunction
    applyAsInt(double value)
  interface DoubleToLongFunction
    applyAsLong(double value)
  interface DoubleUnaryOperator
    andThen(java.util.function.DoubleUnaryOperator after)
    applyAsDouble(double operand)
    compose(java.util.function.DoubleUnaryOperator before)
  interface Function<T,R>
    <V> andThen(java.util.function.Function<? super R,? extends V> after)
    apply(T t)
    <V> compose(java.util.function.Function<? super V,? extends T> before)
  interface IntBinaryOperator
    applyAsInt(int left, int right)
  interface IntConsumer
    accept(int value)
    andThen(java.util.function.IntConsumer after)
  interface IntFunction<R>
    apply(int value)
  interface IntPredicate
    and(java.util.function.IntPredicate other)
    or(java.util.function.IntPredicate other)
    test(int value)
  interface IntToDoubleFunction
    applyAsDouble(int value)
  interface IntToLongFunction
    applyAsLong(int value)
  interface IntUnaryOperator
    andThen(java.util.function.IntUnaryOperator after)
    applyAsInt(int operand)
    compose(java.util.function.IntUnaryOperator before)
  interface LongBinaryOperator
    applyAsLong(long left, long right)
  interface LongConsumer
    accept(long value)
    andThen(java.util.function.LongConsumer after)
  interface LongFunction<R>
    apply(long value)
  interface LongPredicate
    and(java.util.function.LongPredicate other)
    or(java.util.function.LongPredicate other)
    test(long value)
  interface LongToDoubleFunction
    applyAsDouble(long value)
  interface LongToIntFunction
    applyAsInt(long value)
  interface LongUnaryOperator
    andThen(java.util.function.LongUnaryOperator after)
    applyAsLong(long operand)
    compose(java.util.function.LongUnaryOperator before)
  interface ObjDoubleConsumer<T>
    accept(T t, double value)
  interface ObjIntConsumer<T>
    accept(T t, int value)
  interface ObjLongConsumer<T>
    accept(T t, long value)
  interface Predicate<T>
    and(java.util.function.Predicate<? super T> other)
    <T> isEqual(java.lang.Object targetRef)
    or(java.util.function.Predicate<? super T> other)
    test(T t)
  interface ToDoubleBiFunction<T,U>
    applyAsDouble(T t, U u)
  interface ToDoubleFunction<T>
    applyAsDouble(T value)
  interface ToIntBiFunction<T,U>
    applyAsInt(T t, U u)
  interface ToIntFunction<T>
    applyAsInt(T value)
  interface ToLongBiFunction<T,U>
    applyAsLong(T t, U u)
  interface ToLongFunction<T>
    applyAsLong(T value)

package java.util.jar
;---------------------------------------
  class Attributes
    #ctor(int size)
    #ctor(java.util.jar.Attributes attr)
    containsKey(java.lang.Object name)
    containsValue(java.lang.Object value)
    equals(java.lang.Object o)
    get(java.lang.Object name)
    getValue(java.lang.String name)
    getValue(java.util.jar.Attributes.Name name)
    put(java.lang.Object name, java.lang.Object value)
    putAll(java.util.Map<?,?> attr)
    putValue(java.lang.String name, java.lang.String value)
    remove(java.lang.Object name)
  class Attributes.Name
    #ctor(java.lang.String name)
    equals(java.lang.Object o)
  class JarEntry
    #ctor(java.lang.String name)
    #ctor(java.util.jar.JarEntry je)
    #ctor(java.util.zip.ZipEntry ze)
  class JarException
    #ctor(java.lang.String s)
  class JarFile
    getEntry(java.lang.String name)
    getInputStream(java.util.zip.ZipEntry ze)
    getJarEntry(java.lang.String name)
    #ctor(java.io.File file)
    #ctor(java.io.File file, boolean verify)
    #ctor(java.io.File file, boolean verify, int mode)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, boolean verify)
  class JarInputStream
    createZipEntry(java.lang.String name)
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, boolean verify)
    read(byte[] b, int off, int len)
  class JarOutputStream
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, java.util.jar.Manifest man)
    putNextEntry(java.util.zip.ZipEntry ze)
  class Manifest
    equals(java.lang.Object o)
    getAttributes(java.lang.String name)
    #ctor(java.io.InputStream is)
    #ctor(java.util.jar.Manifest man)
    read(java.io.InputStream is)
    write(java.io.OutputStream out)
  interface Pack200.Packer
    addPropertyChangeListener(java.beans.PropertyChangeListener listener)
    pack(java.util.jar.JarFile in, java.io.OutputStream out)
    pack(java.util.jar.JarInputStream in, java.io.OutputStream out)
    removePropertyChangeListener(java.beans.PropertyChangeListener listener)
  interface Pack200.Unpacker
    addPropertyChangeListener(java.beans.PropertyChangeListener listener)
    removePropertyChangeListener(java.beans.PropertyChangeListener listener)
    unpack(java.io.File in, java.util.jar.JarOutputStream out)
    unpack(java.io.InputStream in, java.util.jar.JarOutputStream out)

package java.util.logging
;---------------------------------------
  class ConsoleHandler
    publish(java.util.logging.LogRecord record)
  class ErrorManager
    error(java.lang.String msg, java.lang.Exception ex, int code)
  class FileHandler
    #ctor(java.lang.String pattern)
    #ctor(java.lang.String pattern, boolean append)
    #ctor(java.lang.String pattern, int limit, int count)
    #ctor(java.lang.String pattern, int limit, int count, boolean append)
    publish(java.util.logging.LogRecord record)
  interface Filter
    isLoggable(java.util.logging.LogRecord record)
  class Formatter
    format(java.util.logging.LogRecord record)
    formatMessage(java.util.logging.LogRecord record)
    getHead(java.util.logging.Handler h)
    getTail(java.util.logging.Handler h)
  class Handler
    isLoggable(java.util.logging.LogRecord record)
    publish(java.util.logging.LogRecord record)
    reportError(java.lang.String msg, java.lang.Exception ex, int code)
    setEncoding(java.lang.String encoding)
    setErrorManager(java.util.logging.ErrorManager em)
    setFilter(java.util.logging.Filter newFilter)
    setFormatter(java.util.logging.Formatter newFormatter)
    setLevel(java.util.logging.Level newLevel)
  class Level
    equals(java.lang.Object ox)
    #ctor(java.lang.String name, int value)
    #ctor(java.lang.String name, int value, java.lang.String resourceBundleName)
    parse(java.lang.String name)
  class Logger
    addHandler(java.util.logging.Handler handler)
    config(java.lang.String msg)
    config(java.util.function.Supplier<java.lang.String> msgSupplier)
    entering(java.lang.String sourceClass, java.lang.String sourceMethod)
    entering(java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.Object param1)
    entering(java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.Object[] params)
    exiting(java.lang.String sourceClass, java.lang.String sourceMethod)
    exiting(java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.Object result)
    fine(java.lang.String msg)
    fine(java.util.function.Supplier<java.lang.String> msgSupplier)
    finer(java.lang.String msg)
    finer(java.util.function.Supplier<java.lang.String> msgSupplier)
    finest(java.lang.String msg)
    finest(java.util.function.Supplier<java.lang.String> msgSupplier)
    getAnonymousLogger(java.lang.String resourceBundleName)
    getLogger(java.lang.String name)
    getLogger(java.lang.String name, java.lang.String resourceBundleName)
    info(java.lang.String msg)
    info(java.util.function.Supplier<java.lang.String> msgSupplier)
    isLoggable(java.util.logging.Level level)
    log(java.util.logging.Level level, java.lang.String msg)
    log(java.util.logging.Level level, java.lang.String msg, java.lang.Object param1)
    log(java.util.logging.Level level, java.lang.String msg, java.lang.Object[] params)
    log(java.util.logging.Level level, java.lang.String msg, java.lang.Throwable thrown)
    log(java.util.logging.Level level, java.lang.Throwable thrown, java.util.function.Supplier<java.lang.String> msgSupplier)
    log(java.util.logging.Level level, java.util.function.Supplier<java.lang.String> msgSupplier)
    log(java.util.logging.LogRecord record)
    #ctor(java.lang.String name, java.lang.String resourceBundleName)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String msg)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String msg, java.lang.Object param1)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String msg, java.lang.Object[] params)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String msg, java.lang.Throwable thrown)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.Throwable thrown, java.util.function.Supplier<java.lang.String> msgSupplier)
    logp(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.util.function.Supplier<java.lang.String> msgSupplier)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String bundleName, java.lang.String msg)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String bundleName, java.lang.String msg, java.lang.Object param1)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String bundleName, java.lang.String msg, java.lang.Object[] params)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.String bundleName, java.lang.String msg, java.lang.Throwable thrown)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.util.ResourceBundle bundle, java.lang.String msg, java.lang.Object... params)
    logrb(java.util.logging.Level level, java.lang.String sourceClass, java.lang.String sourceMethod, java.util.ResourceBundle bundle, java.lang.String msg, java.lang.Throwable thrown)
    removeHandler(java.util.logging.Handler handler)
    setFilter(java.util.logging.Filter newFilter)
    setLevel(java.util.logging.Level newLevel)
    setParent(java.util.logging.Logger parent)
    setResourceBundle(java.util.ResourceBundle bundle)
    setUseParentHandlers(boolean useParentHandlers)
    severe(java.lang.String msg)
    severe(java.util.function.Supplier<java.lang.String> msgSupplier)
    throwing(java.lang.String sourceClass, java.lang.String sourceMethod, java.lang.Throwable thrown)
    warning(java.lang.String msg)
    warning(java.util.function.Supplier<java.lang.String> msgSupplier)
  interface LoggingMXBean
    getLoggerLevel(java.lang.String loggerName)
    getParentLoggerName(java.lang.String loggerName)
    setLoggerLevel(java.lang.String loggerName, java.lang.String levelName)
  class LoggingPermission
    #ctor(java.lang.String name, java.lang.String actions)
  class LogManager
    addLogger(java.util.logging.Logger logger)
    addPropertyChangeListener(java.beans.PropertyChangeListener l)
    getLogger(java.lang.String name)
    getProperty(java.lang.String name)
    readConfiguration(java.io.InputStream ins)
    removePropertyChangeListener(java.beans.PropertyChangeListener l)
  class LogRecord
    #ctor(java.util.logging.Level level, java.lang.String msg)
    setLevel(java.util.logging.Level level)
    setLoggerName(java.lang.String name)
    setMessage(java.lang.String message)
    setMillis(long millis)
    setParameters(java.lang.Object[] parameters)
    setResourceBundle(java.util.ResourceBundle bundle)
    setResourceBundleName(java.lang.String name)
    setSequenceNumber(long seq)
    setSourceClassName(java.lang.String sourceClassName)
    setSourceMethodName(java.lang.String sourceMethodName)
    setThreadID(int threadID)
    setThrown(java.lang.Throwable thrown)
  class MemoryHandler
    isLoggable(java.util.logging.LogRecord record)
    #ctor(java.util.logging.Handler target, int size, java.util.logging.Level pushLevel)
    publish(java.util.logging.LogRecord record)
    setPushLevel(java.util.logging.Level newLevel)
  class SimpleFormatter
    format(java.util.logging.LogRecord record)
  class SocketHandler
    publish(java.util.logging.LogRecord record)
    #ctor(java.lang.String host, int port)
  class StreamHandler
    isLoggable(java.util.logging.LogRecord record)
    publish(java.util.logging.LogRecord record)
    setEncoding(java.lang.String encoding)
    setOutputStream(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, java.util.logging.Formatter formatter)
  class XMLFormatter
    format(java.util.logging.LogRecord record)
    getHead(java.util.logging.Handler h)
    getTail(java.util.logging.Handler h)

package java.util.prefs
;---------------------------------------
  class AbstractPreferences
    #ctor(java.util.prefs.AbstractPreferences parent, java.lang.String name)
    addNodeChangeListener(java.util.prefs.NodeChangeListener ncl)
    addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener pcl)
    childSpi(java.lang.String name)
    exportNode(java.io.OutputStream os)
    exportSubtree(java.io.OutputStream os)
    get(java.lang.String key, java.lang.String def)
    getBoolean(java.lang.String key, boolean def)
    getByteArray(java.lang.String key, byte[] def)
    getChild(java.lang.String nodeName)
    getDouble(java.lang.String key, double def)
    getFloat(java.lang.String key, float def)
    getInt(java.lang.String key, int def)
    getLong(java.lang.String key, long def)
    getSpi(java.lang.String key)
    node(java.lang.String path)
    nodeExists(java.lang.String path)
    put(java.lang.String key, java.lang.String value)
    putBoolean(java.lang.String key, boolean value)
    putByteArray(java.lang.String key, byte[] value)
    putDouble(java.lang.String key, double value)
    putFloat(java.lang.String key, float value)
    putInt(java.lang.String key, int value)
    putLong(java.lang.String key, long value)
    putSpi(java.lang.String key, java.lang.String value)
    remove(java.lang.String key)
    removeNodeChangeListener(java.util.prefs.NodeChangeListener ncl)
    removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener pcl)
    removeSpi(java.lang.String key)
  class BackingStoreException
    #ctor(java.lang.String s)
    #ctor(java.lang.Throwable cause)
  class InvalidPreferencesFormatException
    #ctor(java.lang.String message)
    #ctor(java.lang.String message, java.lang.Throwable cause)
    #ctor(java.lang.Throwable cause)
  class NodeChangeEvent
    #ctor(java.util.prefs.Preferences parent, java.util.prefs.Preferences child)
  interface NodeChangeListener
    childAdded(java.util.prefs.NodeChangeEvent evt)
    childRemoved(java.util.prefs.NodeChangeEvent evt)
  class PreferenceChangeEvent
    #ctor(java.util.prefs.Preferences node, java.lang.String key, java.lang.String newValue)
  interface PreferenceChangeListener
    preferenceChange(java.util.prefs.PreferenceChangeEvent evt)
  class Preferences
    addNodeChangeListener(java.util.prefs.NodeChangeListener ncl)
    addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener pcl)
    exportNode(java.io.OutputStream os)
    exportSubtree(java.io.OutputStream os)
    get(java.lang.String key, java.lang.String def)
    getBoolean(java.lang.String key, boolean def)
    getByteArray(java.lang.String key, byte[] def)
    getDouble(java.lang.String key, double def)
    getFloat(java.lang.String key, float def)
    getInt(java.lang.String key, int def)
    getLong(java.lang.String key, long def)
    importPreferences(java.io.InputStream is)
    node(java.lang.String pathName)
    nodeExists(java.lang.String pathName)
    put(java.lang.String key, java.lang.String value)
    putBoolean(java.lang.String key, boolean value)
    putByteArray(java.lang.String key, byte[] value)
    putDouble(java.lang.String key, double value)
    putFloat(java.lang.String key, float value)
    putInt(java.lang.String key, int value)
    putLong(java.lang.String key, long value)
    remove(java.lang.String key)
    removeNodeChangeListener(java.util.prefs.NodeChangeListener ncl)
    removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener pcl)
    systemNodeForPackage(java.lang.Class<?> c)
    userNodeForPackage(java.lang.Class<?> c)

package java.util.regex
;---------------------------------------
  class Matcher
    appendReplacement(java.lang.StringBuffer sb, java.lang.String replacement)
    appendTail(java.lang.StringBuffer sb)
    end(int group)
    end(java.lang.String name)
    find(int start)
    group(int group)
    group(java.lang.String name)
    quoteReplacement(java.lang.String s)
    region(int start, int end)
    replaceAll(java.lang.String replacement)
    replaceFirst(java.lang.String replacement)
    reset(java.lang.CharSequence input)
    start(int group)
    start(java.lang.String name)
    useAnchoringBounds(boolean value)
    usePattern(java.util.regex.Pattern newPattern)
    useTransparentBounds(boolean value)
  interface MatchResult
    end(int group)
    group(int group)
    start(int group)
  class Pattern
    compile(java.lang.String regex)
    compile(java.lang.String regex, int flags)
    matcher(java.lang.CharSequence input)
    matches(java.lang.String regex, java.lang.CharSequence input)
    quote(java.lang.String s)
    split(java.lang.CharSequence input)
    split(java.lang.CharSequence input, int limit)
    splitAsStream(java.lang.CharSequence input)
  class PatternSyntaxException
    #ctor(java.lang.String desc, java.lang.String regex, int index)

package java.util.stream
;---------------------------------------
  interface BaseStream<T,S>
    onClose(java.lang.Runnable closeHandler)
  interface Collector<T,A,R>
    <T,A,R> of(java.util.function.Supplier<A> supplier, java.util.function.BiConsumer<A,T> accumulator, java.util.function.BinaryOperator<A> combiner, java.util.function.Function<A,R> finisher, java.util.stream.Collector.Characteristics... characteristics)
    <T,R> of(java.util.function.Supplier<R> supplier, java.util.function.BiConsumer<R,T> accumulator, java.util.function.BinaryOperator<R> combiner, java.util.stream.Collector.Characteristics... characteristics)
  class Collector.Characteristics
    valueOf(java.lang.String name)
  class Collectors
    <T> averagingDouble(java.util.function.ToDoubleFunction<? super T> mapper)
    <T> averagingInt(java.util.function.ToIntFunction<? super T> mapper)
    <T> averagingLong(java.util.function.ToLongFunction<? super T> mapper)
    <T,A,R,RR> collectingAndThen(java.util.stream.Collector<T,A,R> downstream, java.util.function.Function<R,RR> finisher)
    <T,K> groupingBy(java.util.function.Function<? super T,? extends K> classifier)
    <T,K,D,A,M> groupingBy(java.util.function.Function<? super T,? extends K> classifier, java.util.function.Supplier<M> mapFactory, java.util.stream.Collector<? super T,A,D> downstream)
    <T,K,A,D> groupingBy(java.util.function.Function<? super T,? extends K> classifier, java.util.stream.Collector<? super T,A,D> downstream)
    <T,K> groupingByConcurrent(java.util.function.Function<? super T,? extends K> classifier)
    <T,K,A,D,M> groupingByConcurrent(java.util.function.Function<? super T,? extends K> classifier, java.util.function.Supplier<M> mapFactory, java.util.stream.Collector<? super T,A,D> downstream)
    <T,K,A,D> groupingByConcurrent(java.util.function.Function<? super T,? extends K> classifier, java.util.stream.Collector<? super T,A,D> downstream)
    joining(java.lang.CharSequence delimiter)
    joining(java.lang.CharSequence delimiter, java.lang.CharSequence prefix, java.lang.CharSequence suffix)
    <T,U,A,R> mapping(java.util.function.Function<? super T,? extends U> mapper, java.util.stream.Collector<? super U,A,R> downstream)
    <T> maxBy(java.util.Comparator<? super T> comparator)
    <T> minBy(java.util.Comparator<? super T> comparator)
    <T> partitioningBy(java.util.function.Predicate<? super T> predicate)
    <T,D,A> partitioningBy(java.util.function.Predicate<? super T> predicate, java.util.stream.Collector<? super T,A,D> downstream)
    <T> reducing(java.util.function.BinaryOperator<T> op)
    <T> reducing(T identity, java.util.function.BinaryOperator<T> op)
    <T,U> reducing(U identity, java.util.function.Function<? super T,? extends U> mapper, java.util.function.BinaryOperator<U> op)
    <T> summarizingDouble(java.util.function.ToDoubleFunction<? super T> mapper)
    <T> summarizingInt(java.util.function.ToIntFunction<? super T> mapper)
    <T> summarizingLong(java.util.function.ToLongFunction<? super T> mapper)
    <T> summingDouble(java.util.function.ToDoubleFunction<? super T> mapper)
    <T> summingInt(java.util.function.ToIntFunction<? super T> mapper)
    <T> summingLong(java.util.function.ToLongFunction<? super T> mapper)
    <T,C> toCollection(java.util.function.Supplier<C> collectionFactory)
    <T,K,U> toConcurrentMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper)
    <T,K,U> toConcurrentMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper, java.util.function.BinaryOperator<U> mergeFunction)
    <T,K,U,M> toConcurrentMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper, java.util.function.BinaryOperator<U> mergeFunction, java.util.function.Supplier<M> mapSupplier)
    <T,K,U> toMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper)
    <T,K,U> toMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper, java.util.function.BinaryOperator<U> mergeFunction)
    <T,K,U,M> toMap(java.util.function.Function<? super T,? extends K> keyMapper, java.util.function.Function<? super T,? extends U> valueMapper, java.util.function.BinaryOperator<U> mergeFunction, java.util.function.Supplier<M> mapSupplier)
  interface DoubleStream
    allMatch(java.util.function.DoublePredicate predicate)
    anyMatch(java.util.function.DoublePredicate predicate)
    <R> collect(java.util.function.Supplier<R> supplier, java.util.function.ObjDoubleConsumer<R> accumulator, java.util.function.BiConsumer<R,R> combiner)
    concat(java.util.stream.DoubleStream a, java.util.stream.DoubleStream b)
    filter(java.util.function.DoublePredicate predicate)
    flatMap(java.util.function.DoubleFunction<? extends java.util.stream.DoubleStream> mapper)
    forEach(java.util.function.DoubleConsumer action)
    forEachOrdered(java.util.function.DoubleConsumer action)
    generate(java.util.function.DoubleSupplier s)
    iterate(double seed, java.util.function.DoubleUnaryOperator f)
    limit(long maxSize)
    map(java.util.function.DoubleUnaryOperator mapper)
    mapToInt(java.util.function.DoubleToIntFunction mapper)
    mapToLong(java.util.function.DoubleToLongFunction mapper)
    <U> mapToObj(java.util.function.DoubleFunction<? extends U> mapper)
    noneMatch(java.util.function.DoublePredicate predicate)
    of(double t)
    of(double... values)
    peek(java.util.function.DoubleConsumer action)
    reduce(double identity, java.util.function.DoubleBinaryOperator op)
    reduce(java.util.function.DoubleBinaryOperator op)
    skip(long n)
  interface DoubleStream.Builder
    accept(double t)
    add(double t)
  interface IntStream
    allMatch(java.util.function.IntPredicate predicate)
    anyMatch(java.util.function.IntPredicate predicate)
    <R> collect(java.util.function.Supplier<R> supplier, java.util.function.ObjIntConsumer<R> accumulator, java.util.function.BiConsumer<R,R> combiner)
    concat(java.util.stream.IntStream a, java.util.stream.IntStream b)
    filter(java.util.function.IntPredicate predicate)
    flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream> mapper)
    forEach(java.util.function.IntConsumer action)
    forEachOrdered(java.util.function.IntConsumer action)
    generate(java.util.function.IntSupplier s)
    iterate(int seed, java.util.function.IntUnaryOperator f)
    limit(long maxSize)
    map(java.util.function.IntUnaryOperator mapper)
    mapToDouble(java.util.function.IntToDoubleFunction mapper)
    mapToLong(java.util.function.IntToLongFunction mapper)
    <U> mapToObj(java.util.function.IntFunction<? extends U> mapper)
    noneMatch(java.util.function.IntPredicate predicate)
    of(int t)
    of(int... values)
    peek(java.util.function.IntConsumer action)
    range(int startInclusive, int endExclusive)
    rangeClosed(int startInclusive, int endInclusive)
    reduce(int identity, java.util.function.IntBinaryOperator op)
    reduce(java.util.function.IntBinaryOperator op)
    skip(long n)
  interface IntStream.Builder
    accept(int t)
    add(int t)
  interface LongStream
    allMatch(java.util.function.LongPredicate predicate)
    anyMatch(java.util.function.LongPredicate predicate)
    <R> collect(java.util.function.Supplier<R> supplier, java.util.function.ObjLongConsumer<R> accumulator, java.util.function.BiConsumer<R,R> combiner)
    concat(java.util.stream.LongStream a, java.util.stream.LongStream b)
    filter(java.util.function.LongPredicate predicate)
    flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream> mapper)
    forEach(java.util.function.LongConsumer action)
    forEachOrdered(java.util.function.LongConsumer action)
    generate(java.util.function.LongSupplier s)
    iterate(long seed, java.util.function.LongUnaryOperator f)
    limit(long maxSize)
    map(java.util.function.LongUnaryOperator mapper)
    mapToDouble(java.util.function.LongToDoubleFunction mapper)
    mapToInt(java.util.function.LongToIntFunction mapper)
    <U> mapToObj(java.util.function.LongFunction<? extends U> mapper)
    noneMatch(java.util.function.LongPredicate predicate)
    of(long t)
    of(long... values)
    peek(java.util.function.LongConsumer action)
    range(long startInclusive, long endExclusive)
    rangeClosed(long startInclusive, long endInclusive)
    reduce(java.util.function.LongBinaryOperator op)
    reduce(long identity, java.util.function.LongBinaryOperator op)
    skip(long n)
  interface LongStream.Builder
    accept(long t)
    add(long t)
  interface Stream<T>
    allMatch(java.util.function.Predicate<? super T> predicate)
    anyMatch(java.util.function.Predicate<? super T> predicate)
    <R> collect(java.util.function.Supplier<R> supplier, java.util.function.BiConsumer<R,? super T> accumulator, java.util.function.BiConsumer<R,R> combiner)
    <R,A> collect(java.util.stream.Collector<? super T,A,R> collector)
    <T> concat(java.util.stream.Stream<? extends T> a, java.util.stream.Stream<? extends T> b)
    filter(java.util.function.Predicate<? super T> predicate)
    <R> flatMap(java.util.function.Function<? super T,? extends java.util.stream.Stream<? extends R>> mapper)
    flatMapToDouble(java.util.function.Function<? super T,? extends java.util.stream.DoubleStream> mapper)
    flatMapToInt(java.util.function.Function<? super T,? extends java.util.stream.IntStream> mapper)
    flatMapToLong(java.util.function.Function<? super T,? extends java.util.stream.LongStream> mapper)
    forEach(java.util.function.Consumer<? super T> action)
    forEachOrdered(java.util.function.Consumer<? super T> action)
    <T> generate(java.util.function.Supplier<T> s)
    <T> iterate(T seed, java.util.function.UnaryOperator<T> f)
    limit(long maxSize)
    <R> map(java.util.function.Function<? super T,? extends R> mapper)
    mapToDouble(java.util.function.ToDoubleFunction<? super T> mapper)
    mapToInt(java.util.function.ToIntFunction<? super T> mapper)
    mapToLong(java.util.function.ToLongFunction<? super T> mapper)
    max(java.util.Comparator<? super T> comparator)
    min(java.util.Comparator<? super T> comparator)
    noneMatch(java.util.function.Predicate<? super T> predicate)
    <T> of(T t)
    <T> of(T... values)
    peek(java.util.function.Consumer<? super T> action)
    reduce(java.util.function.BinaryOperator<T> accumulator)
    reduce(T identity, java.util.function.BinaryOperator<T> accumulator)
    <U> reduce(U identity, java.util.function.BiFunction<U,? super T,U> accumulator, java.util.function.BinaryOperator<U> combiner)
    skip(long n)
    sorted(java.util.Comparator<? super T> comparator)
    <A> toArray(java.util.function.IntFunction<A[]> generator)
  interface Stream.Builder<T>
    accept(T t)
    add(T t)
  class StreamSupport
    doubleStream(java.util.function.Supplier<? extends java.util.Spliterator.OfDouble> supplier, int characteristics, boolean parallel)
    doubleStream(java.util.Spliterator.OfDouble spliterator, boolean parallel)
    intStream(java.util.function.Supplier<? extends java.util.Spliterator.OfInt> supplier, int characteristics, boolean parallel)
    intStream(java.util.Spliterator.OfInt spliterator, boolean parallel)
    longStream(java.util.function.Supplier<? extends java.util.Spliterator.OfLong> supplier, int characteristics, boolean parallel)
    longStream(java.util.Spliterator.OfLong spliterator, boolean parallel)
    <T> stream(java.util.function.Supplier<? extends java.util.Spliterator<T>> supplier, int characteristics, boolean parallel)
    <T> stream(java.util.Spliterator<T> spliterator, boolean parallel)

package java.util.zip
;---------------------------------------
  class Adler32
    update(byte[] b)
    update(byte[] b, int off, int len)
    update(int b)
    update(java.nio.ByteBuffer buffer)
  class CheckedInputStream
    #ctor(java.io.InputStream in, java.util.zip.Checksum cksum)
    read(byte[] buf, int off, int len)
    skip(long n)
  class CheckedOutputStream
    #ctor(java.io.OutputStream out, java.util.zip.Checksum cksum)
    write(byte[] b, int off, int len)
    write(int b)
  interface Checksum
    update(byte[] b, int off, int len)
    update(int b)
  class CRC32
    update(byte[] b)
    update(byte[] b, int off, int len)
    update(int b)
    update(java.nio.ByteBuffer buffer)
  class DataFormatException
    #ctor(java.lang.String s)
  class Deflater
    deflate(byte[] b)
    deflate(byte[] b, int off, int len)
    deflate(byte[] b, int off, int len, int flush)
    #ctor(int level)
    #ctor(int level, boolean nowrap)
    setDictionary(byte[] b)
    setDictionary(byte[] b, int off, int len)
    setInput(byte[] b)
    setInput(byte[] b, int off, int len)
    setLevel(int level)
    setStrategy(int strategy)
  class DeflaterInputStream
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, java.util.zip.Deflater defl)
    #ctor(java.io.InputStream in, java.util.zip.Deflater defl, int bufLen)
    mark(int limit)
    read(byte[] b, int off, int len)
    skip(long n)
  class DeflaterOutputStream
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, boolean syncFlush)
    #ctor(java.io.OutputStream out, java.util.zip.Deflater def)
    #ctor(java.io.OutputStream out, java.util.zip.Deflater def, boolean syncFlush)
    #ctor(java.io.OutputStream out, java.util.zip.Deflater def, int size)
    #ctor(java.io.OutputStream out, java.util.zip.Deflater def, int size, boolean syncFlush)
    write(byte[] b, int off, int len)
    write(int b)
  class GZIPInputStream
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, int size)
    read(byte[] buf, int off, int len)
  class GZIPOutputStream
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, boolean syncFlush)
    #ctor(java.io.OutputStream out, int size)
    #ctor(java.io.OutputStream out, int size, boolean syncFlush)
    write(byte[] buf, int off, int len)
  class Inflater
    inflate(byte[] b)
    inflate(byte[] b, int off, int len)
    #ctor(boolean nowrap)
    setDictionary(byte[] b)
    setDictionary(byte[] b, int off, int len)
    setInput(byte[] b)
    setInput(byte[] b, int off, int len)
  class InflaterInputStream
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, java.util.zip.Inflater inf)
    #ctor(java.io.InputStream in, java.util.zip.Inflater inf, int size)
    mark(int readlimit)
    read(byte[] b, int off, int len)
    skip(long n)
  class InflaterOutputStream
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, java.util.zip.Inflater infl)
    #ctor(java.io.OutputStream out, java.util.zip.Inflater infl, int bufLen)
    write(byte[] b, int off, int len)
    write(int b)
  class ZipEntry
    setComment(java.lang.String comment)
    setCompressedSize(long csize)
    setCrc(long crc)
    setCreationTime(java.nio.file.attribute.FileTime time)
    setExtra(byte[] extra)
    setLastAccessTime(java.nio.file.attribute.FileTime time)
    setLastModifiedTime(java.nio.file.attribute.FileTime time)
    setMethod(int method)
    setSize(long size)
    setTime(long time)
    #ctor(java.lang.String name)
    #ctor(java.util.zip.ZipEntry e)
  class ZipError
    #ctor(java.lang.String s)
  class ZipException
    #ctor(java.lang.String s)
  class ZipFile
    getEntry(java.lang.String name)
    getInputStream(java.util.zip.ZipEntry entry)
    #ctor(java.io.File file)
    #ctor(java.io.File file, int mode)
    #ctor(java.io.File file, int mode, java.nio.charset.Charset charset)
    #ctor(java.io.File file, java.nio.charset.Charset charset)
    #ctor(java.lang.String name)
    #ctor(java.lang.String name, java.nio.charset.Charset charset)
  class ZipInputStream
    createZipEntry(java.lang.String name)
    read(byte[] b, int off, int len)
    skip(long n)
    #ctor(java.io.InputStream in)
    #ctor(java.io.InputStream in, java.nio.charset.Charset charset)
  class ZipOutputStream
    putNextEntry(java.util.zip.ZipEntry e)
    setComment(java.lang.String comment)
    setLevel(int level)
    setMethod(int method)
    write(byte[] b, int off, int len)
    #ctor(java.io.OutputStream out)
    #ctor(java.io.OutputStream out, java.nio.charset.Charset charset)
